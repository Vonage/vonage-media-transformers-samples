!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self)["noise-suppression"]={})}(this,(function(e){"use strict";var t=Object.defineProperty,a=(e,n,c)=>(((e,n,c)=>{n in e?t(e,n,{enumerable:!0,configurable:!0,writable:!0,value:c}):e[n]=c})(e,"symbol"!=typeof n?n+"":n,c),c);class l{}a(l,"updates",{transformer_new:"New transformer",transformer_null:"Null transformer"}),a(l,"errors",{transformer_none:"No transformers provided",transformer_start:"Cannot start transformer",transformer_transform:"Cannot transform frame",transformer_flush:"Cannot flush transformer",readable_null:"Readable is null",writable_null:"Writable is null"});const n=new WeakMap,c=new WeakMap,r=new WeakMap,d=Symbol("anyProducer"),Z=Promise.resolve(),h=Symbol("listenerAdded"),u=Symbol("listenerRemoved");let y=!1;function g(e){if("string"!=typeof e&&"symbol"!=typeof e)throw new TypeError("eventName must be a string or a symbol")}function T(e){if("function"!=typeof e)throw new TypeError("listener must be a function")}function _(e,t){const n=c.get(e);return n.has(t)||n.set(t,new Set),n.get(t)}function b(e,t){const n="string"==typeof t||"symbol"==typeof t?t:d,c=r.get(e);return c.has(n)||c.set(n,new Set),c.get(n)}function $(e,t){t=Array.isArray(t)?t:[t];let n=!1,s=()=>{},c=[];const r={enqueue(e){c.push(e),s()},finish(){n=!0,s()}};for(const d of t)b(e,d).add(r);return{async next(){return c?0===c.length?n?(c=void 0,this.next()):(await new Promise((e=>{s=e})),this.next()):{done:!1,value:await c.shift()}:{done:!0}},async return(n){c=void 0;for(const c of t)b(e,c).delete(r);return s(),arguments.length>0?{done:!0,value:await n}:{done:!0}},[Symbol.asyncIterator](){return this}}}function H(e){if(void 0===e)return p;if(!Array.isArray(e))throw new TypeError("`methodNames` must be an array of strings");for(const t of e)if(!p.includes(t))throw"string"!=typeof t?new TypeError("`methodNames` element must be a string"):new Error(`${t} is not Emittery method`);return e}const I=e=>e===h||e===u;class m{static mixin(e,t){return t=H(t),n=>{if("function"!=typeof n)throw new TypeError("`target` must be function");for(const e of t)if(void 0!==n.prototype[e])throw new Error(`The property \`${e}\` already exists on \`target\``);Object.defineProperty(n.prototype,e,{enumerable:!1,get:function o(){return Object.defineProperty(this,e,{enumerable:!1,value:new m}),this[e]}});const i=t=>function(...n){return this[e][t](...n)};for(const e of t)Object.defineProperty(n.prototype,e,{enumerable:!1,value:i(e)});return n}}static get isDebugEnabled(){if("object"!=typeof process)return y;const{env:e}=process||{env:{}};return"emittery"===e.DEBUG||"*"===e.DEBUG||y}static set isDebugEnabled(e){y=e}constructor(e={}){n.set(this,new Set),c.set(this,new Map),r.set(this,new Map),this.debug=e.debug||{},void 0===this.debug.enabled&&(this.debug.enabled=!1),this.debug.logger||(this.debug.logger=(e,t,n,c)=>{try{c=JSON.stringify(c)}catch{c=`Object with the following keys failed to stringify: ${Object.keys(c).join(",")}`}"symbol"==typeof n&&(n=n.toString());const r=new Date,d=`${r.getHours()}:${r.getMinutes()}:${r.getSeconds()}.${r.getMilliseconds()}`;console.log(`[${d}][emittery:${e}][${t}] Event Name: ${n}\n\tdata: ${c}`)})}logIfDebugEnabled(e,t,n){(m.isDebugEnabled||this.debug.enabled)&&this.debug.logger(e,this.debug.name,t,n)}on(e,t){T(t),e=Array.isArray(e)?e:[e];for(const n of e)g(n),_(this,n).add(t),this.logIfDebugEnabled("subscribe",n,void 0),I(n)||this.emit(h,{eventName:n,listener:t});return this.off.bind(this,e,t)}off(e,t){T(t),e=Array.isArray(e)?e:[e];for(const n of e)g(n),_(this,n).delete(t),this.logIfDebugEnabled("unsubscribe",n,void 0),I(n)||this.emit(u,{eventName:n,listener:t})}once(e){return new Promise((t=>{const n=this.on(e,(e=>{n(),t(e)}))}))}events(e){e=Array.isArray(e)?e:[e];for(const t of e)g(t);return $(this,e)}async emit(e,t){g(e),this.logIfDebugEnabled("emit",e,t),function q(e,t,n){const c=r.get(e);if(c.has(t))for(const r of c.get(t))r.enqueue(n);if(c.has(d)){const e=Promise.all([t,n]);for(const t of c.get(d))t.enqueue(e)}}(this,e,t);const c=_(this,e),h=n.get(this),u=[...c],y=I(e)?[]:[...h];await Z,await Promise.all([...u.map((async e=>{if(c.has(e))return e(t)})),...y.map((async n=>{if(h.has(n))return n(e,t)}))])}async emitSerial(e,t){g(e),this.logIfDebugEnabled("emitSerial",e,t);const c=_(this,e),r=n.get(this),d=[...c],h=[...r];await Z;for(const n of d)c.has(n)&&await n(t);for(const n of h)r.has(n)&&await n(e,t)}onAny(e){return T(e),this.logIfDebugEnabled("subscribeAny",void 0,void 0),n.get(this).add(e),this.emit(h,{listener:e}),this.offAny.bind(this,e)}anyEvent(){return $(this)}offAny(e){T(e),this.logIfDebugEnabled("unsubscribeAny",void 0,void 0),this.emit(u,{listener:e}),n.get(this).delete(e)}clearListeners(e){e=Array.isArray(e)?e:[e];for(const t of e)if(this.logIfDebugEnabled("clear",t,void 0),"string"==typeof t||"symbol"==typeof t){_(this,t).clear();const e=b(this,t);for(const t of e)t.finish();e.clear()}else{n.get(this).clear();for(const e of c.get(this).values())e.clear();for(const e of r.get(this).values()){for(const t of e)t.finish();e.clear()}}}listenerCount(e){e=Array.isArray(e)?e:[e];let t=0;for(const d of e)if("string"!=typeof d){typeof d<"u"&&g(d),t+=n.get(this).size;for(const e of c.get(this).values())t+=e.size;for(const e of r.get(this).values())t+=e.size}else t+=n.get(this).size+_(this,d).size+b(this,d).size+b(this).size;return t}bindMethods(e,t){if("object"!=typeof e||null===e)throw new TypeError("`target` must be an object");t=H(t);for(const n of t){if(void 0!==e[n])throw new Error(`The property \`${n}\` already exists on \`target\``);Object.defineProperty(e,n,{enumerable:!1,value:this[n].bind(this)})}}}const p=Object.getOwnPropertyNames(m.prototype).filter((e=>"constructor"!==e));Object.defineProperty(m,"listenerAdded",{value:h,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(m,"listenerRemoved",{value:u,writable:!1,enumerable:!0,configurable:!1});var G=m;function v(e){return function X(e){if(function J(e){return"object"==typeof e&&null!==e&&"message"in e&&"string"==typeof e.message}(e))return e;try{return new Error(JSON.stringify(e))}catch{return new Error(String(e))}}(e).message}var V=Object.defineProperty,N=(e,t,n)=>(((e,t,n)=>{t in e?V(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n})(e,"symbol"!=typeof t?t+"":t,n),n);let Y;const R=new Uint8Array(16);function ie(){if(!Y&&(Y=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!Y))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return Y(R)}const f=[];for(let Te=0;Te<256;++Te)f.push((Te+256).toString(16).slice(1));const S={randomUUID:typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};function ce(e,t,n){if(S.randomUUID&&!t&&!e)return S.randomUUID();const c=(e=e||{}).random||(e.rng||ie)();if(c[6]=15&c[6]|64,c[8]=63&c[8]|128,t){n=n||0;for(let e=0;e<16;++e)t[n+e]=c[e];return t}return function ne(e,t=0){return(f[e[t+0]]+f[e[t+1]]+f[e[t+2]]+f[e[t+3]]+"-"+f[e[t+4]]+f[e[t+5]]+"-"+f[e[t+6]]+f[e[t+7]]+"-"+f[e[t+8]]+f[e[t+9]]+"-"+f[e[t+10]]+f[e[t+11]]+f[e[t+12]]+f[e[t+13]]+f[e[t+14]]+f[e[t+15]]).toLowerCase()}(c)}function W(e,t){globalThis.vonage||(globalThis.vonage={}),globalThis.vonage.workerizer||(globalThis.vonage.workerizer={});let n=globalThis.vonage.workerizer;return n[e]||(n[e]=t),n[e]}const K=W("globals",{});var F=(e=>(e.INIT="INIT",e.FORWARD="FORWARD",e.TERMINATE="TERMINATE",e.GLOBALS_SYNC="GLOBALS_SYNC",e))(F||{});function j(e){return[ImageBitmap,ReadableStream,WritableStream].some((t=>e instanceof t))}let k=0;function le(e,t,n,c,r){const d=k++;return e.postMessage({id:d,type:t,functionName:n,args:c},c.filter((e=>j(e)))),new Promise((e=>{null==r||r.set(d,e)}))}function w(e,t){const{id:n,type:c}=e,r=Array.isArray(t)?t:[t];postMessage({id:n,type:c,result:t},r.filter((e=>j(e))))}const L=W("workerized",{});function B(){return typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope}function P(e,t){if(Array.isArray(t))t.splice(0,t.length);else if("object"==typeof t)for(const n in t)delete t[n];for(const n in e)Array.isArray(e[n])?(t[n]=[],P(e[n],t[n])):"object"==typeof e[n]?(t[n]={},P(e[n],t[n])):t[n]=e[n]}const z=W("registeredWorkers",{});function ye(e,t){return K[e]||(K[e]=t),[()=>K[e],async t=>{K[e]=t,await async function ue(){if(B())w({type:F.GLOBALS_SYNC},K);else{const e=[];for(const t in L){const{worker:n,resolvers:c}=L[t].workerContext;n&&e.push(le(n,F.GLOBALS_SYNC,"",[K],c))}await Promise.all(e)}}()}]}B()&&function _e(){const e={};onmessage=async t=>{const n=t.data;switch(n.type){case F.INIT:!function de(e,t){if(!e.args)throw"Missing className while initializing worker";const[n,c]=e.args,r=z[n];if(!r)throw`unknown worker class ${n}`;t.instance=new r(e.args.slice(1)),P(c,K),w(e,void 0!==typeof t.instance)}(n,e);break;case F.FORWARD:!async function he(e,t){const{functionName:n,args:c}=e;if(!t.instance)throw"instance not initialized";if(!n)throw"missing function name to call";if(!t.instance[n])throw`undefined function [${n}] in class ${t.instance.constructor.workerId}`;w(e,await t.instance[n](...null!=c?c:[]))}(n,e);break;case F.TERMINATE:!async function me(e,t){const{args:n}=e;if(!t.instance)throw"instance not initialized";let c;t.instance.terminate&&(c=await t.instance.terminate(...null!=n?n:[])),w(e,c)}(n,e);break;case F.GLOBALS_SYNC:!function ge(e){if(!e.args)throw"Missing globals while syncing";P(e.args[0],K),w(e,{})}(n)}}}();const[U,x]=function be(e,t){return ye(e,t)}("metadata");function C(){return U()}class D{constructor(e){N(this,"uuid",ce()),this.config=e}async send(e){var t,n,c;const{appId:r,sourceType:d}=null!=(t=C())?t:{};if(!r||!d)return"metadata missing";const Z=new AbortController,h=setTimeout((()=>Z.abort()),1e4);return await(null!=(c=null==(n=this.config)?void 0:n.fetch)?c:fetch)(this.getUrl(),{method:"POST",headers:this.getHeaders(),body:JSON.stringify(this.buildReport(e)),signal:Z.signal}),clearTimeout(h),"success"}getUrl(){var e;let t=null!=(e=C().proxyUrl)?e:"https://";return t+=("/"===t.at(-1)?"":"/")+"hlg.tokbox.com/prod/logging/vcp_webrtc",t}getHeaders(){return{"Content-Type":"application/json"}}buildReport(e){const t=C();return{guid:this.uuid,...e,applicationId:t.appId,timestamp:Date.now(),proxyUrl:t.proxyUrl,source:t.sourceType}}}const Q="2.0.3";class Se{constructor(e){a(this,"frameTransformedCount",0),a(this,"frameFromSourceCount",0),a(this,"startAt",0),a(this,"reporter"),this.config=e,this.reporter=new D(e)}async onFrameFromSource(){this.frameFromSourceCount++}get fps(){const{startAt:e,frameFromSourceCount:t}=this;return t/((Date.now()-e)/1e3)}async onFrameTransformed(e={},t=!1){0===this.startAt&&(this.startAt=Date.now()),this.frameTransformedCount++;const{startAt:n,frameTransformedCount:c,frameFromSourceCount:r}=this,d=Date.now(),Z=(d-n)/1e3,h=c/Z,u=r/Z;return t||this.frameTransformedCount>=this.config.loggingIntervalFrameCount?(this.frameFromSourceCount=0,this.frameTransformedCount=0,this.startAt=d,this.reporter.config=this.config,this.reporter.send({...this.config.report,variation:"QoS",fps:u,transformedFps:h,framesTransformed:c,...e})):"success"}}var M=(e=>(e.pipeline_ended="pipeline_ended",e.pipeline_ended_with_error="pipeline_ended_with_error",e.pipeline_started="pipeline_started",e.pipeline_started_with_error="pipeline_started_with_error",e.pipeline_restarted="pipeline_restarted",e.pipeline_restarted_with_error="pipeline_restarted_with_error",e))(M||{});class Pe extends G{constructor(e,t){super(),a(this,"reporter_",new D),a(this,"reporterQos_",new Se({loggingIntervalFrameCount:500,report:{version:Q}})),a(this,"transformerType_"),a(this,"transformer_"),a(this,"shouldStop_"),a(this,"isFlashed_"),a(this,"mediaTransformerQosReportStartTimestamp_"),a(this,"videoHeight_"),a(this,"videoWidth_"),a(this,"trackExpectedRate_"),a(this,"index_"),a(this,"controller_"),this.index_=t,this.transformer_=e,this.shouldStop_=!1,this.isFlashed_=!1,this.mediaTransformerQosReportStartTimestamp_=0,this.videoHeight_=0,this.videoWidth_=0,this.trackExpectedRate_=-1,this.transformerType_="Custom","getTransformerType"in e&&(this.transformerType_=e.getTransformerType()),this.report({variation:"Create"})}setTrackExpectedRate(e){this.trackExpectedRate_=e}async start(e){if(this.controller_=e,this.transformer_&&"function"==typeof this.transformer_.start)try{await this.transformer_.start(e)}catch(t){this.report({message:l.errors.transformer_start,variation:"Error",error:v(t)});const e={eventMetaData:{transformerIndex:this.index_},error:t,function:"start"};this.emit("error",e)}}async transform(e,t){var n,c,r,d;if(0===this.mediaTransformerQosReportStartTimestamp_&&(this.mediaTransformerQosReportStartTimestamp_=Date.now()),e instanceof VideoFrame&&(this.videoHeight_=null!=(n=null==e?void 0:e.displayHeight)?n:0,this.videoWidth_=null!=(c=null==e?void 0:e.displayWidth)?c:0),this.reporterQos_.onFrameFromSource(),this.transformer_)if(this.shouldStop_)console.warn("[Pipeline] flush from transform"),e.close(),this.flush(t),t.terminate();else{try{await(null==(d=(r=this.transformer_).transform)?void 0:d.call(r,e,t)),this.reportQos()}catch(Z){this.report({message:l.errors.transformer_transform,variation:"Error",error:v(Z)});const e={eventMetaData:{transformerIndex:this.index_},error:Z,function:"transform"};this.emit("error",e)}if(-1!=this.trackExpectedRate_&&.8*this.trackExpectedRate_>this.reporterQos_.fps){const e={eventMetaData:{transformerIndex:this.index_},warningType:"fps_drop",dropInfo:{requested:this.trackExpectedRate_,current:this.reporterQos_.fps}};this.emit("warn",e)}}}async flush(e){if(this.transformer_&&"function"==typeof this.transformer_.flush&&!this.isFlashed_){this.isFlashed_=!0;try{await this.transformer_.flush(e)}catch(t){this.report({message:l.errors.transformer_flush,variation:"Error",error:v(t)});const e={eventMetaData:{transformerIndex:this.index_},error:t,function:"flush"};this.emit("error",e)}}this.reportQos(!0),this.report({variation:"Delete"})}stop(){console.log("[Pipeline] Stop stream."),this.controller_&&(this.flush(this.controller_),this.controller_.terminate()),this.shouldStop_=!0}report(e){this.reporter_.send({version:Q,action:"MediaTransformer",transformerType:this.transformerType_,...e})}reportQos(e=!1){this.reporterQos_.config={...this.reporterQos_.config},this.reporterQos_.onFrameTransformed({version:Q,action:"MediaTransformer",transformerType:this.transformerType_,videoWidth:this.videoWidth_,videoHeight:this.videoHeight_},e)}}class Me extends G{constructor(e){super(),a(this,"transformers_"),a(this,"trackExpectedRate_"),this.transformers_=[],this.trackExpectedRate_=-1;for(let t=0;t<e.length;t++){let n=new Pe(e[t],t);n.on("error",(e=>{this.emit("error",e)})),n.on("warn",(e=>{this.emit("warn",e)})),this.transformers_.push(n)}}setTrackExpectedRate(e){this.trackExpectedRate_=e;for(let t of this.transformers_)t.setTrackExpectedRate(this.trackExpectedRate_)}async start(e,t){if(this.transformers_&&0!==this.transformers_.length){try{let n=e;for(let t of this.transformers_)e=e.pipeThrough(new TransformStream(t));e.pipeTo(t).then((async()=>{console.log("[Pipeline] Setup."),await t.abort(),await n.cancel(),this.emit("pipelineInfo","pipeline_ended")})).catch((async c=>{e.cancel().then((()=>{console.log("[Pipeline] Shutting down streams after abort.")})).catch((e=>{console.error("[Pipeline] Error from stream transform:",e)})),await t.abort(c),await n.cancel(c),this.emit("pipelineInfo","pipeline_ended_with_error")}))}catch{return this.emit("pipelineInfo","pipeline_started_with_error"),void this.destroy()}this.emit("pipelineInfo","pipeline_started"),console.log("[Pipeline] Pipeline started.")}else console.log("[Pipeline] No transformers.")}async destroy(){console.log("[Pipeline] Destroying Pipeline.");for(let e of this.transformers_)e.stop()}}class Oe extends G{constructor(){super(),a(this,"reporter_"),a(this,"pipeline_"),a(this,"transformers_"),a(this,"readable_"),a(this,"writable_"),a(this,"trackExpectedRate_"),this.reporter_=new D,this.trackExpectedRate_=-1,this.report({variation:"Create"})}setTrackExpectedRate(e){this.trackExpectedRate_=e,this.pipeline_&&this.pipeline_.setTrackExpectedRate(this.trackExpectedRate_)}transform(e,t){return this.readable_=e,this.writable_=t,this.transformInternal()}transformInternal(){return new Promise((async(e,t)=>{if(!this.transformers_||0===this.transformers_.length)return this.report({message:l.errors.transformer_none,variation:"Error"}),void t("[MediaProcessor] Need to set transformers.");if(!this.readable_)return this.report({variation:"Error",message:l.errors.readable_null}),void t("[MediaProcessor] Readable is null.");if(!this.writable_)return this.report({variation:"Error",message:l.errors.writable_null}),void t("[MediaProcessor] Writable is null.");let n=!1;this.pipeline_&&(n=!0,this.pipeline_.clearListeners(),this.pipeline_.destroy()),this.pipeline_=new Me(this.transformers_),this.pipeline_.on("warn",(e=>{this.emit("warn",e)})),this.pipeline_.on("error",(e=>{this.emit("error",e)})),this.pipeline_.on("pipelineInfo",(e=>{n&&("pipeline_started"===e?e=M.pipeline_restarted:"pipeline_started_with_error"===e&&(e=M.pipeline_restarted_with_error)),this.emit("pipelineInfo",e)})),-1!=this.trackExpectedRate_&&this.pipeline_.setTrackExpectedRate(this.trackExpectedRate_),this.pipeline_.start(this.readable_,this.writable_).then((()=>{e()})).catch((e=>{t(e)}))}))}setTransformers(e){return this.report({variation:"Update",message:l.updates.transformer_new}),this.transformers_=e,this.readable_&&this.writable_?this.transformInternal():Promise.resolve()}destroy(){return new Promise((async e=>{this.pipeline_&&this.pipeline_.destroy(),this.report({variation:"Delete"}),e()}))}report(e){this.reporter_.send({version:Q,action:"MediaProcessor",...e})}}class xe{constructor(){a(this,"processor_"),a(this,"generator_"),this.processor_=null,this.generator_=null}init(e){return new Promise(((t,n)=>{try{this.processor_=new MediaStreamTrackProcessor(e)}catch(c){console.log(`[InsertableStreamHelper] MediaStreamTrackProcessor failed: ${c}`),n(c)}try{"audio"===e.kind?this.generator_=new MediaStreamTrackGenerator({kind:"audio"}):"video"===e.kind?this.generator_=new MediaStreamTrackGenerator({kind:"video"}):n("kind not supported")}catch(c){console.log(`[InsertableStreamHelper] MediaStreamTrackGenerator failed: ${c}`),n(c)}t()}))}getReadable(){return this.processor_.readable}getWriteable(){return this.generator_.writable}getProccesorTrack(){return this.generator_}}class Fe{constructor(e){a(this,"insertableStreamHelper_"),a(this,"mediaProcessor_"),this.insertableStreamHelper_=new xe,this.mediaProcessor_=e}setTrack(e){return new Promise(((t,n)=>{this.insertableStreamHelper_.init(e).then((()=>{this.mediaProcessor_.transform(this.insertableStreamHelper_.getReadable(),this.insertableStreamHelper_.getWriteable()).then((()=>{t(this.insertableStreamHelper_.getProccesorTrack())})).catch((e=>{n(e)}))})).catch((e=>{n(e)}))}))}destroy(){return new Promise(((e,t)=>{this.mediaProcessor_?this.mediaProcessor_.destroy().then((()=>{e()})).catch((e=>{t(e)})):t("no processor")}))}}const E=new WeakMap,O=new WeakMap,A=new WeakMap,ee=Symbol("anyProducer"),te=Promise.resolve(),se=Symbol("listenerAdded"),oe=Symbol("listenerRemoved");let re=!1,ae=!1;function assertEventName$1(e){if("string"!=typeof e&&"symbol"!=typeof e&&"number"!=typeof e)throw new TypeError("`eventName` must be a string, symbol, or number")}function assertListener$1(e){if("function"!=typeof e)throw new TypeError("listener must be a function")}function getListeners$1(e,t){const n=O.get(e);if(n.has(t))return n.get(t)}function getEventProducers$1(e,t){const n="string"==typeof t||"symbol"==typeof t||"number"==typeof t?t:ee,c=A.get(e);if(c.has(n))return c.get(n)}function iterator$1(e,t){t=Array.isArray(t)?t:[t];let n=!1,flush=()=>{},c=[];const r={enqueue(e){c.push(e),flush()},finish(){n=!0,flush()}};for(const d of t){let t=getEventProducers$1(e,d);if(!t){t=new Set;A.get(e).set(d,t)}t.add(r)}return{async next(){return c?0===c.length?n?(c=void 0,this.next()):(await new Promise((e=>{flush=e})),this.next()):{done:!1,value:await c.shift()}:{done:!0}},async return(n){c=void 0;for(const c of t){const t=getEventProducers$1(e,c);if(t&&(t.delete(r),0===t.size)){A.get(e).delete(c)}}return flush(),arguments.length>0?{done:!0,value:await n}:{done:!0}},[Symbol.asyncIterator](){return this}}}function defaultMethodNamesOrAssert$1(e){if(void 0===e)return pe;if(!Array.isArray(e))throw new TypeError("`methodNames` must be an array of strings");for(const t of e)if(!pe.includes(t)){if("string"!=typeof t)throw new TypeError("`methodNames` element must be a string");throw new Error(`${t} is not Emittery method`)}return e}const isMetaEvent$1=e=>e===se||e===oe;function emitMetaEvent$1(e,t,n){if(isMetaEvent$1(t))try{re=!0,e.emit(t,n)}finally{re=!1}}let Ze=class Emittery2{static mixin(e,t){return t=defaultMethodNamesOrAssert$1(t),n=>{if("function"!=typeof n)throw new TypeError("`target` must be function");for(const e of t)if(void 0!==n.prototype[e])throw new Error(`The property \`${e}\` already exists on \`target\``);Object.defineProperty(n.prototype,e,{enumerable:!1,get:function getEmitteryProperty(){return Object.defineProperty(this,e,{enumerable:!1,value:new Emittery2}),this[e]}});const emitteryMethodCaller=t=>function(...n){return this[e][t](...n)};for(const e of t)Object.defineProperty(n.prototype,e,{enumerable:!1,value:emitteryMethodCaller(e)});return n}}static get isDebugEnabled(){if("object"!=typeof globalThis.process?.env)return ae;const{env:e}=globalThis.process??{env:{}};return"emittery"===e.DEBUG||"*"===e.DEBUG||ae}static set isDebugEnabled(e){ae=e}constructor(e={}){E.set(this,new Set),O.set(this,new Map),A.set(this,new Map),A.get(this).set(ee,new Set),this.debug=e.debug??{},void 0===this.debug.enabled&&(this.debug.enabled=!1),this.debug.logger||(this.debug.logger=(e,t,n,c)=>{try{c=JSON.stringify(c)}catch{c=`Object with the following keys failed to stringify: ${Object.keys(c).join(",")}`}"symbol"!=typeof n&&"number"!=typeof n||(n=n.toString());const r=new Date,d=`${r.getHours()}:${r.getMinutes()}:${r.getSeconds()}.${r.getMilliseconds()}`;console.log(`[${d}][emittery:${e}][${t}] Event Name: ${n}\n\tdata: ${c}`)})}logIfDebugEnabled(e,t,n){(Emittery2.isDebugEnabled||this.debug.enabled)&&this.debug.logger(e,this.debug.name,t,n)}on(e,t){assertListener$1(t),e=Array.isArray(e)?e:[e];for(const n of e){assertEventName$1(n);let e=getListeners$1(this,n);if(!e){e=new Set;O.get(this).set(n,e)}e.add(t),this.logIfDebugEnabled("subscribe",n,void 0),isMetaEvent$1(n)||emitMetaEvent$1(this,se,{eventName:n,listener:t})}return this.off.bind(this,e,t)}off(e,t){assertListener$1(t),e=Array.isArray(e)?e:[e];for(const n of e){assertEventName$1(n);const e=getListeners$1(this,n);if(e&&(e.delete(t),0===e.size)){O.get(this).delete(n)}this.logIfDebugEnabled("unsubscribe",n,void 0),isMetaEvent$1(n)||emitMetaEvent$1(this,oe,{eventName:n,listener:t})}}once(e){let t;const n=new Promise((n=>{t=this.on(e,(e=>{t(),n(e)}))}));return n.off=t,n}events(e){e=Array.isArray(e)?e:[e];for(const t of e)assertEventName$1(t);return iterator$1(this,e)}async emit(e,t){if(assertEventName$1(e),isMetaEvent$1(e)&&!re)throw new TypeError("`eventName` cannot be meta event `listenerAdded` or `listenerRemoved`");this.logIfDebugEnabled("emit",e,t),function enqueueProducers$1(e,t,n){const c=A.get(e);if(c.has(t))for(const r of c.get(t))r.enqueue(n);if(c.has(ee)){const e=Promise.all([t,n]);for(const t of c.get(ee))t.enqueue(e)}}(this,e,t);const n=getListeners$1(this,e)??new Set,c=E.get(this),r=[...n],d=isMetaEvent$1(e)?[]:[...c];await te,await Promise.all([...r.map((async e=>{if(n.has(e))return e(t)})),...d.map((async n=>{if(c.has(n))return n(e,t)}))])}async emitSerial(e,t){if(assertEventName$1(e),isMetaEvent$1(e)&&!re)throw new TypeError("`eventName` cannot be meta event `listenerAdded` or `listenerRemoved`");this.logIfDebugEnabled("emitSerial",e,t);const n=getListeners$1(this,e)??new Set,c=E.get(this),r=[...n],d=[...c];await te;for(const Z of r)n.has(Z)&&await Z(t);for(const Z of d)c.has(Z)&&await Z(e,t)}onAny(e){return assertListener$1(e),this.logIfDebugEnabled("subscribeAny",void 0,void 0),E.get(this).add(e),emitMetaEvent$1(this,se,{listener:e}),this.offAny.bind(this,e)}anyEvent(){return iterator$1(this)}offAny(e){assertListener$1(e),this.logIfDebugEnabled("unsubscribeAny",void 0,void 0),emitMetaEvent$1(this,oe,{listener:e}),E.get(this).delete(e)}clearListeners(e){e=Array.isArray(e)?e:[e];for(const t of e)if(this.logIfDebugEnabled("clear",t,void 0),"string"==typeof t||"symbol"==typeof t||"number"==typeof t){const e=getListeners$1(this,t);e&&e.clear();const n=getEventProducers$1(this,t);if(n){for(const e of n)e.finish();n.clear()}}else{E.get(this).clear();for(const[e,t]of O.get(this).entries())t.clear(),O.get(this).delete(e);for(const[e,t]of A.get(this).entries()){for(const e of t)e.finish();t.clear(),A.get(this).delete(e)}}}listenerCount(e){e=Array.isArray(e)?e:[e];let t=0;for(const n of e)if("string"!=typeof n){void 0!==n&&assertEventName$1(n),t+=E.get(this).size;for(const e of O.get(this).values())t+=e.size;for(const e of A.get(this).values())t+=e.size}else t+=E.get(this).size+(getListeners$1(this,n)?.size??0)+(getEventProducers$1(this,n)?.size??0)+(getEventProducers$1(this)?.size??0);return t}bindMethods(e,t){if("object"!=typeof e||null===e)throw new TypeError("`target` must be an object");t=defaultMethodNamesOrAssert$1(t);for(const n of t){if(void 0!==e[n])throw new Error(`The property \`${n}\` already exists on \`target\``);Object.defineProperty(e,n,{enumerable:!1,value:this[n].bind(this)})}}};const pe=Object.getOwnPropertyNames(Ze.prototype).filter((e=>"constructor"!==e));Object.defineProperty(Ze,"listenerAdded",{value:se,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(Ze,"listenerRemoved",{value:oe,writable:!1,enumerable:!0,configurable:!1});class Average{constructor(e){this.size=e,this.values=[],this.sum=0}push(e){for(this.values.push(e),this.sum+=e;this.size<this.values.length;)this.sum-=this.values.shift()??0}value(){return this.sum/Math.max(1,this.values.length)}}class NoiseSuppressionTransformer extends Ze{constructor(){super(),this.isEnabled=!0,this.internalResampleSupported=!1,this.latency=new Average(100),this.transform=this.transformAudioData.bind(this)}async init(e={}){console.log("Noise suppression transformer initialization"),this.transform=e.debug?this.transformDebug.bind(this):this.transformAudioData.bind(this);const t=e.assetsDirBaseUrl??"https://d3opqjmqzxf057.cloudfront.net/noise-suppression/1.0.0-beta.4",locateFile=e=>`${t}/${e}`;let n,c=1;await this.isMonoThread(e)?this.wasmInstance=await createWasmMonoInstance({locateFile:locateFile,mainScriptUrlOrBlob:locateFile("main-bin-mono.js")}):(this.wasmInstance=await createWasmMultiInstance({locateFile:locateFile,mainScriptUrlOrBlob:locateFile("main-bin-multi.js")}),c=3),this.wasmTransformer=new this.wasmInstance.DtlnTransformer,await Promise.all([this.loadModel(`${t}/model_1.tflite`,1),this.loadModel(`${t}/model_2.tflite`,2)]);try{n=this.wasmTransformer?.init(c)}catch(r){if("number"==typeof r){let e="";for(let t=0;t<500;++t)e+=String.fromCharCode(this.wasmInstance.HEAP8[r+t]);console.error(e)}else console.error(r)}if(0!==n){const e=`Fail to init wasm transformer, error code = ${n}`;throw console.error(e),e}if(this.internalResampleSupported=this.wasmTransformer?.getInternalResampleSupported(),!this.internalResampleSupported){const e="Internal resampling not supported";throw console.error(e),e}console.log("Noise suppression transformer ready")}setAudioOptions(e,t,n,c,r){this.wasmTransformer?.setAudioOptions(e,t,n,c,r)}enable(){this.isEnabled=!0}disable(){this.isEnabled=!1}getLatency(){return this.latency.value()}getWasmLatencyNs(){return this.wasmTransformer?.getLatencyNs()??0}async transformDebug(e,t){try{const n=performance.now();await this.transformAudioData(e,t),this.latency.push(performance.now()-n)}catch(n){console.error(n)}}async transformAudioData(e,t){if(this.wasmTransformer||this.emit("warning","transformer not initialized"),this.isEnabled&&this.wasmTransformer)try{const t=this.getAudioDataAsFloat32(e),c=this.convertTypedArray(t,Int16Array,32767);this.wasmTransformer.getInputFrame(e.numberOfFrames).set(c);let r=0;try{r=this.wasmTransformer.runAlgorithm(e.numberOfFrames,e.sampleRate,e.numberOfChannels)}catch(n){if("number"==typeof n){let e="";for(let t=0;t<500;++t)e+=String.fromCharCode(this.wasmInstance.HEAP8[n+t]);console.error(e)}else console.error(n)}if(r>0){const t=this.wasmTransformer.getOutputFrame().slice(0,r),n=this.convertTypedArray(t,Float32Array,1/32767),{timestamp:c,sampleRate:d,numberOfChannels:Z}=e;e=new AudioData({data:n,format:"f32-planar",numberOfChannels:Z,numberOfFrames:n.length,sampleRate:d,timestamp:c})}}catch(n){console.error(n)}t.enqueue(e)}async loadModel(e,t){if(!this.wasmTransformer)return;const n=await fetch(e),c=await n.arrayBuffer(),r=c.byteLength,d=`getModel${t}`,Z=this.wasmTransformer[d](r);if(Z){const e=new Uint8Array(c);Z.set(e)}}getAudioDataAsFloat32(e){return this.audioDataToTypedArray(e,Float32Array,"f32-planar",1)}audioDataToTypedArray(e,t,n,c=e.numberOfChannels){const r=new t(e.numberOfFrames*c);for(let d=0;d<c;++d){const t=e.numberOfFrames*d,c=r.subarray(t,t+e.numberOfFrames);e.copyTo(c,{planeIndex:d,format:n})}return r}convertTypedArray(e,t,n){const c=e.length,r=new t(c);for(let d=0;d<c;++d)r[d]=e[d]*n;return r}isMonoThread(e){if(e.disableWasmMultiThread)return!0;try{if(void 0===new SharedArrayBuffer(1024))throw new Error("not supported")}catch(t){return this.emit("warning","\nMultithread is not available, noise-suppresion is now running on a single thread.\nThis is impacting the performance and increase the latency.\n\nTo enable multithread, you need to serve the application via https with these http headers :\n   - Cross-Origin-Opener-Policy: same-origin\n   - Cross-Origin-Embedder-Policy: require-corp.\nMore info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer#security_requirements\n\nYou can disable this warning by enabling disableWasmMultiThread within the noiseSuppression options.\n"),!0}return!1}}function createGlobalThisVariable(e,t){globalThis.vonage||(globalThis.vonage={}),globalThis.vonage.workerizer||(globalThis.vonage.workerizer={});let n=globalThis.vonage.workerizer;return n[e]||(n[e]=t),n[e]}const Ge=createGlobalThisVariable("globals",{});var Xe=(e=>(e.INIT="INIT",e.FORWARD="FORWARD",e.TERMINATE="TERMINATE",e.GLOBALS_SYNC="GLOBALS_SYNC",e.EVENT="EVENT",e))(Xe||{});function isTransferable(e){return[ImageBitmap,ReadableStream,WritableStream].some((t=>e instanceof t))}let We=0;function postCommand$1(e,t,n,c,r){const d=We++;e.postMessage({id:d,type:t,functionName:n,args:c},c.filter((e=>isTransferable(e))));return new Promise((e=>{null==r||r.set(d,e)}))}function postCommand(e,t){const{id:n,type:c}=e,r=Array.isArray(t)?t:[t];postMessage({id:n,type:c,result:t},r.filter((e=>isTransferable(e))))}const Ve=createGlobalThisVariable("workerized",{});function isWorker(){return"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope}function copy(e,t){if(Array.isArray(t))t.splice(0,t.length);else if("object"==typeof t)for(const n in t)delete t[n];for(const n in e)Array.isArray(e[n])?(t[n]=[],copy(e[n],t[n])):"object"==typeof e[n]?(t[n]={},copy(e[n],t[n])):t[n]=e[n]}async function createWorker(e,t,n,c){const r=new t;r.addEventListener("message",(async({data:e})=>{var t,r,d,Z,h,u,y;switch(e.type){case Xe.GLOBALS_SYNC:e.id?(null==(r=n.get(null!=(t=e.id)?t:-1))||r(e.result),n.delete(null!=(d=e.id)?d:-1)):(copy(null!=(Z=e.result)?Z:{},Ge),await async function globalsSync(){if(isWorker())postCommand({type:Xe.GLOBALS_SYNC},Ge);else{const e=[];for(const t in Ve){const{worker:n,resolvers:c}=Ve[t].workerContext;n&&e.push(postCommand$1(n,Xe.GLOBALS_SYNC,"",[Ge],c))}await Promise.all(e)}}());break;case Xe.EVENT:const{result:p}=e,G=p;if(null==(null==G?void 0:G.name))throw"Missing event name";c(G.name,G.data);break;default:null==(u=n.get(null!=(h=e.id)?h:-1))||u(e.result),n.delete(null!=(y=e.id)?y:-1)}}));if(!(await postCommand$1(r,Xe.INIT,"",[e.workerId,Ge],n)))throw"Failed to instantiate workerized class";return r}const Ie=new WeakMap,Ye=new WeakMap,Re=new WeakMap,fe=Symbol("anyProducer"),Je=Promise.resolve(),Ke=Symbol("listenerAdded"),He=Symbol("listenerRemoved");let ve=!1,Ne=!1;function assertEventName(e){if("string"!=typeof e&&"symbol"!=typeof e&&"number"!=typeof e)throw new TypeError("`eventName` must be a string, symbol, or number")}function assertListener(e){if("function"!=typeof e)throw new TypeError("listener must be a function")}function getListeners(e,t){const n=Ye.get(e);if(n.has(t))return n.get(t)}function getEventProducers(e,t){const n="string"==typeof t||"symbol"==typeof t||"number"==typeof t?t:fe,c=Re.get(e);if(c.has(n))return c.get(n)}function iterator(e,t){t=Array.isArray(t)?t:[t];let n=!1,flush=()=>{},c=[];const r={enqueue(e){c.push(e),flush()},finish(){n=!0,flush()}};for(const d of t){let t=getEventProducers(e,d);if(!t){t=new Set;Re.get(e).set(d,t)}t.add(r)}return{async next(){return c?0===c.length?n?(c=void 0,this.next()):(await new Promise((e=>{flush=e})),this.next()):{done:!1,value:await c.shift()}:{done:!0}},async return(n){c=void 0;for(const c of t){const t=getEventProducers(e,c);if(t&&(t.delete(r),0===t.size)){Re.get(e).delete(c)}}return flush(),arguments.length>0?{done:!0,value:await n}:{done:!0}},[Symbol.asyncIterator](){return this}}}function defaultMethodNamesOrAssert(e){if(void 0===e)return ke;if(!Array.isArray(e))throw new TypeError("`methodNames` must be an array of strings");for(const t of e)if(!ke.includes(t)){if("string"!=typeof t)throw new TypeError("`methodNames` element must be a string");throw new Error(`${t} is not Emittery method`)}return e}const isMetaEvent=e=>e===Ke||e===He;function emitMetaEvent(e,t,n){if(isMetaEvent(t))try{ve=!0,e.emit(t,n)}finally{ve=!1}}class Emittery{static mixin(e,t){return t=defaultMethodNamesOrAssert(t),n=>{if("function"!=typeof n)throw new TypeError("`target` must be function");for(const e of t)if(void 0!==n.prototype[e])throw new Error(`The property \`${e}\` already exists on \`target\``);Object.defineProperty(n.prototype,e,{enumerable:!1,get:function getEmitteryProperty(){return Object.defineProperty(this,e,{enumerable:!1,value:new Emittery}),this[e]}});const emitteryMethodCaller=t=>function(...n){return this[e][t](...n)};for(const e of t)Object.defineProperty(n.prototype,e,{enumerable:!1,value:emitteryMethodCaller(e)});return n}}static get isDebugEnabled(){var e,t;if("object"!=typeof(null==(e=globalThis.process)?void 0:e.env))return Ne;const{env:n}=null!=(t=globalThis.process)?t:{env:{}};return"emittery"===n.DEBUG||"*"===n.DEBUG||Ne}static set isDebugEnabled(e){Ne=e}constructor(e={}){var t;Ie.set(this,new Set),Ye.set(this,new Map),Re.set(this,new Map),Re.get(this).set(fe,new Set),this.debug=null!=(t=e.debug)?t:{},void 0===this.debug.enabled&&(this.debug.enabled=!1),this.debug.logger||(this.debug.logger=(e,t,n,c)=>{try{c=JSON.stringify(c)}catch{c=`Object with the following keys failed to stringify: ${Object.keys(c).join(",")}`}"symbol"!=typeof n&&"number"!=typeof n||(n=n.toString());const r=new Date,d=`${r.getHours()}:${r.getMinutes()}:${r.getSeconds()}.${r.getMilliseconds()}`;console.log(`[${d}][emittery:${e}][${t}] Event Name: ${n}\n\tdata: ${c}`)})}logIfDebugEnabled(e,t,n){(Emittery.isDebugEnabled||this.debug.enabled)&&this.debug.logger(e,this.debug.name,t,n)}on(e,t){assertListener(t),e=Array.isArray(e)?e:[e];for(const n of e){assertEventName(n);let e=getListeners(this,n);if(!e){e=new Set;Ye.get(this).set(n,e)}e.add(t),this.logIfDebugEnabled("subscribe",n,void 0),isMetaEvent(n)||emitMetaEvent(this,Ke,{eventName:n,listener:t})}return this.off.bind(this,e,t)}off(e,t){assertListener(t),e=Array.isArray(e)?e:[e];for(const n of e){assertEventName(n);const e=getListeners(this,n);if(e&&(e.delete(t),0===e.size)){Ye.get(this).delete(n)}this.logIfDebugEnabled("unsubscribe",n,void 0),isMetaEvent(n)||emitMetaEvent(this,He,{eventName:n,listener:t})}}once(e){let t;const n=new Promise((n=>{t=this.on(e,(e=>{t(),n(e)}))}));return n.off=t,n}events(e){e=Array.isArray(e)?e:[e];for(const t of e)assertEventName(t);return iterator(this,e)}async emit(e,t){var n;if(assertEventName(e),isMetaEvent(e)&&!ve)throw new TypeError("`eventName` cannot be meta event `listenerAdded` or `listenerRemoved`");this.logIfDebugEnabled("emit",e,t),function enqueueProducers(e,t,n){const c=Re.get(e);if(c.has(t))for(const r of c.get(t))r.enqueue(n);if(c.has(fe)){const e=Promise.all([t,n]);for(const t of c.get(fe))t.enqueue(e)}}(this,e,t);const c=null!=(n=getListeners(this,e))?n:new Set,r=Ie.get(this),d=[...c],Z=isMetaEvent(e)?[]:[...r];await Je,await Promise.all([...d.map((async e=>{if(c.has(e))return e(t)})),...Z.map((async n=>{if(r.has(n))return n(e,t)}))])}async emitSerial(e,t){var n;if(assertEventName(e),isMetaEvent(e)&&!ve)throw new TypeError("`eventName` cannot be meta event `listenerAdded` or `listenerRemoved`");this.logIfDebugEnabled("emitSerial",e,t);const c=null!=(n=getListeners(this,e))?n:new Set,r=Ie.get(this),d=[...c],Z=[...r];await Je;for(const h of d)c.has(h)&&await h(t);for(const h of Z)r.has(h)&&await h(e,t)}onAny(e){return assertListener(e),this.logIfDebugEnabled("subscribeAny",void 0,void 0),Ie.get(this).add(e),emitMetaEvent(this,Ke,{listener:e}),this.offAny.bind(this,e)}anyEvent(){return iterator(this)}offAny(e){assertListener(e),this.logIfDebugEnabled("unsubscribeAny",void 0,void 0),emitMetaEvent(this,He,{listener:e}),Ie.get(this).delete(e)}clearListeners(e){e=Array.isArray(e)?e:[e];for(const t of e)if(this.logIfDebugEnabled("clear",t,void 0),"string"==typeof t||"symbol"==typeof t||"number"==typeof t){const e=getListeners(this,t);e&&e.clear();const n=getEventProducers(this,t);if(n){for(const e of n)e.finish();n.clear()}}else{Ie.get(this).clear();for(const[e,t]of Ye.get(this).entries())t.clear(),Ye.get(this).delete(e);for(const[e,t]of Re.get(this).entries()){for(const e of t)e.finish();t.clear(),Re.get(this).delete(e)}}}listenerCount(e){var t,n,c,r,d,Z;e=Array.isArray(e)?e:[e];let h=0;for(const u of e)if("string"!=typeof u){void 0!==u&&assertEventName(u),h+=Ie.get(this).size;for(const e of Ye.get(this).values())h+=e.size;for(const e of Re.get(this).values())h+=e.size}else h+=Ie.get(this).size+(null!=(n=null==(t=getListeners(this,u))?void 0:t.size)?n:0)+(null!=(r=null==(c=getEventProducers(this,u))?void 0:c.size)?r:0)+(null!=(Z=null==(d=getEventProducers(this))?void 0:d.size)?Z:0);return h}bindMethods(e,t){if("object"!=typeof e||null===e)throw new TypeError("`target` must be an object");t=defaultMethodNamesOrAssert(t);for(const n of t){if(void 0!==e[n])throw new Error(`The property \`${n}\` already exists on \`target\``);Object.defineProperty(e,n,{enumerable:!1,value:this[n].bind(this)})}}}const ke=Object.getOwnPropertyNames(Emittery.prototype).filter((e=>"constructor"!==e));Object.defineProperty(Emittery,"listenerAdded",{value:Ke,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(Emittery,"listenerRemoved",{value:He,writable:!1,enumerable:!0,configurable:!1});let Le=0;async function workerize(e,t){const n=new Map;let c;const r=await createWorker(e,t,n,((e,t)=>{(null==c?void 0:c.emit)&&(null==c||c.emit(e,t))}));return c=await async function createWorkerized(e,t,n){const c=function isChildClassOfEmittery(e){return e.prototype.onAny&&e.prototype.emit}(e)?new Emittery:{},r=Le++;return Object.getOwnPropertyNames(e.prototype).forEach((e=>{c[e]=(...c)=>postCommand$1(t,Xe.FORWARD,e,c,n)})),c.terminate=async(...e)=>{const d=await postCommand$1(t,Xe.TERMINATE,"",e,n);return delete Ve[r],t.terminate(),c.workerContext.worker=void 0,d},c.workerContext={id:r,worker:t,resolvers:n},Ve[r]=c,c}(e,r,n),c}const Ce=createGlobalThisVariable("registeredWorkers",{});isWorker()&&function initWorker(){const e={};onmessage=async t=>{const n=t.data;switch(n.type){case Xe.INIT:!function handleCommandInit(e,t){if(!e.args)throw"Missing className while initializing worker";const[n,c]=e.args,r=Ce[n];if(!r)throw`unknown worker class ${n}`;t.instance=new r(e.args.slice(1)),copy(c,Ge),function isInstanceOfEmittery(e){return e.onAny&&e.emit}(t.instance)&&t.instance.onAny(((e,t)=>{postCommand({type:Xe.EVENT},{name:e,data:t})})),postCommand(e,void 0!==typeof t.instance)}(n,e);break;case Xe.FORWARD:!async function handleCommandForward(e,t){const{functionName:n,args:c}=e;if(!t.instance)throw"instance not initialized";if(!n)throw"missing function name to call";if(!t.instance[n])throw`undefined function [${n}] in class ${t.instance.constructor.workerId}`;postCommand(e,await t.instance[n](...null!=c?c:[]))}(n,e);break;case Xe.TERMINATE:!async function handleCommandTerminate(e,t){const{args:n}=e;if(!t.instance)throw"instance not initialized";let c;t.instance.terminate&&(c=await t.instance.terminate(...null!=n?n:[])),postCommand(e,c)}(n,e);break;case Xe.GLOBALS_SYNC:!function handleCommandGlobalsSync(e){if(!e.args)throw"Missing globals while syncing";copy(e.args[0],Ge),postCommand(e,{})}(n)}}}();const ze=class _ProcessorWorker extends Ze{constructor(){super(...arguments),this.processor=new Oe}async init(e={}){this.transformer=new NoiseSuppressionTransformer,this.processor.onAny(((e,t)=>this.emit(e,t))),this.transformer.onAny(((e,t)=>this.emit(e,t))),await this.transformer.init(e),await this.processor.setTransformers([this.transformer])}transform(e,t){this.processor.transform(e,t)}setAudioOptions(e,t,n,c,r){this.transformer?.setAudioOptions(e,t,n,c,r)}enable(){this.transformer?.enable()}disable(){this.transformer?.disable()}async terminate(){await this.processor.destroy()}getLatency(){return this.transformer?.getLatency()??0}getWasmLatencyNs(){return this.transformer?.getWasmLatencyNs()??0}};!function registerWorker(e,t){t.workerId=e,isWorker()&&(Ce[t.workerId]=t)}("ProcessorWorker",ze);let Ue=ze;const we="IWZ1bmN0aW9uKCl7InVzZSBzdHJpY3QiO3ZhciBlPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSxhPSh0LHIsbik9PigoKHQscixuKT0+e3IgaW4gdD9lKHQscix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6bn0pOnRbcl09bn0pKHQsInN5bWJvbCIhPXR5cGVvZiByP3IrIiI6cixuKSxuKTtjbGFzcyBse31hKGwsInVwZGF0ZXMiLHt0cmFuc2Zvcm1lcl9uZXc6Ik5ldyB0cmFuc2Zvcm1lciIsdHJhbnNmb3JtZXJfbnVsbDoiTnVsbCB0cmFuc2Zvcm1lciJ9KSxhKGwsImVycm9ycyIse3RyYW5zZm9ybWVyX25vbmU6Ik5vIHRyYW5zZm9ybWVycyBwcm92aWRlZCIsdHJhbnNmb3JtZXJfc3RhcnQ6IkNhbm5vdCBzdGFydCB0cmFuc2Zvcm1lciIsdHJhbnNmb3JtZXJfdHJhbnNmb3JtOiJDYW5ub3QgdHJhbnNmb3JtIGZyYW1lIix0cmFuc2Zvcm1lcl9mbHVzaDoiQ2Fubm90IGZsdXNoIHRyYW5zZm9ybWVyIixyZWFkYWJsZV9udWxsOiJSZWFkYWJsZSBpcyBudWxsIix3cml0YWJsZV9udWxsOiJXcml0YWJsZSBpcyBudWxsIn0pO2NvbnN0IHQ9bmV3IFdlYWtNYXAscj1uZXcgV2Vha01hcCxuPW5ldyBXZWFrTWFwLGM9U3ltYm9sKCJhbnlQcm9kdWNlciIpLGY9UHJvbWlzZS5yZXNvbHZlKCksaD1TeW1ib2woImxpc3RlbmVyQWRkZWQiKSx1PVN5bWJvbCgibGlzdGVuZXJSZW1vdmVkIik7bGV0IGQ9ITE7ZnVuY3Rpb24gZyhlKXtpZigic3RyaW5nIiE9dHlwZW9mIGUmJiJzeW1ib2wiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJldmVudE5hbWUgbXVzdCBiZSBhIHN0cmluZyBvciBhIHN5bWJvbCIpfWZ1bmN0aW9uIFQoZSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcigibGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uIil9ZnVuY3Rpb24gXyhlLHQpe2NvbnN0IG49ci5nZXQoZSk7cmV0dXJuIG4uaGFzKHQpfHxuLnNldCh0LG5ldyBTZXQpLG4uZ2V0KHQpfWZ1bmN0aW9uIGIoZSx0KXtjb25zdCByPSJzdHJpbmciPT10eXBlb2YgdHx8InN5bWJvbCI9PXR5cGVvZiB0P3Q6YyxmPW4uZ2V0KGUpO3JldHVybiBmLmhhcyhyKXx8Zi5zZXQocixuZXcgU2V0KSxmLmdldChyKX1mdW5jdGlvbiAkKGUsdCl7dD1BcnJheS5pc0FycmF5KHQpP3Q6W3RdO2xldCByPSExLHM9KCk9Pnt9LG49W107Y29uc3QgYz17ZW5xdWV1ZShlKXtuLnB1c2goZSkscygpfSxmaW5pc2goKXtyPSEwLHMoKX19O2Zvcihjb25zdCBmIG9mIHQpYihlLGYpLmFkZChjKTtyZXR1cm57YXN5bmMgbmV4dCgpe3JldHVybiBuPzA9PT1uLmxlbmd0aD9yPyhuPXZvaWQgMCx0aGlzLm5leHQoKSk6KGF3YWl0IG5ldyBQcm9taXNlKChlPT57cz1lfSkpLHRoaXMubmV4dCgpKTp7ZG9uZTohMSx2YWx1ZTphd2FpdCBuLnNoaWZ0KCl9Ontkb25lOiEwfX0sYXN5bmMgcmV0dXJuKHIpe249dm9pZCAwO2Zvcihjb25zdCBuIG9mIHQpYihlLG4pLmRlbGV0ZShjKTtyZXR1cm4gcygpLGFyZ3VtZW50cy5sZW5ndGg+MD97ZG9uZTohMCx2YWx1ZTphd2FpdCByfTp7ZG9uZTohMH19LFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKXtyZXR1cm4gdGhpc319fWZ1bmN0aW9uIEgoZSl7aWYodm9pZCAwPT09ZSlyZXR1cm4gcDtpZighQXJyYXkuaXNBcnJheShlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJgbWV0aG9kTmFtZXNgIG11c3QgYmUgYW4gYXJyYXkgb2Ygc3RyaW5ncyIpO2Zvcihjb25zdCB0IG9mIGUpaWYoIXAuaW5jbHVkZXModCkpdGhyb3cic3RyaW5nIiE9dHlwZW9mIHQ/bmV3IFR5cGVFcnJvcigiYG1ldGhvZE5hbWVzYCBlbGVtZW50IG11c3QgYmUgYSBzdHJpbmciKTpuZXcgRXJyb3IoYCR7dH0gaXMgbm90IEVtaXR0ZXJ5IG1ldGhvZGApO3JldHVybiBlfWNvbnN0IEk9ZT0+ZT09PWh8fGU9PT11O2NsYXNzIG17c3RhdGljIG1peGluKGUsdCl7cmV0dXJuIHQ9SCh0KSxyPT57aWYoImZ1bmN0aW9uIiE9dHlwZW9mIHIpdGhyb3cgbmV3IFR5cGVFcnJvcigiYHRhcmdldGAgbXVzdCBiZSBmdW5jdGlvbiIpO2Zvcihjb25zdCBlIG9mIHQpaWYodm9pZCAwIT09ci5wcm90b3R5cGVbZV0pdGhyb3cgbmV3IEVycm9yKGBUaGUgcHJvcGVydHkgXGAke2V9XGAgYWxyZWFkeSBleGlzdHMgb24gXGB0YXJnZXRcYGApO09iamVjdC5kZWZpbmVQcm9wZXJ0eShyLnByb3RvdHlwZSxlLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbiBvKCl7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLGUse2VudW1lcmFibGU6ITEsdmFsdWU6bmV3IG19KSx0aGlzW2VdfX0pO2NvbnN0IGk9dD0+ZnVuY3Rpb24oLi4ucil7cmV0dXJuIHRoaXNbZV1bdF0oLi4ucil9O2Zvcihjb25zdCBlIG9mIHQpT2JqZWN0LmRlZmluZVByb3BlcnR5KHIucHJvdG90eXBlLGUse2VudW1lcmFibGU6ITEsdmFsdWU6aShlKX0pO3JldHVybiByfX1zdGF0aWMgZ2V0IGlzRGVidWdFbmFibGVkKCl7aWYoIm9iamVjdCIhPXR5cGVvZiBwcm9jZXNzKXJldHVybiBkO2NvbnN0e2VudjplfT1wcm9jZXNzfHx7ZW52Ont9fTtyZXR1cm4iZW1pdHRlcnkiPT09ZS5ERUJVR3x8IioiPT09ZS5ERUJVR3x8ZH1zdGF0aWMgc2V0IGlzRGVidWdFbmFibGVkKGUpe2Q9ZX1jb25zdHJ1Y3RvcihlPXt9KXt0LnNldCh0aGlzLG5ldyBTZXQpLHIuc2V0KHRoaXMsbmV3IE1hcCksbi5zZXQodGhpcyxuZXcgTWFwKSx0aGlzLmRlYnVnPWUuZGVidWd8fHt9LHZvaWQgMD09PXRoaXMuZGVidWcuZW5hYmxlZCYmKHRoaXMuZGVidWcuZW5hYmxlZD0hMSksdGhpcy5kZWJ1Zy5sb2dnZXJ8fCh0aGlzLmRlYnVnLmxvZ2dlcj0oZSx0LHIsbik9Pnt0cnl7bj1KU09OLnN0cmluZ2lmeShuKX1jYXRjaHtuPWBPYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIGtleXMgZmFpbGVkIHRvIHN0cmluZ2lmeTogJHtPYmplY3Qua2V5cyhuKS5qb2luKCIsIil9YH0ic3ltYm9sIj09dHlwZW9mIHImJihyPXIudG9TdHJpbmcoKSk7Y29uc3QgYz1uZXcgRGF0ZSxmPWAke2MuZ2V0SG91cnMoKX06JHtjLmdldE1pbnV0ZXMoKX06JHtjLmdldFNlY29uZHMoKX0uJHtjLmdldE1pbGxpc2Vjb25kcygpfWA7Y29uc29sZS5sb2coYFske2Z9XVtlbWl0dGVyeToke2V9XVske3R9XSBFdmVudCBOYW1lOiAke3J9XG5cdGRhdGE6ICR7bn1gKX0pfWxvZ0lmRGVidWdFbmFibGVkKGUsdCxyKXsobS5pc0RlYnVnRW5hYmxlZHx8dGhpcy5kZWJ1Zy5lbmFibGVkKSYmdGhpcy5kZWJ1Zy5sb2dnZXIoZSx0aGlzLmRlYnVnLm5hbWUsdCxyKX1vbihlLHQpe1QodCksZT1BcnJheS5pc0FycmF5KGUpP2U6W2VdO2Zvcihjb25zdCByIG9mIGUpZyhyKSxfKHRoaXMscikuYWRkKHQpLHRoaXMubG9nSWZEZWJ1Z0VuYWJsZWQoInN1YnNjcmliZSIscix2b2lkIDApLEkocil8fHRoaXMuZW1pdChoLHtldmVudE5hbWU6cixsaXN0ZW5lcjp0fSk7cmV0dXJuIHRoaXMub2ZmLmJpbmQodGhpcyxlLHQpfW9mZihlLHQpe1QodCksZT1BcnJheS5pc0FycmF5KGUpP2U6W2VdO2Zvcihjb25zdCByIG9mIGUpZyhyKSxfKHRoaXMscikuZGVsZXRlKHQpLHRoaXMubG9nSWZEZWJ1Z0VuYWJsZWQoInVuc3Vic2NyaWJlIixyLHZvaWQgMCksSShyKXx8dGhpcy5lbWl0KHUse2V2ZW50TmFtZTpyLGxpc3RlbmVyOnR9KX1vbmNlKGUpe3JldHVybiBuZXcgUHJvbWlzZSgodD0+e2NvbnN0IHI9dGhpcy5vbihlLChlPT57cigpLHQoZSl9KSl9KSl9ZXZlbnRzKGUpe2U9QXJyYXkuaXNBcnJheShlKT9lOltlXTtmb3IoY29uc3QgdCBvZiBlKWcodCk7cmV0dXJuICQodGhpcyxlKX1hc3luYyBlbWl0KGUscil7ZyhlKSx0aGlzLmxvZ0lmRGVidWdFbmFibGVkKCJlbWl0IixlLHIpLGZ1bmN0aW9uIHEoZSx0LHIpe2NvbnN0IGY9bi5nZXQoZSk7aWYoZi5oYXModCkpZm9yKGNvbnN0IG4gb2YgZi5nZXQodCkpbi5lbnF1ZXVlKHIpO2lmKGYuaGFzKGMpKXtjb25zdCBlPVByb21pc2UuYWxsKFt0LHJdKTtmb3IoY29uc3QgdCBvZiBmLmdldChjKSl0LmVucXVldWUoZSl9fSh0aGlzLGUscik7Y29uc3QgaD1fKHRoaXMsZSksdT10LmdldCh0aGlzKSxkPVsuLi5oXSxwPUkoZSk/W106Wy4uLnVdO2F3YWl0IGYsYXdhaXQgUHJvbWlzZS5hbGwoWy4uLmQubWFwKChhc3luYyBlPT57aWYoaC5oYXMoZSkpcmV0dXJuIGUocil9KSksLi4ucC5tYXAoKGFzeW5jIHQ9PntpZih1Lmhhcyh0KSlyZXR1cm4gdChlLHIpfSkpXSl9YXN5bmMgZW1pdFNlcmlhbChlLHIpe2coZSksdGhpcy5sb2dJZkRlYnVnRW5hYmxlZCgiZW1pdFNlcmlhbCIsZSxyKTtjb25zdCBuPV8odGhpcyxlKSxjPXQuZ2V0KHRoaXMpLGg9Wy4uLm5dLHU9Wy4uLmNdO2F3YWl0IGY7Zm9yKGNvbnN0IHQgb2YgaCluLmhhcyh0KSYmYXdhaXQgdChyKTtmb3IoY29uc3QgdCBvZiB1KWMuaGFzKHQpJiZhd2FpdCB0KGUscil9b25BbnkoZSl7cmV0dXJuIFQoZSksdGhpcy5sb2dJZkRlYnVnRW5hYmxlZCgic3Vic2NyaWJlQW55Iix2b2lkIDAsdm9pZCAwKSx0LmdldCh0aGlzKS5hZGQoZSksdGhpcy5lbWl0KGgse2xpc3RlbmVyOmV9KSx0aGlzLm9mZkFueS5iaW5kKHRoaXMsZSl9YW55RXZlbnQoKXtyZXR1cm4gJCh0aGlzKX1vZmZBbnkoZSl7VChlKSx0aGlzLmxvZ0lmRGVidWdFbmFibGVkKCJ1bnN1YnNjcmliZUFueSIsdm9pZCAwLHZvaWQgMCksdGhpcy5lbWl0KHUse2xpc3RlbmVyOmV9KSx0LmdldCh0aGlzKS5kZWxldGUoZSl9Y2xlYXJMaXN0ZW5lcnMoZSl7ZT1BcnJheS5pc0FycmF5KGUpP2U6W2VdO2Zvcihjb25zdCBjIG9mIGUpaWYodGhpcy5sb2dJZkRlYnVnRW5hYmxlZCgiY2xlYXIiLGMsdm9pZCAwKSwic3RyaW5nIj09dHlwZW9mIGN8fCJzeW1ib2wiPT10eXBlb2YgYyl7Xyh0aGlzLGMpLmNsZWFyKCk7Y29uc3QgZT1iKHRoaXMsYyk7Zm9yKGNvbnN0IHQgb2YgZSl0LmZpbmlzaCgpO2UuY2xlYXIoKX1lbHNle3QuZ2V0KHRoaXMpLmNsZWFyKCk7Zm9yKGNvbnN0IGUgb2Ygci5nZXQodGhpcykudmFsdWVzKCkpZS5jbGVhcigpO2Zvcihjb25zdCBlIG9mIG4uZ2V0KHRoaXMpLnZhbHVlcygpKXtmb3IoY29uc3QgdCBvZiBlKXQuZmluaXNoKCk7ZS5jbGVhcigpfX19bGlzdGVuZXJDb3VudChlKXtlPUFycmF5LmlzQXJyYXkoZSk/ZTpbZV07bGV0IGM9MDtmb3IoY29uc3QgZiBvZiBlKWlmKCJzdHJpbmciIT10eXBlb2YgZil7dHlwZW9mIGY8InUiJiZnKGYpLGMrPXQuZ2V0KHRoaXMpLnNpemU7Zm9yKGNvbnN0IGUgb2Ygci5nZXQodGhpcykudmFsdWVzKCkpYys9ZS5zaXplO2Zvcihjb25zdCBlIG9mIG4uZ2V0KHRoaXMpLnZhbHVlcygpKWMrPWUuc2l6ZX1lbHNlIGMrPXQuZ2V0KHRoaXMpLnNpemUrXyh0aGlzLGYpLnNpemUrYih0aGlzLGYpLnNpemUrYih0aGlzKS5zaXplO3JldHVybiBjfWJpbmRNZXRob2RzKGUsdCl7aWYoIm9iamVjdCIhPXR5cGVvZiBlfHxudWxsPT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJgdGFyZ2V0YCBtdXN0IGJlIGFuIG9iamVjdCIpO3Q9SCh0KTtmb3IoY29uc3QgciBvZiB0KXtpZih2b2lkIDAhPT1lW3JdKXRocm93IG5ldyBFcnJvcihgVGhlIHByb3BlcnR5IFxgJHtyfVxgIGFscmVhZHkgZXhpc3RzIG9uIFxgdGFyZ2V0XGBgKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLHtlbnVtZXJhYmxlOiExLHZhbHVlOnRoaXNbcl0uYmluZCh0aGlzKX0pfX19Y29uc3QgcD1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhtLnByb3RvdHlwZSkuZmlsdGVyKChlPT4iY29uc3RydWN0b3IiIT09ZSkpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShtLCJsaXN0ZW5lckFkZGVkIix7dmFsdWU6aCx3cml0YWJsZTohMSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtLCJsaXN0ZW5lclJlbW92ZWQiLHt2YWx1ZTp1LHdyaXRhYmxlOiExLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiExfSk7dmFyIHk9bTtmdW5jdGlvbiB2KGUpe3JldHVybiBmdW5jdGlvbiBYKGUpe2lmKGZ1bmN0aW9uIEooZSl7cmV0dXJuIm9iamVjdCI9PXR5cGVvZiBlJiZudWxsIT09ZSYmIm1lc3NhZ2UiaW4gZSYmInN0cmluZyI9PXR5cGVvZiBlLm1lc3NhZ2V9KGUpKXJldHVybiBlO3RyeXtyZXR1cm4gbmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KGUpKX1jYXRjaHtyZXR1cm4gbmV3IEVycm9yKFN0cmluZyhlKSl9fShlKS5tZXNzYWdlfXZhciBFPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSxOPShlLHQscik9PigoKGUsdCxyKT0+e3QgaW4gZT9FKGUsdCx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6cn0pOmVbdF09cn0pKGUsInN5bWJvbCIhPXR5cGVvZiB0P3QrIiI6dCxyKSxyKTtsZXQgQTtjb25zdCBTPW5ldyBVaW50OEFycmF5KDE2KTtmdW5jdGlvbiBpZSgpe2lmKCFBJiYoQT10eXBlb2YgY3J5cHRvPCJ1IiYmY3J5cHRvLmdldFJhbmRvbVZhbHVlcyYmY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0byksIUEpKXRocm93IG5ldyBFcnJvcigiY3J5cHRvLmdldFJhbmRvbVZhbHVlcygpIG5vdCBzdXBwb3J0ZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQjZ2V0cmFuZG9tdmFsdWVzLW5vdC1zdXBwb3J0ZWQiKTtyZXR1cm4gQShTKX1jb25zdCBPPVtdO2ZvcihsZXQgQ2U9MDtDZTwyNTY7KytDZSlPLnB1c2goKENlKzI1NikudG9TdHJpbmcoMTYpLnNsaWNlKDEpKTtjb25zdCBNPXtyYW5kb21VVUlEOnR5cGVvZiBjcnlwdG88InUiJiZjcnlwdG8ucmFuZG9tVVVJRCYmY3J5cHRvLnJhbmRvbVVVSUQuYmluZChjcnlwdG8pfTtmdW5jdGlvbiBjZShlLHQscil7aWYoTS5yYW5kb21VVUlEJiYhdCYmIWUpcmV0dXJuIE0ucmFuZG9tVVVJRCgpO2NvbnN0IG49KGU9ZXx8e30pLnJhbmRvbXx8KGUucm5nfHxpZSkoKTtpZihuWzZdPTE1Jm5bNl18NjQsbls4XT02MyZuWzhdfDEyOCx0KXtyPXJ8fDA7Zm9yKGxldCBlPTA7ZTwxNjsrK2UpdFtyK2VdPW5bZV07cmV0dXJuIHR9cmV0dXJuIGZ1bmN0aW9uIG5lKGUsdD0wKXtyZXR1cm4oT1tlW3QrMF1dK09bZVt0KzFdXStPW2VbdCsyXV0rT1tlW3QrM11dKyItIitPW2VbdCs0XV0rT1tlW3QrNV1dKyItIitPW2VbdCs2XV0rT1tlW3QrN11dKyItIitPW2VbdCs4XV0rT1tlW3QrOV1dKyItIitPW2VbdCsxMF1dK09bZVt0KzExXV0rT1tlW3QrMTJdXStPW2VbdCsxM11dK09bZVt0KzE0XV0rT1tlW3QrMTVdXSkudG9Mb3dlckNhc2UoKX0obil9ZnVuY3Rpb24gVyhlLHQpe2dsb2JhbFRoaXMudm9uYWdlfHwoZ2xvYmFsVGhpcy52b25hZ2U9e30pLGdsb2JhbFRoaXMudm9uYWdlLndvcmtlcml6ZXJ8fChnbG9iYWxUaGlzLnZvbmFnZS53b3JrZXJpemVyPXt9KTtsZXQgcj1nbG9iYWxUaGlzLnZvbmFnZS53b3JrZXJpemVyO3JldHVybiByW2VdfHwocltlXT10KSxyW2VdfWNvbnN0IGs9VygiZ2xvYmFscyIse30pO3ZhciBSPShlPT4oZS5JTklUPSJJTklUIixlLkZPUldBUkQ9IkZPUldBUkQiLGUuVEVSTUlOQVRFPSJURVJNSU5BVEUiLGUuR0xPQkFMU19TWU5DPSJHTE9CQUxTX1NZTkMiLGUpKShSfHx7fSk7ZnVuY3Rpb24gaihlKXtyZXR1cm5bSW1hZ2VCaXRtYXAsUmVhZGFibGVTdHJlYW0sV3JpdGFibGVTdHJlYW1dLnNvbWUoKHQ9PmUgaW5zdGFuY2VvZiB0KSl9bGV0IHg9MDtmdW5jdGlvbiBsZShlLHQscixuLGMpe2NvbnN0IGY9eCsrO3JldHVybiBlLnBvc3RNZXNzYWdlKHtpZDpmLHR5cGU6dCxmdW5jdGlvbk5hbWU6cixhcmdzOm59LG4uZmlsdGVyKChlPT5qKGUpKSkpLG5ldyBQcm9taXNlKChlPT57bnVsbD09Y3x8Yy5zZXQoZixlKX0pKX1mdW5jdGlvbiB3KGUsdCl7Y29uc3R7aWQ6cix0eXBlOm59PWUsYz1BcnJheS5pc0FycmF5KHQpP3Q6W3RdO3Bvc3RNZXNzYWdlKHtpZDpyLHR5cGU6bixyZXN1bHQ6dH0sYy5maWx0ZXIoKGU9PmooZSkpKSl9Y29uc3QgTD1XKCJ3b3JrZXJpemVkIix7fSk7ZnVuY3Rpb24gQigpe3JldHVybiB0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGU8InUiJiZzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGV9ZnVuY3Rpb24gUChlLHQpe2lmKEFycmF5LmlzQXJyYXkodCkpdC5zcGxpY2UoMCx0Lmxlbmd0aCk7ZWxzZSBpZigib2JqZWN0Ij09dHlwZW9mIHQpZm9yKGNvbnN0IHIgaW4gdClkZWxldGUgdFtyXTtmb3IoY29uc3QgciBpbiBlKUFycmF5LmlzQXJyYXkoZVtyXSk/KHRbcl09W10sUChlW3JdLHRbcl0pKToib2JqZWN0Ij09dHlwZW9mIGVbcl0/KHRbcl09e30sUChlW3JdLHRbcl0pKTp0W3JdPWVbcl19Y29uc3Qgej1XKCJyZWdpc3RlcmVkV29ya2VycyIse30pO2Z1bmN0aW9uIHllKGUsdCl7cmV0dXJuIGtbZV18fChrW2VdPXQpLFsoKT0+a1tlXSxhc3luYyB0PT57a1tlXT10LGF3YWl0IGFzeW5jIGZ1bmN0aW9uIHVlKCl7aWYoQigpKXcoe3R5cGU6Ui5HTE9CQUxTX1NZTkN9LGspO2Vsc2V7Y29uc3QgZT1bXTtmb3IoY29uc3QgdCBpbiBMKXtjb25zdHt3b3JrZXI6cixyZXNvbHZlcnM6bn09TFt0XS53b3JrZXJDb250ZXh0O3ImJmUucHVzaChsZShyLFIuR0xPQkFMU19TWU5DLCIiLFtrXSxuKSl9YXdhaXQgUHJvbWlzZS5hbGwoZSl9fSgpfV19QigpJiZmdW5jdGlvbiBfZSgpe2NvbnN0IGU9e307b25tZXNzYWdlPWFzeW5jIHQ9Pntjb25zdCByPXQuZGF0YTtzd2l0Y2goci50eXBlKXtjYXNlIFIuSU5JVDohZnVuY3Rpb24gZGUoZSx0KXtpZighZS5hcmdzKXRocm93Ik1pc3NpbmcgY2xhc3NOYW1lIHdoaWxlIGluaXRpYWxpemluZyB3b3JrZXIiO2NvbnN0W3Isbl09ZS5hcmdzLGM9eltyXTtpZighYyl0aHJvd2B1bmtub3duIHdvcmtlciBjbGFzcyAke3J9YDt0Lmluc3RhbmNlPW5ldyBjKGUuYXJncy5zbGljZSgxKSksUChuLGspLHcoZSx2b2lkIDAhPT10eXBlb2YgdC5pbnN0YW5jZSl9KHIsZSk7YnJlYWs7Y2FzZSBSLkZPUldBUkQ6IWFzeW5jIGZ1bmN0aW9uIGhlKGUsdCl7Y29uc3R7ZnVuY3Rpb25OYW1lOnIsYXJnczpufT1lO2lmKCF0Lmluc3RhbmNlKXRocm93Imluc3RhbmNlIG5vdCBpbml0aWFsaXplZCI7aWYoIXIpdGhyb3cibWlzc2luZyBmdW5jdGlvbiBuYW1lIHRvIGNhbGwiO2lmKCF0Lmluc3RhbmNlW3JdKXRocm93YHVuZGVmaW5lZCBmdW5jdGlvbiBbJHtyfV0gaW4gY2xhc3MgJHt0Lmluc3RhbmNlLmNvbnN0cnVjdG9yLndvcmtlcklkfWA7dyhlLGF3YWl0IHQuaW5zdGFuY2Vbcl0oLi4ubnVsbCE9bj9uOltdKSl9KHIsZSk7YnJlYWs7Y2FzZSBSLlRFUk1JTkFURTohYXN5bmMgZnVuY3Rpb24gbWUoZSx0KXtjb25zdHthcmdzOnJ9PWU7aWYoIXQuaW5zdGFuY2UpdGhyb3ciaW5zdGFuY2Ugbm90IGluaXRpYWxpemVkIjtsZXQgbjt0Lmluc3RhbmNlLnRlcm1pbmF0ZSYmKG49YXdhaXQgdC5pbnN0YW5jZS50ZXJtaW5hdGUoLi4ubnVsbCE9cj9yOltdKSksdyhlLG4pfShyLGUpO2JyZWFrO2Nhc2UgUi5HTE9CQUxTX1NZTkM6IWZ1bmN0aW9uIGdlKGUpe2lmKCFlLmFyZ3MpdGhyb3ciTWlzc2luZyBnbG9iYWxzIHdoaWxlIHN5bmNpbmciO1AoZS5hcmdzWzBdLGspLHcoZSx7fSl9KHIpfX19KCk7Y29uc3RbRixVXT1mdW5jdGlvbiBiZShlLHQpe3JldHVybiB5ZShlLHQpfSgibWV0YWRhdGEiKTtmdW5jdGlvbiBDKCl7cmV0dXJuIEYoKX1jbGFzcyBEe2NvbnN0cnVjdG9yKGUpe04odGhpcywidXVpZCIsY2UoKSksdGhpcy5jb25maWc9ZX1hc3luYyBzZW5kKGUpe3ZhciB0LHIsbjtjb25zdHthcHBJZDpjLHNvdXJjZVR5cGU6Zn09bnVsbCE9KHQ9QygpKT90Ont9O2lmKCFjfHwhZilyZXR1cm4ibWV0YWRhdGEgbWlzc2luZyI7Y29uc3QgaD1uZXcgQWJvcnRDb250cm9sbGVyLHU9c2V0VGltZW91dCgoKCk9PmguYWJvcnQoKSksMWU0KTtyZXR1cm4gYXdhaXQobnVsbCE9KG49bnVsbD09KHI9dGhpcy5jb25maWcpP3ZvaWQgMDpyLmZldGNoKT9uOmZldGNoKSh0aGlzLmdldFVybCgpLHttZXRob2Q6IlBPU1QiLGhlYWRlcnM6dGhpcy5nZXRIZWFkZXJzKCksYm9keTpKU09OLnN0cmluZ2lmeSh0aGlzLmJ1aWxkUmVwb3J0KGUpKSxzaWduYWw6aC5zaWduYWx9KSxjbGVhclRpbWVvdXQodSksInN1Y2Nlc3MifWdldFVybCgpe3ZhciBlO2xldCB0PW51bGwhPShlPUMoKS5wcm94eVVybCk/ZToiaHR0cHM6Ly8iO3JldHVybiB0Kz0oIi8iPT09dC5hdCgtMSk/IiI6Ii8iKSsiaGxnLnRva2JveC5jb20vcHJvZC9sb2dnaW5nL3ZjcF93ZWJydGMiLHR9Z2V0SGVhZGVycygpe3JldHVybnsiQ29udGVudC1UeXBlIjoiYXBwbGljYXRpb24vanNvbiJ9fWJ1aWxkUmVwb3J0KGUpe2NvbnN0IHQ9QygpO3JldHVybntndWlkOnRoaXMudXVpZCwuLi5lLGFwcGxpY2F0aW9uSWQ6dC5hcHBJZCx0aW1lc3RhbXA6RGF0ZS5ub3coKSxwcm94eVVybDp0LnByb3h5VXJsLHNvdXJjZTp0LnNvdXJjZVR5cGV9fX1jb25zdCBHPSIyLjAuMyI7Y2xhc3MgU2V7Y29uc3RydWN0b3IoZSl7YSh0aGlzLCJmcmFtZVRyYW5zZm9ybWVkQ291bnQiLDApLGEodGhpcywiZnJhbWVGcm9tU291cmNlQ291bnQiLDApLGEodGhpcywic3RhcnRBdCIsMCksYSh0aGlzLCJyZXBvcnRlciIpLHRoaXMuY29uZmlnPWUsdGhpcy5yZXBvcnRlcj1uZXcgRChlKX1hc3luYyBvbkZyYW1lRnJvbVNvdXJjZSgpe3RoaXMuZnJhbWVGcm9tU291cmNlQ291bnQrK31nZXQgZnBzKCl7Y29uc3R7c3RhcnRBdDplLGZyYW1lRnJvbVNvdXJjZUNvdW50OnR9PXRoaXM7cmV0dXJuIHQvKChEYXRlLm5vdygpLWUpLzFlMyl9YXN5bmMgb25GcmFtZVRyYW5zZm9ybWVkKGU9e30sdD0hMSl7MD09PXRoaXMuc3RhcnRBdCYmKHRoaXMuc3RhcnRBdD1EYXRlLm5vdygpKSx0aGlzLmZyYW1lVHJhbnNmb3JtZWRDb3VudCsrO2NvbnN0e3N0YXJ0QXQ6cixmcmFtZVRyYW5zZm9ybWVkQ291bnQ6bixmcmFtZUZyb21Tb3VyY2VDb3VudDpjfT10aGlzLGY9RGF0ZS5ub3coKSxoPShmLXIpLzFlMyx1PW4vaCxkPWMvaDtyZXR1cm4gdHx8dGhpcy5mcmFtZVRyYW5zZm9ybWVkQ291bnQ+PXRoaXMuY29uZmlnLmxvZ2dpbmdJbnRlcnZhbEZyYW1lQ291bnQ/KHRoaXMuZnJhbWVGcm9tU291cmNlQ291bnQ9MCx0aGlzLmZyYW1lVHJhbnNmb3JtZWRDb3VudD0wLHRoaXMuc3RhcnRBdD1mLHRoaXMucmVwb3J0ZXIuY29uZmlnPXRoaXMuY29uZmlnLHRoaXMucmVwb3J0ZXIuc2VuZCh7Li4udGhpcy5jb25maWcucmVwb3J0LHZhcmlhdGlvbjoiUW9TIixmcHM6ZCx0cmFuc2Zvcm1lZEZwczp1LGZyYW1lc1RyYW5zZm9ybWVkOm4sLi4uZX0pKToic3VjY2VzcyJ9fXZhciBRPShlPT4oZS5waXBlbGluZV9lbmRlZD0icGlwZWxpbmVfZW5kZWQiLGUucGlwZWxpbmVfZW5kZWRfd2l0aF9lcnJvcj0icGlwZWxpbmVfZW5kZWRfd2l0aF9lcnJvciIsZS5waXBlbGluZV9zdGFydGVkPSJwaXBlbGluZV9zdGFydGVkIixlLnBpcGVsaW5lX3N0YXJ0ZWRfd2l0aF9lcnJvcj0icGlwZWxpbmVfc3RhcnRlZF93aXRoX2Vycm9yIixlLnBpcGVsaW5lX3Jlc3RhcnRlZD0icGlwZWxpbmVfcmVzdGFydGVkIixlLnBpcGVsaW5lX3Jlc3RhcnRlZF93aXRoX2Vycm9yPSJwaXBlbGluZV9yZXN0YXJ0ZWRfd2l0aF9lcnJvciIsZSkpKFF8fHt9KTtjbGFzcyBQZSBleHRlbmRzIHl7Y29uc3RydWN0b3IoZSx0KXtzdXBlcigpLGEodGhpcywicmVwb3J0ZXJfIixuZXcgRCksYSh0aGlzLCJyZXBvcnRlclFvc18iLG5ldyBTZSh7bG9nZ2luZ0ludGVydmFsRnJhbWVDb3VudDo1MDAscmVwb3J0Ont2ZXJzaW9uOkd9fSkpLGEodGhpcywidHJhbnNmb3JtZXJUeXBlXyIpLGEodGhpcywidHJhbnNmb3JtZXJfIiksYSh0aGlzLCJzaG91bGRTdG9wXyIpLGEodGhpcywiaXNGbGFzaGVkXyIpLGEodGhpcywibWVkaWFUcmFuc2Zvcm1lclFvc1JlcG9ydFN0YXJ0VGltZXN0YW1wXyIpLGEodGhpcywidmlkZW9IZWlnaHRfIiksYSh0aGlzLCJ2aWRlb1dpZHRoXyIpLGEodGhpcywidHJhY2tFeHBlY3RlZFJhdGVfIiksYSh0aGlzLCJpbmRleF8iKSxhKHRoaXMsImNvbnRyb2xsZXJfIiksdGhpcy5pbmRleF89dCx0aGlzLnRyYW5zZm9ybWVyXz1lLHRoaXMuc2hvdWxkU3RvcF89ITEsdGhpcy5pc0ZsYXNoZWRfPSExLHRoaXMubWVkaWFUcmFuc2Zvcm1lclFvc1JlcG9ydFN0YXJ0VGltZXN0YW1wXz0wLHRoaXMudmlkZW9IZWlnaHRfPTAsdGhpcy52aWRlb1dpZHRoXz0wLHRoaXMudHJhY2tFeHBlY3RlZFJhdGVfPS0xLHRoaXMudHJhbnNmb3JtZXJUeXBlXz0iQ3VzdG9tIiwiZ2V0VHJhbnNmb3JtZXJUeXBlImluIGUmJih0aGlzLnRyYW5zZm9ybWVyVHlwZV89ZS5nZXRUcmFuc2Zvcm1lclR5cGUoKSksdGhpcy5yZXBvcnQoe3ZhcmlhdGlvbjoiQ3JlYXRlIn0pfXNldFRyYWNrRXhwZWN0ZWRSYXRlKGUpe3RoaXMudHJhY2tFeHBlY3RlZFJhdGVfPWV9YXN5bmMgc3RhcnQoZSl7aWYodGhpcy5jb250cm9sbGVyXz1lLHRoaXMudHJhbnNmb3JtZXJfJiYiZnVuY3Rpb24iPT10eXBlb2YgdGhpcy50cmFuc2Zvcm1lcl8uc3RhcnQpdHJ5e2F3YWl0IHRoaXMudHJhbnNmb3JtZXJfLnN0YXJ0KGUpfWNhdGNoKHQpe3RoaXMucmVwb3J0KHttZXNzYWdlOmwuZXJyb3JzLnRyYW5zZm9ybWVyX3N0YXJ0LHZhcmlhdGlvbjoiRXJyb3IiLGVycm9yOnYodCl9KTtjb25zdCBlPXtldmVudE1ldGFEYXRhOnt0cmFuc2Zvcm1lckluZGV4OnRoaXMuaW5kZXhffSxlcnJvcjp0LGZ1bmN0aW9uOiJzdGFydCJ9O3RoaXMuZW1pdCgiZXJyb3IiLGUpfX1hc3luYyB0cmFuc2Zvcm0oZSx0KXt2YXIgcixuLGMsZjtpZigwPT09dGhpcy5tZWRpYVRyYW5zZm9ybWVyUW9zUmVwb3J0U3RhcnRUaW1lc3RhbXBfJiYodGhpcy5tZWRpYVRyYW5zZm9ybWVyUW9zUmVwb3J0U3RhcnRUaW1lc3RhbXBfPURhdGUubm93KCkpLGUgaW5zdGFuY2VvZiBWaWRlb0ZyYW1lJiYodGhpcy52aWRlb0hlaWdodF89bnVsbCE9KHI9bnVsbD09ZT92b2lkIDA6ZS5kaXNwbGF5SGVpZ2h0KT9yOjAsdGhpcy52aWRlb1dpZHRoXz1udWxsIT0obj1udWxsPT1lP3ZvaWQgMDplLmRpc3BsYXlXaWR0aCk/bjowKSx0aGlzLnJlcG9ydGVyUW9zXy5vbkZyYW1lRnJvbVNvdXJjZSgpLHRoaXMudHJhbnNmb3JtZXJfKWlmKHRoaXMuc2hvdWxkU3RvcF8pY29uc29sZS53YXJuKCJbUGlwZWxpbmVdIGZsdXNoIGZyb20gdHJhbnNmb3JtIiksZS5jbG9zZSgpLHRoaXMuZmx1c2godCksdC50ZXJtaW5hdGUoKTtlbHNle3RyeXthd2FpdChudWxsPT0oZj0oYz10aGlzLnRyYW5zZm9ybWVyXykudHJhbnNmb3JtKT92b2lkIDA6Zi5jYWxsKGMsZSx0KSksdGhpcy5yZXBvcnRRb3MoKX1jYXRjaChoKXt0aGlzLnJlcG9ydCh7bWVzc2FnZTpsLmVycm9ycy50cmFuc2Zvcm1lcl90cmFuc2Zvcm0sdmFyaWF0aW9uOiJFcnJvciIsZXJyb3I6dihoKX0pO2NvbnN0IGU9e2V2ZW50TWV0YURhdGE6e3RyYW5zZm9ybWVySW5kZXg6dGhpcy5pbmRleF99LGVycm9yOmgsZnVuY3Rpb246InRyYW5zZm9ybSJ9O3RoaXMuZW1pdCgiZXJyb3IiLGUpfWlmKC0xIT10aGlzLnRyYWNrRXhwZWN0ZWRSYXRlXyYmLjgqdGhpcy50cmFja0V4cGVjdGVkUmF0ZV8+dGhpcy5yZXBvcnRlclFvc18uZnBzKXtjb25zdCBlPXtldmVudE1ldGFEYXRhOnt0cmFuc2Zvcm1lckluZGV4OnRoaXMuaW5kZXhffSx3YXJuaW5nVHlwZToiZnBzX2Ryb3AiLGRyb3BJbmZvOntyZXF1ZXN0ZWQ6dGhpcy50cmFja0V4cGVjdGVkUmF0ZV8sY3VycmVudDp0aGlzLnJlcG9ydGVyUW9zXy5mcHN9fTt0aGlzLmVtaXQoIndhcm4iLGUpfX19YXN5bmMgZmx1c2goZSl7aWYodGhpcy50cmFuc2Zvcm1lcl8mJiJmdW5jdGlvbiI9PXR5cGVvZiB0aGlzLnRyYW5zZm9ybWVyXy5mbHVzaCYmIXRoaXMuaXNGbGFzaGVkXyl7dGhpcy5pc0ZsYXNoZWRfPSEwO3RyeXthd2FpdCB0aGlzLnRyYW5zZm9ybWVyXy5mbHVzaChlKX1jYXRjaCh0KXt0aGlzLnJlcG9ydCh7bWVzc2FnZTpsLmVycm9ycy50cmFuc2Zvcm1lcl9mbHVzaCx2YXJpYXRpb246IkVycm9yIixlcnJvcjp2KHQpfSk7Y29uc3QgZT17ZXZlbnRNZXRhRGF0YTp7dHJhbnNmb3JtZXJJbmRleDp0aGlzLmluZGV4X30sZXJyb3I6dCxmdW5jdGlvbjoiZmx1c2gifTt0aGlzLmVtaXQoImVycm9yIixlKX19dGhpcy5yZXBvcnRRb3MoITApLHRoaXMucmVwb3J0KHt2YXJpYXRpb246IkRlbGV0ZSJ9KX1zdG9wKCl7Y29uc29sZS5sb2coIltQaXBlbGluZV0gU3RvcCBzdHJlYW0uIiksdGhpcy5jb250cm9sbGVyXyYmKHRoaXMuZmx1c2godGhpcy5jb250cm9sbGVyXyksdGhpcy5jb250cm9sbGVyXy50ZXJtaW5hdGUoKSksdGhpcy5zaG91bGRTdG9wXz0hMH1yZXBvcnQoZSl7dGhpcy5yZXBvcnRlcl8uc2VuZCh7dmVyc2lvbjpHLGFjdGlvbjoiTWVkaWFUcmFuc2Zvcm1lciIsdHJhbnNmb3JtZXJUeXBlOnRoaXMudHJhbnNmb3JtZXJUeXBlXywuLi5lfSl9cmVwb3J0UW9zKGU9ITEpe3RoaXMucmVwb3J0ZXJRb3NfLmNvbmZpZz17Li4udGhpcy5yZXBvcnRlclFvc18uY29uZmlnfSx0aGlzLnJlcG9ydGVyUW9zXy5vbkZyYW1lVHJhbnNmb3JtZWQoe3ZlcnNpb246RyxhY3Rpb246Ik1lZGlhVHJhbnNmb3JtZXIiLHRyYW5zZm9ybWVyVHlwZTp0aGlzLnRyYW5zZm9ybWVyVHlwZV8sdmlkZW9XaWR0aDp0aGlzLnZpZGVvV2lkdGhfLHZpZGVvSGVpZ2h0OnRoaXMudmlkZW9IZWlnaHRffSxlKX19Y2xhc3MgTWUgZXh0ZW5kcyB5e2NvbnN0cnVjdG9yKGUpe3N1cGVyKCksYSh0aGlzLCJ0cmFuc2Zvcm1lcnNfIiksYSh0aGlzLCJ0cmFja0V4cGVjdGVkUmF0ZV8iKSx0aGlzLnRyYW5zZm9ybWVyc189W10sdGhpcy50cmFja0V4cGVjdGVkUmF0ZV89LTE7Zm9yKGxldCB0PTA7dDxlLmxlbmd0aDt0Kyspe2xldCByPW5ldyBQZShlW3RdLHQpO3Iub24oImVycm9yIiwoZT0+e3RoaXMuZW1pdCgiZXJyb3IiLGUpfSkpLHIub24oIndhcm4iLChlPT57dGhpcy5lbWl0KCJ3YXJuIixlKX0pKSx0aGlzLnRyYW5zZm9ybWVyc18ucHVzaChyKX19c2V0VHJhY2tFeHBlY3RlZFJhdGUoZSl7dGhpcy50cmFja0V4cGVjdGVkUmF0ZV89ZTtmb3IobGV0IHQgb2YgdGhpcy50cmFuc2Zvcm1lcnNfKXQuc2V0VHJhY2tFeHBlY3RlZFJhdGUodGhpcy50cmFja0V4cGVjdGVkUmF0ZV8pfWFzeW5jIHN0YXJ0KGUsdCl7aWYodGhpcy50cmFuc2Zvcm1lcnNfJiYwIT09dGhpcy50cmFuc2Zvcm1lcnNfLmxlbmd0aCl7dHJ5e2xldCByPWU7Zm9yKGxldCB0IG9mIHRoaXMudHJhbnNmb3JtZXJzXyllPWUucGlwZVRocm91Z2gobmV3IFRyYW5zZm9ybVN0cmVhbSh0KSk7ZS5waXBlVG8odCkudGhlbigoYXN5bmMoKT0+e2NvbnNvbGUubG9nKCJbUGlwZWxpbmVdIFNldHVwLiIpLGF3YWl0IHQuYWJvcnQoKSxhd2FpdCByLmNhbmNlbCgpLHRoaXMuZW1pdCgicGlwZWxpbmVJbmZvIiwicGlwZWxpbmVfZW5kZWQiKX0pKS5jYXRjaCgoYXN5bmMgbj0+e2UuY2FuY2VsKCkudGhlbigoKCk9Pntjb25zb2xlLmxvZygiW1BpcGVsaW5lXSBTaHV0dGluZyBkb3duIHN0cmVhbXMgYWZ0ZXIgYWJvcnQuIil9KSkuY2F0Y2goKGU9Pntjb25zb2xlLmVycm9yKCJbUGlwZWxpbmVdIEVycm9yIGZyb20gc3RyZWFtIHRyYW5zZm9ybToiLGUpfSkpLGF3YWl0IHQuYWJvcnQobiksYXdhaXQgci5jYW5jZWwobiksdGhpcy5lbWl0KCJwaXBlbGluZUluZm8iLCJwaXBlbGluZV9lbmRlZF93aXRoX2Vycm9yIil9KSl9Y2F0Y2h7cmV0dXJuIHRoaXMuZW1pdCgicGlwZWxpbmVJbmZvIiwicGlwZWxpbmVfc3RhcnRlZF93aXRoX2Vycm9yIiksdm9pZCB0aGlzLmRlc3Ryb3koKX10aGlzLmVtaXQoInBpcGVsaW5lSW5mbyIsInBpcGVsaW5lX3N0YXJ0ZWQiKSxjb25zb2xlLmxvZygiW1BpcGVsaW5lXSBQaXBlbGluZSBzdGFydGVkLiIpfWVsc2UgY29uc29sZS5sb2coIltQaXBlbGluZV0gTm8gdHJhbnNmb3JtZXJzLiIpfWFzeW5jIGRlc3Ryb3koKXtjb25zb2xlLmxvZygiW1BpcGVsaW5lXSBEZXN0cm95aW5nIFBpcGVsaW5lLiIpO2ZvcihsZXQgZSBvZiB0aGlzLnRyYW5zZm9ybWVyc18pZS5zdG9wKCl9fWNsYXNzIE9lIGV4dGVuZHMgeXtjb25zdHJ1Y3Rvcigpe3N1cGVyKCksYSh0aGlzLCJyZXBvcnRlcl8iKSxhKHRoaXMsInBpcGVsaW5lXyIpLGEodGhpcywidHJhbnNmb3JtZXJzXyIpLGEodGhpcywicmVhZGFibGVfIiksYSh0aGlzLCJ3cml0YWJsZV8iKSxhKHRoaXMsInRyYWNrRXhwZWN0ZWRSYXRlXyIpLHRoaXMucmVwb3J0ZXJfPW5ldyBELHRoaXMudHJhY2tFeHBlY3RlZFJhdGVfPS0xLHRoaXMucmVwb3J0KHt2YXJpYXRpb246IkNyZWF0ZSJ9KX1zZXRUcmFja0V4cGVjdGVkUmF0ZShlKXt0aGlzLnRyYWNrRXhwZWN0ZWRSYXRlXz1lLHRoaXMucGlwZWxpbmVfJiZ0aGlzLnBpcGVsaW5lXy5zZXRUcmFja0V4cGVjdGVkUmF0ZSh0aGlzLnRyYWNrRXhwZWN0ZWRSYXRlXyl9dHJhbnNmb3JtKGUsdCl7cmV0dXJuIHRoaXMucmVhZGFibGVfPWUsdGhpcy53cml0YWJsZV89dCx0aGlzLnRyYW5zZm9ybUludGVybmFsKCl9dHJhbnNmb3JtSW50ZXJuYWwoKXtyZXR1cm4gbmV3IFByb21pc2UoKGFzeW5jKGUsdCk9PntpZighdGhpcy50cmFuc2Zvcm1lcnNffHwwPT09dGhpcy50cmFuc2Zvcm1lcnNfLmxlbmd0aClyZXR1cm4gdGhpcy5yZXBvcnQoe21lc3NhZ2U6bC5lcnJvcnMudHJhbnNmb3JtZXJfbm9uZSx2YXJpYXRpb246IkVycm9yIn0pLHZvaWQgdCgiW01lZGlhUHJvY2Vzc29yXSBOZWVkIHRvIHNldCB0cmFuc2Zvcm1lcnMuIik7aWYoIXRoaXMucmVhZGFibGVfKXJldHVybiB0aGlzLnJlcG9ydCh7dmFyaWF0aW9uOiJFcnJvciIsbWVzc2FnZTpsLmVycm9ycy5yZWFkYWJsZV9udWxsfSksdm9pZCB0KCJbTWVkaWFQcm9jZXNzb3JdIFJlYWRhYmxlIGlzIG51bGwuIik7aWYoIXRoaXMud3JpdGFibGVfKXJldHVybiB0aGlzLnJlcG9ydCh7dmFyaWF0aW9uOiJFcnJvciIsbWVzc2FnZTpsLmVycm9ycy53cml0YWJsZV9udWxsfSksdm9pZCB0KCJbTWVkaWFQcm9jZXNzb3JdIFdyaXRhYmxlIGlzIG51bGwuIik7bGV0IHI9ITE7dGhpcy5waXBlbGluZV8mJihyPSEwLHRoaXMucGlwZWxpbmVfLmNsZWFyTGlzdGVuZXJzKCksdGhpcy5waXBlbGluZV8uZGVzdHJveSgpKSx0aGlzLnBpcGVsaW5lXz1uZXcgTWUodGhpcy50cmFuc2Zvcm1lcnNfKSx0aGlzLnBpcGVsaW5lXy5vbigid2FybiIsKGU9Pnt0aGlzLmVtaXQoIndhcm4iLGUpfSkpLHRoaXMucGlwZWxpbmVfLm9uKCJlcnJvciIsKGU9Pnt0aGlzLmVtaXQoImVycm9yIixlKX0pKSx0aGlzLnBpcGVsaW5lXy5vbigicGlwZWxpbmVJbmZvIiwoZT0+e3ImJigicGlwZWxpbmVfc3RhcnRlZCI9PT1lP2U9US5waXBlbGluZV9yZXN0YXJ0ZWQ6InBpcGVsaW5lX3N0YXJ0ZWRfd2l0aF9lcnJvciI9PT1lJiYoZT1RLnBpcGVsaW5lX3Jlc3RhcnRlZF93aXRoX2Vycm9yKSksdGhpcy5lbWl0KCJwaXBlbGluZUluZm8iLGUpfSkpLC0xIT10aGlzLnRyYWNrRXhwZWN0ZWRSYXRlXyYmdGhpcy5waXBlbGluZV8uc2V0VHJhY2tFeHBlY3RlZFJhdGUodGhpcy50cmFja0V4cGVjdGVkUmF0ZV8pLHRoaXMucGlwZWxpbmVfLnN0YXJ0KHRoaXMucmVhZGFibGVfLHRoaXMud3JpdGFibGVfKS50aGVuKCgoKT0+e2UoKX0pKS5jYXRjaCgoZT0+e3QoZSl9KSl9KSl9c2V0VHJhbnNmb3JtZXJzKGUpe3JldHVybiB0aGlzLnJlcG9ydCh7dmFyaWF0aW9uOiJVcGRhdGUiLG1lc3NhZ2U6bC51cGRhdGVzLnRyYW5zZm9ybWVyX25ld30pLHRoaXMudHJhbnNmb3JtZXJzXz1lLHRoaXMucmVhZGFibGVfJiZ0aGlzLndyaXRhYmxlXz90aGlzLnRyYW5zZm9ybUludGVybmFsKCk6UHJvbWlzZS5yZXNvbHZlKCl9ZGVzdHJveSgpe3JldHVybiBuZXcgUHJvbWlzZSgoYXN5bmMgZT0+e3RoaXMucGlwZWxpbmVfJiZ0aGlzLnBpcGVsaW5lXy5kZXN0cm95KCksdGhpcy5yZXBvcnQoe3ZhcmlhdGlvbjoiRGVsZXRlIn0pLGUoKX0pKX1yZXBvcnQoZSl7dGhpcy5yZXBvcnRlcl8uc2VuZCh7dmVyc2lvbjpHLGFjdGlvbjoiTWVkaWFQcm9jZXNzb3IiLC4uLmV9KX19Y29uc3QgVj1uZXcgV2Vha01hcCxZPW5ldyBXZWFrTWFwLEs9bmV3IFdlYWtNYXAsWj1TeW1ib2woImFueVByb2R1Y2VyIiksZWU9UHJvbWlzZS5yZXNvbHZlKCksdGU9U3ltYm9sKCJsaXN0ZW5lckFkZGVkIikscmU9U3ltYm9sKCJsaXN0ZW5lclJlbW92ZWQiKTtsZXQgc2U9ITEsb2U9ITE7ZnVuY3Rpb24gYXNzZXJ0RXZlbnROYW1lJDEoZSl7aWYoInN0cmluZyIhPXR5cGVvZiBlJiYic3ltYm9sIiE9dHlwZW9mIGUmJiJudW1iZXIiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJgZXZlbnROYW1lYCBtdXN0IGJlIGEgc3RyaW5nLCBzeW1ib2wsIG9yIG51bWJlciIpfWZ1bmN0aW9uIGFzc2VydExpc3RlbmVyJDEoZSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcigibGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uIil9ZnVuY3Rpb24gZ2V0TGlzdGVuZXJzJDEoZSx0KXtjb25zdCByPVkuZ2V0KGUpO2lmKHIuaGFzKHQpKXJldHVybiByLmdldCh0KX1mdW5jdGlvbiBnZXRFdmVudFByb2R1Y2VycyQxKGUsdCl7Y29uc3Qgcj0ic3RyaW5nIj09dHlwZW9mIHR8fCJzeW1ib2wiPT10eXBlb2YgdHx8Im51bWJlciI9PXR5cGVvZiB0P3Q6WixuPUsuZ2V0KGUpO2lmKG4uaGFzKHIpKXJldHVybiBuLmdldChyKX1mdW5jdGlvbiBpdGVyYXRvciQxKGUsdCl7dD1BcnJheS5pc0FycmF5KHQpP3Q6W3RdO2xldCByPSExLGZsdXNoPSgpPT57fSxuPVtdO2NvbnN0IGM9e2VucXVldWUoZSl7bi5wdXNoKGUpLGZsdXNoKCl9LGZpbmlzaCgpe3I9ITAsZmx1c2goKX19O2Zvcihjb25zdCBmIG9mIHQpe2xldCB0PWdldEV2ZW50UHJvZHVjZXJzJDEoZSxmKTtpZighdCl7dD1uZXcgU2V0O0suZ2V0KGUpLnNldChmLHQpfXQuYWRkKGMpfXJldHVybnthc3luYyBuZXh0KCl7cmV0dXJuIG4/MD09PW4ubGVuZ3RoP3I/KG49dm9pZCAwLHRoaXMubmV4dCgpKTooYXdhaXQgbmV3IFByb21pc2UoKGU9PntmbHVzaD1lfSkpLHRoaXMubmV4dCgpKTp7ZG9uZTohMSx2YWx1ZTphd2FpdCBuLnNoaWZ0KCl9Ontkb25lOiEwfX0sYXN5bmMgcmV0dXJuKHIpe249dm9pZCAwO2Zvcihjb25zdCBuIG9mIHQpe2NvbnN0IHQ9Z2V0RXZlbnRQcm9kdWNlcnMkMShlLG4pO2lmKHQmJih0LmRlbGV0ZShjKSwwPT09dC5zaXplKSl7Sy5nZXQoZSkuZGVsZXRlKG4pfX1yZXR1cm4gZmx1c2goKSxhcmd1bWVudHMubGVuZ3RoPjA/e2RvbmU6ITAsdmFsdWU6YXdhaXQgcn06e2RvbmU6ITB9fSxbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCl7cmV0dXJuIHRoaXN9fX1mdW5jdGlvbiBkZWZhdWx0TWV0aG9kTmFtZXNPckFzc2VydCQxKGUpe2lmKHZvaWQgMD09PWUpcmV0dXJuIGZlO2lmKCFBcnJheS5pc0FycmF5KGUpKXRocm93IG5ldyBUeXBlRXJyb3IoImBtZXRob2ROYW1lc2AgbXVzdCBiZSBhbiBhcnJheSBvZiBzdHJpbmdzIik7Zm9yKGNvbnN0IHQgb2YgZSlpZighZmUuaW5jbHVkZXModCkpe2lmKCJzdHJpbmciIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKCJgbWV0aG9kTmFtZXNgIGVsZW1lbnQgbXVzdCBiZSBhIHN0cmluZyIpO3Rocm93IG5ldyBFcnJvcihgJHt0fSBpcyBub3QgRW1pdHRlcnkgbWV0aG9kYCl9cmV0dXJuIGV9Y29uc3QgaXNNZXRhRXZlbnQkMT1lPT5lPT09dGV8fGU9PT1yZTtmdW5jdGlvbiBlbWl0TWV0YUV2ZW50JDEoZSx0LHIpe2lmKGlzTWV0YUV2ZW50JDEodCkpdHJ5e3NlPSEwLGUuZW1pdCh0LHIpfWZpbmFsbHl7c2U9ITF9fWxldCBhZT1jbGFzcyBFbWl0dGVyeTJ7c3RhdGljIG1peGluKGUsdCl7cmV0dXJuIHQ9ZGVmYXVsdE1ldGhvZE5hbWVzT3JBc3NlcnQkMSh0KSxyPT57aWYoImZ1bmN0aW9uIiE9dHlwZW9mIHIpdGhyb3cgbmV3IFR5cGVFcnJvcigiYHRhcmdldGAgbXVzdCBiZSBmdW5jdGlvbiIpO2Zvcihjb25zdCBlIG9mIHQpaWYodm9pZCAwIT09ci5wcm90b3R5cGVbZV0pdGhyb3cgbmV3IEVycm9yKGBUaGUgcHJvcGVydHkgXGAke2V9XGAgYWxyZWFkeSBleGlzdHMgb24gXGB0YXJnZXRcYGApO09iamVjdC5kZWZpbmVQcm9wZXJ0eShyLnByb3RvdHlwZSxlLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbiBnZXRFbWl0dGVyeVByb3BlcnR5KCl7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLGUse2VudW1lcmFibGU6ITEsdmFsdWU6bmV3IEVtaXR0ZXJ5Mn0pLHRoaXNbZV19fSk7Y29uc3QgZW1pdHRlcnlNZXRob2RDYWxsZXI9dD0+ZnVuY3Rpb24oLi4ucil7cmV0dXJuIHRoaXNbZV1bdF0oLi4ucil9O2Zvcihjb25zdCBlIG9mIHQpT2JqZWN0LmRlZmluZVByb3BlcnR5KHIucHJvdG90eXBlLGUse2VudW1lcmFibGU6ITEsdmFsdWU6ZW1pdHRlcnlNZXRob2RDYWxsZXIoZSl9KTtyZXR1cm4gcn19c3RhdGljIGdldCBpc0RlYnVnRW5hYmxlZCgpe2lmKCJvYmplY3QiIT10eXBlb2YgZ2xvYmFsVGhpcy5wcm9jZXNzPy5lbnYpcmV0dXJuIG9lO2NvbnN0e2VudjplfT1nbG9iYWxUaGlzLnByb2Nlc3M/P3tlbnY6e319O3JldHVybiJlbWl0dGVyeSI9PT1lLkRFQlVHfHwiKiI9PT1lLkRFQlVHfHxvZX1zdGF0aWMgc2V0IGlzRGVidWdFbmFibGVkKGUpe29lPWV9Y29uc3RydWN0b3IoZT17fSl7Vi5zZXQodGhpcyxuZXcgU2V0KSxZLnNldCh0aGlzLG5ldyBNYXApLEsuc2V0KHRoaXMsbmV3IE1hcCksSy5nZXQodGhpcykuc2V0KFosbmV3IFNldCksdGhpcy5kZWJ1Zz1lLmRlYnVnPz97fSx2b2lkIDA9PT10aGlzLmRlYnVnLmVuYWJsZWQmJih0aGlzLmRlYnVnLmVuYWJsZWQ9ITEpLHRoaXMuZGVidWcubG9nZ2VyfHwodGhpcy5kZWJ1Zy5sb2dnZXI9KGUsdCxyLG4pPT57dHJ5e249SlNPTi5zdHJpbmdpZnkobil9Y2F0Y2h7bj1gT2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBrZXlzIGZhaWxlZCB0byBzdHJpbmdpZnk6ICR7T2JqZWN0LmtleXMobikuam9pbigiLCIpfWB9InN5bWJvbCIhPXR5cGVvZiByJiYibnVtYmVyIiE9dHlwZW9mIHJ8fChyPXIudG9TdHJpbmcoKSk7Y29uc3QgYz1uZXcgRGF0ZSxmPWAke2MuZ2V0SG91cnMoKX06JHtjLmdldE1pbnV0ZXMoKX06JHtjLmdldFNlY29uZHMoKX0uJHtjLmdldE1pbGxpc2Vjb25kcygpfWA7Y29uc29sZS5sb2coYFske2Z9XVtlbWl0dGVyeToke2V9XVske3R9XSBFdmVudCBOYW1lOiAke3J9XG5cdGRhdGE6ICR7bn1gKX0pfWxvZ0lmRGVidWdFbmFibGVkKGUsdCxyKXsoRW1pdHRlcnkyLmlzRGVidWdFbmFibGVkfHx0aGlzLmRlYnVnLmVuYWJsZWQpJiZ0aGlzLmRlYnVnLmxvZ2dlcihlLHRoaXMuZGVidWcubmFtZSx0LHIpfW9uKGUsdCl7YXNzZXJ0TGlzdGVuZXIkMSh0KSxlPUFycmF5LmlzQXJyYXkoZSk/ZTpbZV07Zm9yKGNvbnN0IHIgb2YgZSl7YXNzZXJ0RXZlbnROYW1lJDEocik7bGV0IGU9Z2V0TGlzdGVuZXJzJDEodGhpcyxyKTtpZighZSl7ZT1uZXcgU2V0O1kuZ2V0KHRoaXMpLnNldChyLGUpfWUuYWRkKHQpLHRoaXMubG9nSWZEZWJ1Z0VuYWJsZWQoInN1YnNjcmliZSIscix2b2lkIDApLGlzTWV0YUV2ZW50JDEocil8fGVtaXRNZXRhRXZlbnQkMSh0aGlzLHRlLHtldmVudE5hbWU6cixsaXN0ZW5lcjp0fSl9cmV0dXJuIHRoaXMub2ZmLmJpbmQodGhpcyxlLHQpfW9mZihlLHQpe2Fzc2VydExpc3RlbmVyJDEodCksZT1BcnJheS5pc0FycmF5KGUpP2U6W2VdO2Zvcihjb25zdCByIG9mIGUpe2Fzc2VydEV2ZW50TmFtZSQxKHIpO2NvbnN0IGU9Z2V0TGlzdGVuZXJzJDEodGhpcyxyKTtpZihlJiYoZS5kZWxldGUodCksMD09PWUuc2l6ZSkpe1kuZ2V0KHRoaXMpLmRlbGV0ZShyKX10aGlzLmxvZ0lmRGVidWdFbmFibGVkKCJ1bnN1YnNjcmliZSIscix2b2lkIDApLGlzTWV0YUV2ZW50JDEocil8fGVtaXRNZXRhRXZlbnQkMSh0aGlzLHJlLHtldmVudE5hbWU6cixsaXN0ZW5lcjp0fSl9fW9uY2UoZSl7bGV0IHQ7Y29uc3Qgcj1uZXcgUHJvbWlzZSgocj0+e3Q9dGhpcy5vbihlLChlPT57dCgpLHIoZSl9KSl9KSk7cmV0dXJuIHIub2ZmPXQscn1ldmVudHMoZSl7ZT1BcnJheS5pc0FycmF5KGUpP2U6W2VdO2Zvcihjb25zdCB0IG9mIGUpYXNzZXJ0RXZlbnROYW1lJDEodCk7cmV0dXJuIGl0ZXJhdG9yJDEodGhpcyxlKX1hc3luYyBlbWl0KGUsdCl7aWYoYXNzZXJ0RXZlbnROYW1lJDEoZSksaXNNZXRhRXZlbnQkMShlKSYmIXNlKXRocm93IG5ldyBUeXBlRXJyb3IoImBldmVudE5hbWVgIGNhbm5vdCBiZSBtZXRhIGV2ZW50IGBsaXN0ZW5lckFkZGVkYCBvciBgbGlzdGVuZXJSZW1vdmVkYCIpO3RoaXMubG9nSWZEZWJ1Z0VuYWJsZWQoImVtaXQiLGUsdCksZnVuY3Rpb24gZW5xdWV1ZVByb2R1Y2VycyQxKGUsdCxyKXtjb25zdCBuPUsuZ2V0KGUpO2lmKG4uaGFzKHQpKWZvcihjb25zdCBjIG9mIG4uZ2V0KHQpKWMuZW5xdWV1ZShyKTtpZihuLmhhcyhaKSl7Y29uc3QgZT1Qcm9taXNlLmFsbChbdCxyXSk7Zm9yKGNvbnN0IHQgb2Ygbi5nZXQoWikpdC5lbnF1ZXVlKGUpfX0odGhpcyxlLHQpO2NvbnN0IHI9Z2V0TGlzdGVuZXJzJDEodGhpcyxlKT8/bmV3IFNldCxuPVYuZ2V0KHRoaXMpLGM9Wy4uLnJdLGY9aXNNZXRhRXZlbnQkMShlKT9bXTpbLi4ubl07YXdhaXQgZWUsYXdhaXQgUHJvbWlzZS5hbGwoWy4uLmMubWFwKChhc3luYyBlPT57aWYoci5oYXMoZSkpcmV0dXJuIGUodCl9KSksLi4uZi5tYXAoKGFzeW5jIHI9PntpZihuLmhhcyhyKSlyZXR1cm4gcihlLHQpfSkpXSl9YXN5bmMgZW1pdFNlcmlhbChlLHQpe2lmKGFzc2VydEV2ZW50TmFtZSQxKGUpLGlzTWV0YUV2ZW50JDEoZSkmJiFzZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJgZXZlbnROYW1lYCBjYW5ub3QgYmUgbWV0YSBldmVudCBgbGlzdGVuZXJBZGRlZGAgb3IgYGxpc3RlbmVyUmVtb3ZlZGAiKTt0aGlzLmxvZ0lmRGVidWdFbmFibGVkKCJlbWl0U2VyaWFsIixlLHQpO2NvbnN0IHI9Z2V0TGlzdGVuZXJzJDEodGhpcyxlKT8/bmV3IFNldCxuPVYuZ2V0KHRoaXMpLGM9Wy4uLnJdLGY9Wy4uLm5dO2F3YWl0IGVlO2Zvcihjb25zdCBoIG9mIGMpci5oYXMoaCkmJmF3YWl0IGgodCk7Zm9yKGNvbnN0IGggb2YgZiluLmhhcyhoKSYmYXdhaXQgaChlLHQpfW9uQW55KGUpe3JldHVybiBhc3NlcnRMaXN0ZW5lciQxKGUpLHRoaXMubG9nSWZEZWJ1Z0VuYWJsZWQoInN1YnNjcmliZUFueSIsdm9pZCAwLHZvaWQgMCksVi5nZXQodGhpcykuYWRkKGUpLGVtaXRNZXRhRXZlbnQkMSh0aGlzLHRlLHtsaXN0ZW5lcjplfSksdGhpcy5vZmZBbnkuYmluZCh0aGlzLGUpfWFueUV2ZW50KCl7cmV0dXJuIGl0ZXJhdG9yJDEodGhpcyl9b2ZmQW55KGUpe2Fzc2VydExpc3RlbmVyJDEoZSksdGhpcy5sb2dJZkRlYnVnRW5hYmxlZCgidW5zdWJzY3JpYmVBbnkiLHZvaWQgMCx2b2lkIDApLGVtaXRNZXRhRXZlbnQkMSh0aGlzLHJlLHtsaXN0ZW5lcjplfSksVi5nZXQodGhpcykuZGVsZXRlKGUpfWNsZWFyTGlzdGVuZXJzKGUpe2U9QXJyYXkuaXNBcnJheShlKT9lOltlXTtmb3IoY29uc3QgdCBvZiBlKWlmKHRoaXMubG9nSWZEZWJ1Z0VuYWJsZWQoImNsZWFyIix0LHZvaWQgMCksInN0cmluZyI9PXR5cGVvZiB0fHwic3ltYm9sIj09dHlwZW9mIHR8fCJudW1iZXIiPT10eXBlb2YgdCl7Y29uc3QgZT1nZXRMaXN0ZW5lcnMkMSh0aGlzLHQpO2UmJmUuY2xlYXIoKTtjb25zdCByPWdldEV2ZW50UHJvZHVjZXJzJDEodGhpcyx0KTtpZihyKXtmb3IoY29uc3QgZSBvZiByKWUuZmluaXNoKCk7ci5jbGVhcigpfX1lbHNle1YuZ2V0KHRoaXMpLmNsZWFyKCk7Zm9yKGNvbnN0W2UsdF1vZiBZLmdldCh0aGlzKS5lbnRyaWVzKCkpdC5jbGVhcigpLFkuZ2V0KHRoaXMpLmRlbGV0ZShlKTtmb3IoY29uc3RbZSx0XW9mIEsuZ2V0KHRoaXMpLmVudHJpZXMoKSl7Zm9yKGNvbnN0IGUgb2YgdCllLmZpbmlzaCgpO3QuY2xlYXIoKSxLLmdldCh0aGlzKS5kZWxldGUoZSl9fX1saXN0ZW5lckNvdW50KGUpe2U9QXJyYXkuaXNBcnJheShlKT9lOltlXTtsZXQgdD0wO2Zvcihjb25zdCByIG9mIGUpaWYoInN0cmluZyIhPXR5cGVvZiByKXt2b2lkIDAhPT1yJiZhc3NlcnRFdmVudE5hbWUkMShyKSx0Kz1WLmdldCh0aGlzKS5zaXplO2Zvcihjb25zdCBlIG9mIFkuZ2V0KHRoaXMpLnZhbHVlcygpKXQrPWUuc2l6ZTtmb3IoY29uc3QgZSBvZiBLLmdldCh0aGlzKS52YWx1ZXMoKSl0Kz1lLnNpemV9ZWxzZSB0Kz1WLmdldCh0aGlzKS5zaXplKyhnZXRMaXN0ZW5lcnMkMSh0aGlzLHIpPy5zaXplPz8wKSsoZ2V0RXZlbnRQcm9kdWNlcnMkMSh0aGlzLHIpPy5zaXplPz8wKSsoZ2V0RXZlbnRQcm9kdWNlcnMkMSh0aGlzKT8uc2l6ZT8/MCk7cmV0dXJuIHR9YmluZE1ldGhvZHMoZSx0KXtpZigib2JqZWN0IiE9dHlwZW9mIGV8fG51bGw9PT1lKXRocm93IG5ldyBUeXBlRXJyb3IoImB0YXJnZXRgIG11c3QgYmUgYW4gb2JqZWN0Iik7dD1kZWZhdWx0TWV0aG9kTmFtZXNPckFzc2VydCQxKHQpO2Zvcihjb25zdCByIG9mIHQpe2lmKHZvaWQgMCE9PWVbcl0pdGhyb3cgbmV3IEVycm9yKGBUaGUgcHJvcGVydHkgXGAke3J9XGAgYWxyZWFkeSBleGlzdHMgb24gXGB0YXJnZXRcYGApO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIse2VudW1lcmFibGU6ITEsdmFsdWU6dGhpc1tyXS5iaW5kKHRoaXMpfSl9fX07Y29uc3QgZmU9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYWUucHJvdG90eXBlKS5maWx0ZXIoKGU9PiJjb25zdHJ1Y3RvciIhPT1lKSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGFlLCJsaXN0ZW5lckFkZGVkIix7dmFsdWU6dGUsd3JpdGFibGU6ITEsZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITF9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYWUsImxpc3RlbmVyUmVtb3ZlZCIse3ZhbHVlOnJlLHdyaXRhYmxlOiExLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiExfSk7Y2xhc3MgQXZlcmFnZXtjb25zdHJ1Y3RvcihlKXt0aGlzLnNpemU9ZSx0aGlzLnZhbHVlcz1bXSx0aGlzLnN1bT0wfXB1c2goZSl7Zm9yKHRoaXMudmFsdWVzLnB1c2goZSksdGhpcy5zdW0rPWU7dGhpcy5zaXplPHRoaXMudmFsdWVzLmxlbmd0aDspdGhpcy5zdW0tPXRoaXMudmFsdWVzLnNoaWZ0KCk/PzB9dmFsdWUoKXtyZXR1cm4gdGhpcy5zdW0vTWF0aC5tYXgoMSx0aGlzLnZhbHVlcy5sZW5ndGgpfX1jbGFzcyBOb2lzZVN1cHByZXNzaW9uVHJhbnNmb3JtZXIgZXh0ZW5kcyBhZXtjb25zdHJ1Y3Rvcigpe3N1cGVyKCksdGhpcy5pc0VuYWJsZWQ9ITAsdGhpcy5pbnRlcm5hbFJlc2FtcGxlU3VwcG9ydGVkPSExLHRoaXMubGF0ZW5jeT1uZXcgQXZlcmFnZSgxMDApLHRoaXMudHJhbnNmb3JtPXRoaXMudHJhbnNmb3JtQXVkaW9EYXRhLmJpbmQodGhpcyl9YXN5bmMgaW5pdChlPXt9KXtjb25zb2xlLmxvZygiTm9pc2Ugc3VwcHJlc3Npb24gdHJhbnNmb3JtZXIgaW5pdGlhbGl6YXRpb24iKSx0aGlzLnRyYW5zZm9ybT1lLmRlYnVnP3RoaXMudHJhbnNmb3JtRGVidWcuYmluZCh0aGlzKTp0aGlzLnRyYW5zZm9ybUF1ZGlvRGF0YS5iaW5kKHRoaXMpO2NvbnN0IHQ9ZS5hc3NldHNEaXJCYXNlVXJsPz8iaHR0cHM6Ly9kM29wcWptcXp4ZjA1Ny5jbG91ZGZyb250Lm5ldC9ub2lzZS1zdXBwcmVzc2lvbi8xLjAuMC1iZXRhLjQiLGxvY2F0ZUZpbGU9ZT0+YCR7dH0vJHtlfWA7bGV0IHIsbj0xO2F3YWl0IHRoaXMuaXNNb25vVGhyZWFkKGUpP3RoaXMud2FzbUluc3RhbmNlPWF3YWl0IGNyZWF0ZVdhc21Nb25vSW5zdGFuY2Uoe2xvY2F0ZUZpbGU6bG9jYXRlRmlsZSxtYWluU2NyaXB0VXJsT3JCbG9iOmxvY2F0ZUZpbGUoIm1haW4tYmluLW1vbm8uanMiKX0pOih0aGlzLndhc21JbnN0YW5jZT1hd2FpdCBjcmVhdGVXYXNtTXVsdGlJbnN0YW5jZSh7bG9jYXRlRmlsZTpsb2NhdGVGaWxlLG1haW5TY3JpcHRVcmxPckJsb2I6bG9jYXRlRmlsZSgibWFpbi1iaW4tbXVsdGkuanMiKX0pLG49MyksdGhpcy53YXNtVHJhbnNmb3JtZXI9bmV3IHRoaXMud2FzbUluc3RhbmNlLkR0bG5UcmFuc2Zvcm1lcixhd2FpdCBQcm9taXNlLmFsbChbdGhpcy5sb2FkTW9kZWwoYCR7dH0vbW9kZWxfMS50ZmxpdGVgLDEpLHRoaXMubG9hZE1vZGVsKGAke3R9L21vZGVsXzIudGZsaXRlYCwyKV0pO3RyeXtyPXRoaXMud2FzbVRyYW5zZm9ybWVyPy5pbml0KG4pfWNhdGNoKGMpe2lmKCJudW1iZXIiPT10eXBlb2YgYyl7bGV0IGU9IiI7Zm9yKGxldCB0PTA7dDw1MDA7Kyt0KWUrPVN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy53YXNtSW5zdGFuY2UuSEVBUDhbYyt0XSk7Y29uc29sZS5lcnJvcihlKX1lbHNlIGNvbnNvbGUuZXJyb3IoYyl9aWYoMCE9PXIpe2NvbnN0IGU9YEZhaWwgdG8gaW5pdCB3YXNtIHRyYW5zZm9ybWVyLCBlcnJvciBjb2RlID0gJHtyfWA7dGhyb3cgY29uc29sZS5lcnJvcihlKSxlfWlmKHRoaXMuaW50ZXJuYWxSZXNhbXBsZVN1cHBvcnRlZD10aGlzLndhc21UcmFuc2Zvcm1lcj8uZ2V0SW50ZXJuYWxSZXNhbXBsZVN1cHBvcnRlZCgpLCF0aGlzLmludGVybmFsUmVzYW1wbGVTdXBwb3J0ZWQpe2NvbnN0IGU9IkludGVybmFsIHJlc2FtcGxpbmcgbm90IHN1cHBvcnRlZCI7dGhyb3cgY29uc29sZS5lcnJvcihlKSxlfWNvbnNvbGUubG9nKCJOb2lzZSBzdXBwcmVzc2lvbiB0cmFuc2Zvcm1lciByZWFkeSIpfXNldEF1ZGlvT3B0aW9ucyhlLHQscixuLGMpe3RoaXMud2FzbVRyYW5zZm9ybWVyPy5zZXRBdWRpb09wdGlvbnMoZSx0LHIsbixjKX1lbmFibGUoKXt0aGlzLmlzRW5hYmxlZD0hMH1kaXNhYmxlKCl7dGhpcy5pc0VuYWJsZWQ9ITF9Z2V0TGF0ZW5jeSgpe3JldHVybiB0aGlzLmxhdGVuY3kudmFsdWUoKX1nZXRXYXNtTGF0ZW5jeU5zKCl7cmV0dXJuIHRoaXMud2FzbVRyYW5zZm9ybWVyPy5nZXRMYXRlbmN5TnMoKT8/MH1hc3luYyB0cmFuc2Zvcm1EZWJ1ZyhlLHQpe3RyeXtjb25zdCByPXBlcmZvcm1hbmNlLm5vdygpO2F3YWl0IHRoaXMudHJhbnNmb3JtQXVkaW9EYXRhKGUsdCksdGhpcy5sYXRlbmN5LnB1c2gocGVyZm9ybWFuY2Uubm93KCktcil9Y2F0Y2gocil7Y29uc29sZS5lcnJvcihyKX19YXN5bmMgdHJhbnNmb3JtQXVkaW9EYXRhKGUsdCl7aWYodGhpcy53YXNtVHJhbnNmb3JtZXJ8fHRoaXMuZW1pdCgid2FybmluZyIsInRyYW5zZm9ybWVyIG5vdCBpbml0aWFsaXplZCIpLHRoaXMuaXNFbmFibGVkJiZ0aGlzLndhc21UcmFuc2Zvcm1lcil0cnl7Y29uc3QgdD10aGlzLmdldEF1ZGlvRGF0YUFzRmxvYXQzMihlKSxuPXRoaXMuY29udmVydFR5cGVkQXJyYXkodCxJbnQxNkFycmF5LDMyNzY3KTt0aGlzLndhc21UcmFuc2Zvcm1lci5nZXRJbnB1dEZyYW1lKGUubnVtYmVyT2ZGcmFtZXMpLnNldChuKTtsZXQgYz0wO3RyeXtjPXRoaXMud2FzbVRyYW5zZm9ybWVyLnJ1bkFsZ29yaXRobShlLm51bWJlck9mRnJhbWVzLGUuc2FtcGxlUmF0ZSxlLm51bWJlck9mQ2hhbm5lbHMpfWNhdGNoKHIpe2lmKCJudW1iZXIiPT10eXBlb2Ygcil7bGV0IGU9IiI7Zm9yKGxldCB0PTA7dDw1MDA7Kyt0KWUrPVN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy53YXNtSW5zdGFuY2UuSEVBUDhbcit0XSk7Y29uc29sZS5lcnJvcihlKX1lbHNlIGNvbnNvbGUuZXJyb3Iocil9aWYoYz4wKXtjb25zdCB0PXRoaXMud2FzbVRyYW5zZm9ybWVyLmdldE91dHB1dEZyYW1lKCkuc2xpY2UoMCxjKSxyPXRoaXMuY29udmVydFR5cGVkQXJyYXkodCxGbG9hdDMyQXJyYXksMS8zMjc2Nykse3RpbWVzdGFtcDpuLHNhbXBsZVJhdGU6ZixudW1iZXJPZkNoYW5uZWxzOmh9PWU7ZT1uZXcgQXVkaW9EYXRhKHtkYXRhOnIsZm9ybWF0OiJmMzItcGxhbmFyIixudW1iZXJPZkNoYW5uZWxzOmgsbnVtYmVyT2ZGcmFtZXM6ci5sZW5ndGgsc2FtcGxlUmF0ZTpmLHRpbWVzdGFtcDpufSl9fWNhdGNoKHIpe2NvbnNvbGUuZXJyb3Iocil9dC5lbnF1ZXVlKGUpfWFzeW5jIGxvYWRNb2RlbChlLHQpe2lmKCF0aGlzLndhc21UcmFuc2Zvcm1lcilyZXR1cm47Y29uc3Qgcj1hd2FpdCBmZXRjaChlKSxuPWF3YWl0IHIuYXJyYXlCdWZmZXIoKSxjPW4uYnl0ZUxlbmd0aCxmPWBnZXRNb2RlbCR7dH1gLGg9dGhpcy53YXNtVHJhbnNmb3JtZXJbZl0oYyk7aWYoaCl7Y29uc3QgZT1uZXcgVWludDhBcnJheShuKTtoLnNldChlKX19Z2V0QXVkaW9EYXRhQXNGbG9hdDMyKGUpe3JldHVybiB0aGlzLmF1ZGlvRGF0YVRvVHlwZWRBcnJheShlLEZsb2F0MzJBcnJheSwiZjMyLXBsYW5hciIsMSl9YXVkaW9EYXRhVG9UeXBlZEFycmF5KGUsdCxyLG49ZS5udW1iZXJPZkNoYW5uZWxzKXtjb25zdCBjPW5ldyB0KGUubnVtYmVyT2ZGcmFtZXMqbik7Zm9yKGxldCBmPTA7ZjxuOysrZil7Y29uc3QgdD1lLm51bWJlck9mRnJhbWVzKmYsbj1jLnN1YmFycmF5KHQsdCtlLm51bWJlck9mRnJhbWVzKTtlLmNvcHlUbyhuLHtwbGFuZUluZGV4OmYsZm9ybWF0OnJ9KX1yZXR1cm4gY31jb252ZXJ0VHlwZWRBcnJheShlLHQscil7Y29uc3Qgbj1lLmxlbmd0aCxjPW5ldyB0KG4pO2ZvcihsZXQgZj0wO2Y8bjsrK2YpY1tmXT1lW2ZdKnI7cmV0dXJuIGN9aXNNb25vVGhyZWFkKGUpe2lmKGUuZGlzYWJsZVdhc21NdWx0aVRocmVhZClyZXR1cm4hMDt0cnl7aWYodm9pZCAwPT09bmV3IFNoYXJlZEFycmF5QnVmZmVyKDEwMjQpKXRocm93IG5ldyBFcnJvcigibm90IHN1cHBvcnRlZCIpfWNhdGNoKHQpe3JldHVybiB0aGlzLmVtaXQoIndhcm5pbmciLCJcbk11bHRpdGhyZWFkIGlzIG5vdCBhdmFpbGFibGUsIG5vaXNlLXN1cHByZXNpb24gaXMgbm93IHJ1bm5pbmcgb24gYSBzaW5nbGUgdGhyZWFkLlxuVGhpcyBpcyBpbXBhY3RpbmcgdGhlIHBlcmZvcm1hbmNlIGFuZCBpbmNyZWFzZSB0aGUgbGF0ZW5jeS5cblxuVG8gZW5hYmxlIG11bHRpdGhyZWFkLCB5b3UgbmVlZCB0byBzZXJ2ZSB0aGUgYXBwbGljYXRpb24gdmlhIGh0dHBzIHdpdGggdGhlc2UgaHR0cCBoZWFkZXJzIDpcbiAgIC0gQ3Jvc3MtT3JpZ2luLU9wZW5lci1Qb2xpY3k6IHNhbWUtb3JpZ2luXG4gICAtIENyb3NzLU9yaWdpbi1FbWJlZGRlci1Qb2xpY3k6IHJlcXVpcmUtY29ycC5cbk1vcmUgaW5mbzogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU2hhcmVkQXJyYXlCdWZmZXIjc2VjdXJpdHlfcmVxdWlyZW1lbnRzXG5cbllvdSBjYW4gZGlzYWJsZSB0aGlzIHdhcm5pbmcgYnkgZW5hYmxpbmcgZGlzYWJsZVdhc21NdWx0aVRocmVhZCB3aXRoaW4gdGhlIG5vaXNlU3VwcHJlc3Npb24gb3B0aW9ucy5cbiIpLCEwfXJldHVybiExfX1mdW5jdGlvbiBjcmVhdGVHbG9iYWxUaGlzVmFyaWFibGUoZSx0KXtnbG9iYWxUaGlzLnZvbmFnZXx8KGdsb2JhbFRoaXMudm9uYWdlPXt9KSxnbG9iYWxUaGlzLnZvbmFnZS53b3JrZXJpemVyfHwoZ2xvYmFsVGhpcy52b25hZ2Uud29ya2VyaXplcj17fSk7bGV0IHI9Z2xvYmFsVGhpcy52b25hZ2Uud29ya2VyaXplcjtyZXR1cm4gcltlXXx8KHJbZV09dCkscltlXX1jb25zdCBwZT1jcmVhdGVHbG9iYWxUaGlzVmFyaWFibGUoImdsb2JhbHMiLHt9KTt2YXIgd2U9KGU9PihlLklOSVQ9IklOSVQiLGUuRk9SV0FSRD0iRk9SV0FSRCIsZS5URVJNSU5BVEU9IlRFUk1JTkFURSIsZS5HTE9CQUxTX1NZTkM9IkdMT0JBTFNfU1lOQyIsZS5FVkVOVD0iRVZFTlQiLGUpKSh3ZXx8e30pO2Z1bmN0aW9uIHBvc3RDb21tYW5kKGUsdCl7Y29uc3R7aWQ6cix0eXBlOm59PWUsYz1BcnJheS5pc0FycmF5KHQpP3Q6W3RdO3Bvc3RNZXNzYWdlKHtpZDpyLHR5cGU6bixyZXN1bHQ6dH0sYy5maWx0ZXIoKGU9PmZ1bmN0aW9uIGlzVHJhbnNmZXJhYmxlKGUpe3JldHVybltJbWFnZUJpdG1hcCxSZWFkYWJsZVN0cmVhbSxXcml0YWJsZVN0cmVhbV0uc29tZSgodD0+ZSBpbnN0YW5jZW9mIHQpKX0oZSkpKSl9ZnVuY3Rpb24gaXNXb3JrZXIoKXtyZXR1cm4idW5kZWZpbmVkIiE9dHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlJiZzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGV9ZnVuY3Rpb24gY29weShlLHQpe2lmKEFycmF5LmlzQXJyYXkodCkpdC5zcGxpY2UoMCx0Lmxlbmd0aCk7ZWxzZSBpZigib2JqZWN0Ij09dHlwZW9mIHQpZm9yKGNvbnN0IHIgaW4gdClkZWxldGUgdFtyXTtmb3IoY29uc3QgciBpbiBlKUFycmF5LmlzQXJyYXkoZVtyXSk/KHRbcl09W10sY29weShlW3JdLHRbcl0pKToib2JqZWN0Ij09dHlwZW9mIGVbcl0/KHRbcl09e30sY29weShlW3JdLHRbcl0pKTp0W3JdPWVbcl19Y3JlYXRlR2xvYmFsVGhpc1ZhcmlhYmxlKCJ3b3JrZXJpemVkIix7fSk7Y29uc3QgdmU9bmV3IFdlYWtNYXAsRWU9bmV3IFdlYWtNYXAsVGU9bmV3IFdlYWtNYXAsQWU9U3ltYm9sKCJhbnlQcm9kdWNlciIpLE5lPVByb21pc2UucmVzb2x2ZSgpLCRlPVN5bWJvbCgibGlzdGVuZXJBZGRlZCIpLEllPVN5bWJvbCgibGlzdGVuZXJSZW1vdmVkIik7bGV0IERlPSExLGtlPSExO2Z1bmN0aW9uIGFzc2VydEV2ZW50TmFtZShlKXtpZigic3RyaW5nIiE9dHlwZW9mIGUmJiJzeW1ib2wiIT10eXBlb2YgZSYmIm51bWJlciIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoImBldmVudE5hbWVgIG11c3QgYmUgYSBzdHJpbmcsIHN5bWJvbCwgb3IgbnVtYmVyIil9ZnVuY3Rpb24gYXNzZXJ0TGlzdGVuZXIoZSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcigibGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uIil9ZnVuY3Rpb24gZ2V0TGlzdGVuZXJzKGUsdCl7Y29uc3Qgcj1FZS5nZXQoZSk7aWYoci5oYXModCkpcmV0dXJuIHIuZ2V0KHQpfWZ1bmN0aW9uIGdldEV2ZW50UHJvZHVjZXJzKGUsdCl7Y29uc3Qgcj0ic3RyaW5nIj09dHlwZW9mIHR8fCJzeW1ib2wiPT10eXBlb2YgdHx8Im51bWJlciI9PXR5cGVvZiB0P3Q6QWUsbj1UZS5nZXQoZSk7aWYobi5oYXMocikpcmV0dXJuIG4uZ2V0KHIpfWZ1bmN0aW9uIGl0ZXJhdG9yKGUsdCl7dD1BcnJheS5pc0FycmF5KHQpP3Q6W3RdO2xldCByPSExLGZsdXNoPSgpPT57fSxuPVtdO2NvbnN0IGM9e2VucXVldWUoZSl7bi5wdXNoKGUpLGZsdXNoKCl9LGZpbmlzaCgpe3I9ITAsZmx1c2goKX19O2Zvcihjb25zdCBmIG9mIHQpe2xldCB0PWdldEV2ZW50UHJvZHVjZXJzKGUsZik7aWYoIXQpe3Q9bmV3IFNldDtUZS5nZXQoZSkuc2V0KGYsdCl9dC5hZGQoYyl9cmV0dXJue2FzeW5jIG5leHQoKXtyZXR1cm4gbj8wPT09bi5sZW5ndGg/cj8obj12b2lkIDAsdGhpcy5uZXh0KCkpOihhd2FpdCBuZXcgUHJvbWlzZSgoZT0+e2ZsdXNoPWV9KSksdGhpcy5uZXh0KCkpOntkb25lOiExLHZhbHVlOmF3YWl0IG4uc2hpZnQoKX06e2RvbmU6ITB9fSxhc3luYyByZXR1cm4ocil7bj12b2lkIDA7Zm9yKGNvbnN0IG4gb2YgdCl7Y29uc3QgdD1nZXRFdmVudFByb2R1Y2VycyhlLG4pO2lmKHQmJih0LmRlbGV0ZShjKSwwPT09dC5zaXplKSl7VGUuZ2V0KGUpLmRlbGV0ZShuKX19cmV0dXJuIGZsdXNoKCksYXJndW1lbnRzLmxlbmd0aD4wP3tkb25lOiEwLHZhbHVlOmF3YWl0IHJ9Ontkb25lOiEwfX0sW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpe3JldHVybiB0aGlzfX19ZnVuY3Rpb24gZGVmYXVsdE1ldGhvZE5hbWVzT3JBc3NlcnQoZSl7aWYodm9pZCAwPT09ZSlyZXR1cm4gUmU7aWYoIUFycmF5LmlzQXJyYXkoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcigiYG1ldGhvZE5hbWVzYCBtdXN0IGJlIGFuIGFycmF5IG9mIHN0cmluZ3MiKTtmb3IoY29uc3QgdCBvZiBlKWlmKCFSZS5pbmNsdWRlcyh0KSl7aWYoInN0cmluZyIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoImBtZXRob2ROYW1lc2AgZWxlbWVudCBtdXN0IGJlIGEgc3RyaW5nIik7dGhyb3cgbmV3IEVycm9yKGAke3R9IGlzIG5vdCBFbWl0dGVyeSBtZXRob2RgKX1yZXR1cm4gZX1jb25zdCBpc01ldGFFdmVudD1lPT5lPT09JGV8fGU9PT1JZTtmdW5jdGlvbiBlbWl0TWV0YUV2ZW50KGUsdCxyKXtpZihpc01ldGFFdmVudCh0KSl0cnl7RGU9ITAsZS5lbWl0KHQscil9ZmluYWxseXtEZT0hMX19Y2xhc3MgRW1pdHRlcnl7c3RhdGljIG1peGluKGUsdCl7cmV0dXJuIHQ9ZGVmYXVsdE1ldGhvZE5hbWVzT3JBc3NlcnQodCkscj0+e2lmKCJmdW5jdGlvbiIhPXR5cGVvZiByKXRocm93IG5ldyBUeXBlRXJyb3IoImB0YXJnZXRgIG11c3QgYmUgZnVuY3Rpb24iKTtmb3IoY29uc3QgZSBvZiB0KWlmKHZvaWQgMCE9PXIucHJvdG90eXBlW2VdKXRocm93IG5ldyBFcnJvcihgVGhlIHByb3BlcnR5IFxgJHtlfVxgIGFscmVhZHkgZXhpc3RzIG9uIFxgdGFyZ2V0XGBgKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoci5wcm90b3R5cGUsZSx7ZW51bWVyYWJsZTohMSxnZXQ6ZnVuY3Rpb24gZ2V0RW1pdHRlcnlQcm9wZXJ0eSgpe3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxlLHtlbnVtZXJhYmxlOiExLHZhbHVlOm5ldyBFbWl0dGVyeX0pLHRoaXNbZV19fSk7Y29uc3QgZW1pdHRlcnlNZXRob2RDYWxsZXI9dD0+ZnVuY3Rpb24oLi4ucil7cmV0dXJuIHRoaXNbZV1bdF0oLi4ucil9O2Zvcihjb25zdCBlIG9mIHQpT2JqZWN0LmRlZmluZVByb3BlcnR5KHIucHJvdG90eXBlLGUse2VudW1lcmFibGU6ITEsdmFsdWU6ZW1pdHRlcnlNZXRob2RDYWxsZXIoZSl9KTtyZXR1cm4gcn19c3RhdGljIGdldCBpc0RlYnVnRW5hYmxlZCgpe3ZhciBlLHQ7aWYoIm9iamVjdCIhPXR5cGVvZihudWxsPT0oZT1nbG9iYWxUaGlzLnByb2Nlc3MpP3ZvaWQgMDplLmVudikpcmV0dXJuIGtlO2NvbnN0e2VudjpyfT1udWxsIT0odD1nbG9iYWxUaGlzLnByb2Nlc3MpP3Q6e2Vudjp7fX07cmV0dXJuImVtaXR0ZXJ5Ij09PXIuREVCVUd8fCIqIj09PXIuREVCVUd8fGtlfXN0YXRpYyBzZXQgaXNEZWJ1Z0VuYWJsZWQoZSl7a2U9ZX1jb25zdHJ1Y3RvcihlPXt9KXt2YXIgdDt2ZS5zZXQodGhpcyxuZXcgU2V0KSxFZS5zZXQodGhpcyxuZXcgTWFwKSxUZS5zZXQodGhpcyxuZXcgTWFwKSxUZS5nZXQodGhpcykuc2V0KEFlLG5ldyBTZXQpLHRoaXMuZGVidWc9bnVsbCE9KHQ9ZS5kZWJ1Zyk/dDp7fSx2b2lkIDA9PT10aGlzLmRlYnVnLmVuYWJsZWQmJih0aGlzLmRlYnVnLmVuYWJsZWQ9ITEpLHRoaXMuZGVidWcubG9nZ2VyfHwodGhpcy5kZWJ1Zy5sb2dnZXI9KGUsdCxyLG4pPT57dHJ5e249SlNPTi5zdHJpbmdpZnkobil9Y2F0Y2h7bj1gT2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBrZXlzIGZhaWxlZCB0byBzdHJpbmdpZnk6ICR7T2JqZWN0LmtleXMobikuam9pbigiLCIpfWB9InN5bWJvbCIhPXR5cGVvZiByJiYibnVtYmVyIiE9dHlwZW9mIHJ8fChyPXIudG9TdHJpbmcoKSk7Y29uc3QgYz1uZXcgRGF0ZSxmPWAke2MuZ2V0SG91cnMoKX06JHtjLmdldE1pbnV0ZXMoKX06JHtjLmdldFNlY29uZHMoKX0uJHtjLmdldE1pbGxpc2Vjb25kcygpfWA7Y29uc29sZS5sb2coYFske2Z9XVtlbWl0dGVyeToke2V9XVske3R9XSBFdmVudCBOYW1lOiAke3J9XG5cdGRhdGE6ICR7bn1gKX0pfWxvZ0lmRGVidWdFbmFibGVkKGUsdCxyKXsoRW1pdHRlcnkuaXNEZWJ1Z0VuYWJsZWR8fHRoaXMuZGVidWcuZW5hYmxlZCkmJnRoaXMuZGVidWcubG9nZ2VyKGUsdGhpcy5kZWJ1Zy5uYW1lLHQscil9b24oZSx0KXthc3NlcnRMaXN0ZW5lcih0KSxlPUFycmF5LmlzQXJyYXkoZSk/ZTpbZV07Zm9yKGNvbnN0IHIgb2YgZSl7YXNzZXJ0RXZlbnROYW1lKHIpO2xldCBlPWdldExpc3RlbmVycyh0aGlzLHIpO2lmKCFlKXtlPW5ldyBTZXQ7RWUuZ2V0KHRoaXMpLnNldChyLGUpfWUuYWRkKHQpLHRoaXMubG9nSWZEZWJ1Z0VuYWJsZWQoInN1YnNjcmliZSIscix2b2lkIDApLGlzTWV0YUV2ZW50KHIpfHxlbWl0TWV0YUV2ZW50KHRoaXMsJGUse2V2ZW50TmFtZTpyLGxpc3RlbmVyOnR9KX1yZXR1cm4gdGhpcy5vZmYuYmluZCh0aGlzLGUsdCl9b2ZmKGUsdCl7YXNzZXJ0TGlzdGVuZXIodCksZT1BcnJheS5pc0FycmF5KGUpP2U6W2VdO2Zvcihjb25zdCByIG9mIGUpe2Fzc2VydEV2ZW50TmFtZShyKTtjb25zdCBlPWdldExpc3RlbmVycyh0aGlzLHIpO2lmKGUmJihlLmRlbGV0ZSh0KSwwPT09ZS5zaXplKSl7RWUuZ2V0KHRoaXMpLmRlbGV0ZShyKX10aGlzLmxvZ0lmRGVidWdFbmFibGVkKCJ1bnN1YnNjcmliZSIscix2b2lkIDApLGlzTWV0YUV2ZW50KHIpfHxlbWl0TWV0YUV2ZW50KHRoaXMsSWUse2V2ZW50TmFtZTpyLGxpc3RlbmVyOnR9KX19b25jZShlKXtsZXQgdDtjb25zdCByPW5ldyBQcm9taXNlKChyPT57dD10aGlzLm9uKGUsKGU9Pnt0KCkscihlKX0pKX0pKTtyZXR1cm4gci5vZmY9dCxyfWV2ZW50cyhlKXtlPUFycmF5LmlzQXJyYXkoZSk/ZTpbZV07Zm9yKGNvbnN0IHQgb2YgZSlhc3NlcnRFdmVudE5hbWUodCk7cmV0dXJuIGl0ZXJhdG9yKHRoaXMsZSl9YXN5bmMgZW1pdChlLHQpe3ZhciByO2lmKGFzc2VydEV2ZW50TmFtZShlKSxpc01ldGFFdmVudChlKSYmIURlKXRocm93IG5ldyBUeXBlRXJyb3IoImBldmVudE5hbWVgIGNhbm5vdCBiZSBtZXRhIGV2ZW50IGBsaXN0ZW5lckFkZGVkYCBvciBgbGlzdGVuZXJSZW1vdmVkYCIpO3RoaXMubG9nSWZEZWJ1Z0VuYWJsZWQoImVtaXQiLGUsdCksZnVuY3Rpb24gZW5xdWV1ZVByb2R1Y2VycyhlLHQscil7Y29uc3Qgbj1UZS5nZXQoZSk7aWYobi5oYXModCkpZm9yKGNvbnN0IGMgb2Ygbi5nZXQodCkpYy5lbnF1ZXVlKHIpO2lmKG4uaGFzKEFlKSl7Y29uc3QgZT1Qcm9taXNlLmFsbChbdCxyXSk7Zm9yKGNvbnN0IHQgb2Ygbi5nZXQoQWUpKXQuZW5xdWV1ZShlKX19KHRoaXMsZSx0KTtjb25zdCBuPW51bGwhPShyPWdldExpc3RlbmVycyh0aGlzLGUpKT9yOm5ldyBTZXQsYz12ZS5nZXQodGhpcyksZj1bLi4ubl0saD1pc01ldGFFdmVudChlKT9bXTpbLi4uY107YXdhaXQgTmUsYXdhaXQgUHJvbWlzZS5hbGwoWy4uLmYubWFwKChhc3luYyBlPT57aWYobi5oYXMoZSkpcmV0dXJuIGUodCl9KSksLi4uaC5tYXAoKGFzeW5jIHI9PntpZihjLmhhcyhyKSlyZXR1cm4gcihlLHQpfSkpXSl9YXN5bmMgZW1pdFNlcmlhbChlLHQpe3ZhciByO2lmKGFzc2VydEV2ZW50TmFtZShlKSxpc01ldGFFdmVudChlKSYmIURlKXRocm93IG5ldyBUeXBlRXJyb3IoImBldmVudE5hbWVgIGNhbm5vdCBiZSBtZXRhIGV2ZW50IGBsaXN0ZW5lckFkZGVkYCBvciBgbGlzdGVuZXJSZW1vdmVkYCIpO3RoaXMubG9nSWZEZWJ1Z0VuYWJsZWQoImVtaXRTZXJpYWwiLGUsdCk7Y29uc3Qgbj1udWxsIT0ocj1nZXRMaXN0ZW5lcnModGhpcyxlKSk/cjpuZXcgU2V0LGM9dmUuZ2V0KHRoaXMpLGY9Wy4uLm5dLGg9Wy4uLmNdO2F3YWl0IE5lO2Zvcihjb25zdCB1IG9mIGYpbi5oYXModSkmJmF3YWl0IHUodCk7Zm9yKGNvbnN0IHUgb2YgaCljLmhhcyh1KSYmYXdhaXQgdShlLHQpfW9uQW55KGUpe3JldHVybiBhc3NlcnRMaXN0ZW5lcihlKSx0aGlzLmxvZ0lmRGVidWdFbmFibGVkKCJzdWJzY3JpYmVBbnkiLHZvaWQgMCx2b2lkIDApLHZlLmdldCh0aGlzKS5hZGQoZSksZW1pdE1ldGFFdmVudCh0aGlzLCRlLHtsaXN0ZW5lcjplfSksdGhpcy5vZmZBbnkuYmluZCh0aGlzLGUpfWFueUV2ZW50KCl7cmV0dXJuIGl0ZXJhdG9yKHRoaXMpfW9mZkFueShlKXthc3NlcnRMaXN0ZW5lcihlKSx0aGlzLmxvZ0lmRGVidWdFbmFibGVkKCJ1bnN1YnNjcmliZUFueSIsdm9pZCAwLHZvaWQgMCksZW1pdE1ldGFFdmVudCh0aGlzLEllLHtsaXN0ZW5lcjplfSksdmUuZ2V0KHRoaXMpLmRlbGV0ZShlKX1jbGVhckxpc3RlbmVycyhlKXtlPUFycmF5LmlzQXJyYXkoZSk/ZTpbZV07Zm9yKGNvbnN0IHQgb2YgZSlpZih0aGlzLmxvZ0lmRGVidWdFbmFibGVkKCJjbGVhciIsdCx2b2lkIDApLCJzdHJpbmciPT10eXBlb2YgdHx8InN5bWJvbCI9PXR5cGVvZiB0fHwibnVtYmVyIj09dHlwZW9mIHQpe2NvbnN0IGU9Z2V0TGlzdGVuZXJzKHRoaXMsdCk7ZSYmZS5jbGVhcigpO2NvbnN0IHI9Z2V0RXZlbnRQcm9kdWNlcnModGhpcyx0KTtpZihyKXtmb3IoY29uc3QgZSBvZiByKWUuZmluaXNoKCk7ci5jbGVhcigpfX1lbHNle3ZlLmdldCh0aGlzKS5jbGVhcigpO2Zvcihjb25zdFtlLHRdb2YgRWUuZ2V0KHRoaXMpLmVudHJpZXMoKSl0LmNsZWFyKCksRWUuZ2V0KHRoaXMpLmRlbGV0ZShlKTtmb3IoY29uc3RbZSx0XW9mIFRlLmdldCh0aGlzKS5lbnRyaWVzKCkpe2Zvcihjb25zdCBlIG9mIHQpZS5maW5pc2goKTt0LmNsZWFyKCksVGUuZ2V0KHRoaXMpLmRlbGV0ZShlKX19fWxpc3RlbmVyQ291bnQoZSl7dmFyIHQscixuLGMsZixoO2U9QXJyYXkuaXNBcnJheShlKT9lOltlXTtsZXQgdT0wO2Zvcihjb25zdCBkIG9mIGUpaWYoInN0cmluZyIhPXR5cGVvZiBkKXt2b2lkIDAhPT1kJiZhc3NlcnRFdmVudE5hbWUoZCksdSs9dmUuZ2V0KHRoaXMpLnNpemU7Zm9yKGNvbnN0IGUgb2YgRWUuZ2V0KHRoaXMpLnZhbHVlcygpKXUrPWUuc2l6ZTtmb3IoY29uc3QgZSBvZiBUZS5nZXQodGhpcykudmFsdWVzKCkpdSs9ZS5zaXplfWVsc2UgdSs9dmUuZ2V0KHRoaXMpLnNpemUrKG51bGwhPShyPW51bGw9PSh0PWdldExpc3RlbmVycyh0aGlzLGQpKT92b2lkIDA6dC5zaXplKT9yOjApKyhudWxsIT0oYz1udWxsPT0obj1nZXRFdmVudFByb2R1Y2Vycyh0aGlzLGQpKT92b2lkIDA6bi5zaXplKT9jOjApKyhudWxsIT0oaD1udWxsPT0oZj1nZXRFdmVudFByb2R1Y2Vycyh0aGlzKSk/dm9pZCAwOmYuc2l6ZSk/aDowKTtyZXR1cm4gdX1iaW5kTWV0aG9kcyhlLHQpe2lmKCJvYmplY3QiIT10eXBlb2YgZXx8bnVsbD09PWUpdGhyb3cgbmV3IFR5cGVFcnJvcigiYHRhcmdldGAgbXVzdCBiZSBhbiBvYmplY3QiKTt0PWRlZmF1bHRNZXRob2ROYW1lc09yQXNzZXJ0KHQpO2Zvcihjb25zdCByIG9mIHQpe2lmKHZvaWQgMCE9PWVbcl0pdGhyb3cgbmV3IEVycm9yKGBUaGUgcHJvcGVydHkgXGAke3J9XGAgYWxyZWFkeSBleGlzdHMgb24gXGB0YXJnZXRcYGApO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIse2VudW1lcmFibGU6ITEsdmFsdWU6dGhpc1tyXS5iaW5kKHRoaXMpfSl9fX1jb25zdCBSZT1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhFbWl0dGVyeS5wcm90b3R5cGUpLmZpbHRlcigoZT0+ImNvbnN0cnVjdG9yIiE9PWUpKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoRW1pdHRlcnksImxpc3RlbmVyQWRkZWQiLHt2YWx1ZTokZSx3cml0YWJsZTohMSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFbWl0dGVyeSwibGlzdGVuZXJSZW1vdmVkIix7dmFsdWU6SWUsd3JpdGFibGU6ITEsZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITF9KTtjb25zdCB4ZT1jcmVhdGVHbG9iYWxUaGlzVmFyaWFibGUoInJlZ2lzdGVyZWRXb3JrZXJzIix7fSk7aXNXb3JrZXIoKSYmZnVuY3Rpb24gaW5pdFdvcmtlcigpe2NvbnN0IGU9e307b25tZXNzYWdlPWFzeW5jIHQ9Pntjb25zdCByPXQuZGF0YTtzd2l0Y2goci50eXBlKXtjYXNlIHdlLklOSVQ6IWZ1bmN0aW9uIGhhbmRsZUNvbW1hbmRJbml0KGUsdCl7aWYoIWUuYXJncyl0aHJvdyJNaXNzaW5nIGNsYXNzTmFtZSB3aGlsZSBpbml0aWFsaXppbmcgd29ya2VyIjtjb25zdFtyLG5dPWUuYXJncyxjPXhlW3JdO2lmKCFjKXRocm93YHVua25vd24gd29ya2VyIGNsYXNzICR7cn1gO3QuaW5zdGFuY2U9bmV3IGMoZS5hcmdzLnNsaWNlKDEpKSxjb3B5KG4scGUpLGZ1bmN0aW9uIGlzSW5zdGFuY2VPZkVtaXR0ZXJ5KGUpe3JldHVybiBlLm9uQW55JiZlLmVtaXR9KHQuaW5zdGFuY2UpJiZ0Lmluc3RhbmNlLm9uQW55KCgoZSx0KT0+e3Bvc3RDb21tYW5kKHt0eXBlOndlLkVWRU5UfSx7bmFtZTplLGRhdGE6dH0pfSkpLHBvc3RDb21tYW5kKGUsdm9pZCAwIT09dHlwZW9mIHQuaW5zdGFuY2UpfShyLGUpO2JyZWFrO2Nhc2Ugd2UuRk9SV0FSRDohYXN5bmMgZnVuY3Rpb24gaGFuZGxlQ29tbWFuZEZvcndhcmQoZSx0KXtjb25zdHtmdW5jdGlvbk5hbWU6cixhcmdzOm59PWU7aWYoIXQuaW5zdGFuY2UpdGhyb3ciaW5zdGFuY2Ugbm90IGluaXRpYWxpemVkIjtpZighcil0aHJvdyJtaXNzaW5nIGZ1bmN0aW9uIG5hbWUgdG8gY2FsbCI7aWYoIXQuaW5zdGFuY2Vbcl0pdGhyb3dgdW5kZWZpbmVkIGZ1bmN0aW9uIFske3J9XSBpbiBjbGFzcyAke3QuaW5zdGFuY2UuY29uc3RydWN0b3Iud29ya2VySWR9YDtwb3N0Q29tbWFuZChlLGF3YWl0IHQuaW5zdGFuY2Vbcl0oLi4ubnVsbCE9bj9uOltdKSl9KHIsZSk7YnJlYWs7Y2FzZSB3ZS5URVJNSU5BVEU6IWFzeW5jIGZ1bmN0aW9uIGhhbmRsZUNvbW1hbmRUZXJtaW5hdGUoZSx0KXtjb25zdHthcmdzOnJ9PWU7aWYoIXQuaW5zdGFuY2UpdGhyb3ciaW5zdGFuY2Ugbm90IGluaXRpYWxpemVkIjtsZXQgbjt0Lmluc3RhbmNlLnRlcm1pbmF0ZSYmKG49YXdhaXQgdC5pbnN0YW5jZS50ZXJtaW5hdGUoLi4ubnVsbCE9cj9yOltdKSkscG9zdENvbW1hbmQoZSxuKX0ocixlKTticmVhaztjYXNlIHdlLkdMT0JBTFNfU1lOQzohZnVuY3Rpb24gaGFuZGxlQ29tbWFuZEdsb2JhbHNTeW5jKGUpe2lmKCFlLmFyZ3MpdGhyb3ciTWlzc2luZyBnbG9iYWxzIHdoaWxlIHN5bmNpbmciO2NvcHkoZS5hcmdzWzBdLHBlKSxwb3N0Q29tbWFuZChlLHt9KX0ocil9fX0oKTshZnVuY3Rpb24gcmVnaXN0ZXJXb3JrZXIoZSx0KXt0LndvcmtlcklkPWUsaXNXb3JrZXIoKSYmKHhlW3Qud29ya2VySWRdPXQpfSgiUHJvY2Vzc29yV29ya2VyIixjbGFzcyBfUHJvY2Vzc29yV29ya2VyIGV4dGVuZHMgYWV7Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpLHRoaXMucHJvY2Vzc29yPW5ldyBPZX1hc3luYyBpbml0KGU9e30pe3RoaXMudHJhbnNmb3JtZXI9bmV3IE5vaXNlU3VwcHJlc3Npb25UcmFuc2Zvcm1lcix0aGlzLnByb2Nlc3Nvci5vbkFueSgoKGUsdCk9PnRoaXMuZW1pdChlLHQpKSksdGhpcy50cmFuc2Zvcm1lci5vbkFueSgoKGUsdCk9PnRoaXMuZW1pdChlLHQpKSksYXdhaXQgdGhpcy50cmFuc2Zvcm1lci5pbml0KGUpLGF3YWl0IHRoaXMucHJvY2Vzc29yLnNldFRyYW5zZm9ybWVycyhbdGhpcy50cmFuc2Zvcm1lcl0pfXRyYW5zZm9ybShlLHQpe3RoaXMucHJvY2Vzc29yLnRyYW5zZm9ybShlLHQpfXNldEF1ZGlvT3B0aW9ucyhlLHQscixuLGMpe3RoaXMudHJhbnNmb3JtZXI/LnNldEF1ZGlvT3B0aW9ucyhlLHQscixuLGMpfWVuYWJsZSgpe3RoaXMudHJhbnNmb3JtZXI/LmVuYWJsZSgpfWRpc2FibGUoKXt0aGlzLnRyYW5zZm9ybWVyPy5kaXNhYmxlKCl9YXN5bmMgdGVybWluYXRlKCl7YXdhaXQgdGhpcy5wcm9jZXNzb3IuZGVzdHJveSgpfWdldExhdGVuY3koKXtyZXR1cm4gdGhpcy50cmFuc2Zvcm1lcj8uZ2V0TGF0ZW5jeSgpPz8wfWdldFdhc21MYXRlbmN5TnMoKXtyZXR1cm4gdGhpcy50cmFuc2Zvcm1lcj8uZ2V0V2FzbUxhdGVuY3lOcygpPz8wfX0pfSgpOwo=",Be="undefined"!=typeof window&&window.Blob&&new Blob([atob(we)],{type:"text/javascript;charset=utf-8"});function WorkerWrapper(){let e;try{if(e=Be&&(window.URL||window.webkitURL).createObjectURL(Be),!e)throw"";return new Worker(e)}catch(t){return new Worker("data:application/javascript;base64,"+we)}finally{e&&(window.URL||window.webkitURL).revokeObjectURL(e)}}class ProcessorMain extends Ze{constructor(){super(...arguments),this.isEnabled=!0}async init(e={}){await this.startWorker(e)}async enable(){this.isEnabled=!0,await(this.worker?.enable())}async disable(){this.isEnabled=!1,await(this.worker?.disable())}async transform(e,t){await this.startWorker(),await(this.worker?.transform(e,t))}async destroy(){await(this.worker?.terminate()),this.worker=void 0}async setAudioOptions(e,t,n,c,r){await(this.worker?.setAudioOptions(e,t,n,c,r))}async getLatency(){return this.worker?.getLatency()??0}async getWasmLatencyNs(){return this.worker?.getWasmLatencyNs()??0}async startWorker(e={}){this.worker||(this.worker=await workerize(Ue,WorkerWrapper),this.worker.onAny(((e,t)=>this.emit(e,t))),await this.worker.init(e),this.isEnabled||await this.worker.disable())}async close(){await(this.worker?.terminate())}}class VonageNoiseSuppression extends Ze{async init(e={}){this.worker=new ProcessorMain,this.worker.onAny(((e,t)=>this.emit(e,t))),await this.worker.init(e),this.connector=new Fe(this.worker)}getConnector(){return this.connector}async close(){await(this.worker?.close())}async enable(){await(this.worker?.enable())}async disable(){await(this.worker?.disable())}async getLatency(){return this.worker?.getLatency()??0}async getWasmLatencyNs(){return this.worker?.getWasmLatencyNs()??0}}e.NoiseSuppressionTransformer=NoiseSuppressionTransformer,e.VonageNoiseSuppression=VonageNoiseSuppression,e.createVonageNoiseSuppression=function createVonageNoiseSuppression(){return new VonageNoiseSuppression},Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
