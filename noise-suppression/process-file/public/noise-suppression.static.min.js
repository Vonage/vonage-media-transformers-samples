let createWasmMonoInstance;var Module=(()=>{var c=location.href;return function(t){var e,n;(t=void 0!==(t=t||{})?t:{}).ready=new Promise((function(c,t){e=c,n=t}));var r,o,u,M=Object.assign({},t),ll=[],cl="./this.program",quit_=(c,t)=>{throw t},tl="object"==typeof window,Zl="function"==typeof importScripts,dl=("object"==typeof process&&"object"==typeof process.versions&&process.versions.node,"");(tl||Zl)&&(Zl?dl=self.location.href:"undefined"!=typeof document&&document.currentScript&&(dl=document.currentScript.src),c&&(dl=c),dl=0!==dl.indexOf("blob:")?dl.substr(0,dl.replace(/[?#].*/,"").lastIndexOf("/")+1):"",r=c=>{var t=new XMLHttpRequest;return t.open("GET",c,!1),t.send(null),t.responseText},Zl&&(u=c=>{var t=new XMLHttpRequest;return t.open("GET",c,!1),t.responseType="arraybuffer",t.send(null),new Uint8Array(t.response)}),o=(c,t,e)=>{var n=new XMLHttpRequest;n.open("GET",c,!0),n.responseType="arraybuffer",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):e()},n.onerror=e,n.send(null)});var el=t.print||console.log.bind(console),nl=t.printErr||console.warn.bind(console);Object.assign(t,M),M=null,t.arguments&&(ll=t.arguments),t.thisProgram&&(cl=t.thisProgram),t.quit&&(quit_=t.quit);var bl,ml=0,setTempRet0=c=>{ml=c};t.wasmBinary&&(bl=t.wasmBinary);var al,il=t.noExitRuntime||!1;"object"!=typeof WebAssembly&&abort("no native wasm support detected");var rl=!1;function assert(c,t){c||abort(t)}var Xl="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function UTF8ArrayToString(c,t,e){for(var n=t+e,r=t;c[r]&&!(r>=n);)++r;if(r-t>16&&c.buffer&&Xl)return Xl.decode(c.subarray(t,r));for(var o="";t<r;){var u=c[t++];if(128&u){var M=63&c[t++];if(192!=(224&u)){var ll=63&c[t++];if((u=224==(240&u)?(15&u)<<12|M<<6|ll:(7&u)<<18|M<<12|ll<<6|63&c[t++])<65536)o+=String.fromCharCode(u);else{var cl=u-65536;o+=String.fromCharCode(55296|cl>>10,56320|1023&cl)}}else o+=String.fromCharCode((31&u)<<6|M)}else o+=String.fromCharCode(u)}return o}function UTF8ToString(c,t){return c?UTF8ArrayToString(Vl,c,t):""}function stringToUTF8Array(c,t,e,n){if(!(n>0))return 0;for(var r=e,o=e+n-1,u=0;u<c.length;++u){var M=c.charCodeAt(u);if(M>=55296&&M<=57343)M=65536+((1023&M)<<10)|1023&c.charCodeAt(++u);if(M<=127){if(e>=o)break;t[e++]=M}else if(M<=2047){if(e+1>=o)break;t[e++]=192|M>>6,t[e++]=128|63&M}else if(M<=65535){if(e+2>=o)break;t[e++]=224|M>>12,t[e++]=128|M>>6&63,t[e++]=128|63&M}else{if(e+3>=o)break;t[e++]=240|M>>18,t[e++]=128|M>>12&63,t[e++]=128|M>>6&63,t[e++]=128|63&M}}return t[e]=0,e-r}function lengthBytesUTF8(c){for(var t=0,e=0;e<c.length;++e){var n=c.charCodeAt(e);n>=55296&&n<=57343&&(n=65536+((1023&n)<<10)|1023&c.charCodeAt(++e)),n<=127?++t:t+=n<=2047?2:n<=65535?3:4}return t}var Wl,ol,Vl,Gl,ul,yl,sl,hl,Rl,pl="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0;function UTF16ToString(c,t){for(var e=c,n=e>>1,r=n+t/2;!(n>=r)&&ul[n];)++n;if((e=n<<1)-c>32&&pl)return pl.decode(Vl.subarray(c,e));for(var o="",u=0;!(u>=t/2);++u){var M=Gl[c+2*u>>1];if(0==M)break;o+=String.fromCharCode(M)}return o}function stringToUTF16(c,t,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var n=t,r=(e-=2)<2*c.length?e/2:c.length,o=0;o<r;++o){var u=c.charCodeAt(o);Gl[t>>1]=u,t+=2}return Gl[t>>1]=0,t-n}function lengthBytesUTF16(c){return 2*c.length}function UTF32ToString(c,t){for(var e=0,n="";!(e>=t/4);){var r=yl[c+4*e>>2];if(0==r)break;if(++e,r>=65536){var o=r-65536;n+=String.fromCharCode(55296|o>>10,56320|1023&o)}else n+=String.fromCharCode(r)}return n}function stringToUTF32(c,t,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var n=t,r=n+e-4,o=0;o<c.length;++o){var u=c.charCodeAt(o);if(u>=55296&&u<=57343)u=65536+((1023&u)<<10)|1023&c.charCodeAt(++o);if(yl[t>>2]=u,(t+=4)+4>r)break}return yl[t>>2]=0,t-n}function lengthBytesUTF32(c){for(var t=0,e=0;e<c.length;++e){var n=c.charCodeAt(e);n>=55296&&n<=57343&&++e,t+=4}return t}function updateGlobalBufferAndViews(c){Wl=c,t.HEAP8=ol=new Int8Array(c),t.HEAP16=Gl=new Int16Array(c),t.HEAP32=yl=new Int32Array(c),t.HEAPU8=Vl=new Uint8Array(c),t.HEAPU16=ul=new Uint16Array(c),t.HEAPU32=sl=new Uint32Array(c),t.HEAPF32=hl=new Float32Array(c),t.HEAPF64=Rl=new Float64Array(c)}t.INITIAL_MEMORY;var Yl,Fl=[],Jl=[],Il=[],Nl=[],Hl=0;function keepRuntimeAlive(){return il||Hl>0}var vl=0,fl=null,kl=null;function addRunDependency(c){vl++,t.monitorRunDependencies&&t.monitorRunDependencies(vl)}function removeRunDependency(c){if(vl--,t.monitorRunDependencies&&t.monitorRunDependencies(vl),0==vl&&(null!==fl&&(clearInterval(fl),fl=null),kl)){var e=kl;kl=null,e()}}function abort(c){t.onAbort&&t.onAbort(c),nl(c="Aborted("+c+")"),rl=!0,1,c+=". Build with -sASSERTIONS for more info.";var e=new WebAssembly.RuntimeError(c);throw n(e),e}var Ul,gl,Tl,Kl,Bl="data:application/octet-stream;base64,";function isDataURI(c){return c.startsWith(Bl)}function getBinary(c){try{if(c==Ul&&bl)return new Uint8Array(bl);if(u)return u(c);throw"both async and sync fetching of the wasm failed"}catch(c){abort(c)}}function callRuntimeCallbacks(c){for(;c.length>0;){var e=c.shift();if("function"!=typeof e){var n=e.func;"number"==typeof n?void 0===e.arg?getWasmTableEntry(n)():getWasmTableEntry(n)(e.arg):n(void 0===e.arg?null:e.arg)}else e(t)}}t.locateFile?isDataURI(Ul="main-bin-mono.wasm")||(gl=Ul,Ul=t.locateFile?t.locateFile(gl,dl):dl+gl):Ul=new URL("main-bin-mono.wasm",location.href).toString();var zl=[];function getWasmTableEntry(c){var t=zl[c];return t||(c>=zl.length&&(zl.length=c+1),zl[c]=t=Yl.get(c)),t}var Sl=[];function exception_addRef(c){c.add_ref()}var wl=0;function ExceptionInfo(c){this.excPtr=c,this.ptr=c-24,this.set_type=function(c){sl[this.ptr+4>>2]=c},this.get_type=function(){return sl[this.ptr+4>>2]},this.set_destructor=function(c){sl[this.ptr+8>>2]=c},this.get_destructor=function(){return sl[this.ptr+8>>2]},this.set_refcount=function(c){yl[this.ptr>>2]=c},this.set_caught=function(c){c=c?1:0,ol[this.ptr+12>>0]=c},this.get_caught=function(){return 0!=ol[this.ptr+12>>0]},this.set_rethrown=function(c){c=c?1:0,ol[this.ptr+13>>0]=c},this.get_rethrown=function(){return 0!=ol[this.ptr+13>>0]},this.init=function(c,t){this.set_adjusted_ptr(0),this.set_type(c),this.set_destructor(t),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){var c=yl[this.ptr>>2];yl[this.ptr>>2]=c+1},this.release_ref=function(){var c=yl[this.ptr>>2];return yl[this.ptr>>2]=c-1,1===c},this.set_adjusted_ptr=function(c){sl[this.ptr+16>>2]=c},this.get_adjusted_ptr=function(){return sl[this.ptr+16>>2]},this.get_exception_ptr=function(){if(vc(this.get_type()))return sl[this.excPtr>>2];var c=this.get_adjusted_ptr();return 0!==c?c:this.excPtr}}function ___cxa_free_exception(c){return hc(new ExceptionInfo(c).ptr)}function exception_decRef(c){if(c.release_ref()&&!c.get_rethrown()){var t=c.get_destructor();t&&getWasmTableEntry(t)(c.excPtr),___cxa_free_exception(c.excPtr)}}var xl=0;function ___cxa_rethrow(){var c=Sl.pop();c||abort("no exception to throw");var t=c.excPtr;throw c.get_rethrown()||(Sl.push(c),c.set_rethrown(!0),c.set_caught(!1),wl++),xl=t,t}var Ll={isAbs:c=>"/"===c.charAt(0),splitPath:c=>/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(c).slice(1),normalizeArray:(c,t)=>{for(var e=0,n=c.length-1;n>=0;n--){var r=c[n];"."===r?c.splice(n,1):".."===r?(c.splice(n,1),e++):e&&(c.splice(n,1),e--)}if(t)for(;e;e--)c.unshift("..");return c},normalize:c=>{var t=Ll.isAbs(c),e="/"===c.substr(-1);return c=Ll.normalizeArray(c.split("/").filter((c=>!!c)),!t).join("/"),c||t||(c="."),c&&e&&(c+="/"),(t?"/":"")+c},dirname:c=>{var t=Ll.splitPath(c),e=t[0],n=t[1];return e||n?(n&&(n=n.substr(0,n.length-1)),e+n):"."},basename:c=>{if("/"===c)return"/";var t=(c=(c=Ll.normalize(c)).replace(/\/$/,"")).lastIndexOf("/");return-1===t?c:c.substr(t+1)},join:function(){var c=Array.prototype.slice.call(arguments,0);return Ll.normalize(c.join("/"))},join2:(c,t)=>Ll.normalize(c+"/"+t)};function getRandomDevice(){if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues){var c=new Uint8Array(1);return function(){return crypto.getRandomValues(c),c[0]}}return function(){abort("randomDevice")}}var Cl={resolve:function(){for(var c="",t=!1,e=arguments.length-1;e>=-1&&!t;e--){var n=e>=0?arguments[e]:jl.cwd();if("string"!=typeof n)throw new TypeError("Arguments to path.resolve must be strings");if(!n)return"";c=n+"/"+c,t=Ll.isAbs(n)}return c=Ll.normalizeArray(c.split("/").filter((c=>!!c)),!t).join("/"),(t?"/":"")+c||"."},relative:(c,t)=>{function trim(c){for(var t=0;t<c.length&&""===c[t];t++);for(var e=c.length-1;e>=0&&""===c[e];e--);return t>e?[]:c.slice(t,e-t+1)}c=Cl.resolve(c).substr(1),t=Cl.resolve(t).substr(1);for(var e=trim(c.split("/")),n=trim(t.split("/")),r=Math.min(e.length,n.length),o=r,u=0;u<r;u++)if(e[u]!==n[u]){o=u;break}var M=[];for(u=o;u<e.length;u++)M.push("..");return(M=M.concat(n.slice(o))).join("/")}},El={ttys:[],init:function(){},shutdown:function(){},register:function(c,t){El.ttys[c]={input:[],output:[],ops:t},jl.registerDevice(c,El.stream_ops)},stream_ops:{open:function(c){var t=El.ttys[c.node.rdev];if(!t)throw new jl.ErrnoError(43);c.tty=t,c.seekable=!1},close:function(c){c.tty.ops.flush(c.tty)},flush:function(c){c.tty.ops.flush(c.tty)},read:function(c,t,e,n,r){if(!c.tty||!c.tty.ops.get_char)throw new jl.ErrnoError(60);for(var o=0,u=0;u<n;u++){var M;try{M=c.tty.ops.get_char(c.tty)}catch(c){throw new jl.ErrnoError(29)}if(void 0===M&&0===o)throw new jl.ErrnoError(6);if(null==M)break;o++,t[e+u]=M}return o&&(c.node.timestamp=Date.now()),o},write:function(c,t,e,n,r){if(!c.tty||!c.tty.ops.put_char)throw new jl.ErrnoError(60);try{for(var o=0;o<n;o++)c.tty.ops.put_char(c.tty,t[e+o])}catch(c){throw new jl.ErrnoError(29)}return n&&(c.node.timestamp=Date.now()),o}},default_tty_ops:{get_char:function(c){if(!c.input.length){var t=null;if("undefined"!=typeof window&&"function"==typeof window.prompt?null!==(t=window.prompt("Input: "))&&(t+="\n"):"function"==typeof readline&&null!==(t=readline())&&(t+="\n"),!t)return null;c.input=intArrayFromString(t,!0)}return c.input.shift()},put_char:function(c,t){null===t||10===t?(el(UTF8ArrayToString(c.output,0)),c.output=[]):0!=t&&c.output.push(t)},flush:function(c){c.output&&c.output.length>0&&(el(UTF8ArrayToString(c.output,0)),c.output=[])}},default_tty1_ops:{put_char:function(c,t){null===t||10===t?(nl(UTF8ArrayToString(c.output,0)),c.output=[]):0!=t&&c.output.push(t)},flush:function(c){c.output&&c.output.length>0&&(nl(UTF8ArrayToString(c.output,0)),c.output=[])}}};function mmapAlloc(c){c=function(c,t){return Math.ceil(c/t)*t}(c,65536);var t=Fc(65536,c);return t?(function(c,t){Vl.fill(0,c,c+t)}(t,c),t):0}var Ml={ops_table:null,mount:function(c){return Ml.createNode(null,"/",16895,0)},createNode:function(c,t,e,n){if(jl.isBlkdev(e)||jl.isFIFO(e))throw new jl.ErrnoError(63);Ml.ops_table||(Ml.ops_table={dir:{node:{getattr:Ml.node_ops.getattr,setattr:Ml.node_ops.setattr,lookup:Ml.node_ops.lookup,mknod:Ml.node_ops.mknod,rename:Ml.node_ops.rename,unlink:Ml.node_ops.unlink,rmdir:Ml.node_ops.rmdir,readdir:Ml.node_ops.readdir,symlink:Ml.node_ops.symlink},stream:{llseek:Ml.stream_ops.llseek}},file:{node:{getattr:Ml.node_ops.getattr,setattr:Ml.node_ops.setattr},stream:{llseek:Ml.stream_ops.llseek,read:Ml.stream_ops.read,write:Ml.stream_ops.write,allocate:Ml.stream_ops.allocate,mmap:Ml.stream_ops.mmap,msync:Ml.stream_ops.msync}},link:{node:{getattr:Ml.node_ops.getattr,setattr:Ml.node_ops.setattr,readlink:Ml.node_ops.readlink},stream:{}},chrdev:{node:{getattr:Ml.node_ops.getattr,setattr:Ml.node_ops.setattr},stream:jl.chrdev_stream_ops}});var r=jl.createNode(c,t,e,n);return jl.isDir(r.mode)?(r.node_ops=Ml.ops_table.dir.node,r.stream_ops=Ml.ops_table.dir.stream,r.contents={}):jl.isFile(r.mode)?(r.node_ops=Ml.ops_table.file.node,r.stream_ops=Ml.ops_table.file.stream,r.usedBytes=0,r.contents=null):jl.isLink(r.mode)?(r.node_ops=Ml.ops_table.link.node,r.stream_ops=Ml.ops_table.link.stream):jl.isChrdev(r.mode)&&(r.node_ops=Ml.ops_table.chrdev.node,r.stream_ops=Ml.ops_table.chrdev.stream),r.timestamp=Date.now(),c&&(c.contents[t]=r,c.timestamp=r.timestamp),r},getFileDataAsTypedArray:function(c){return c.contents?c.contents.subarray?c.contents.subarray(0,c.usedBytes):new Uint8Array(c.contents):new Uint8Array(0)},expandFileStorage:function(c,t){var e=c.contents?c.contents.length:0;if(!(e>=t)){t=Math.max(t,e*(e<1048576?2:1.125)>>>0),0!=e&&(t=Math.max(t,256));var n=c.contents;c.contents=new Uint8Array(t),c.usedBytes>0&&c.contents.set(n.subarray(0,c.usedBytes),0)}},resizeFileStorage:function(c,t){if(c.usedBytes!=t)if(0==t)c.contents=null,c.usedBytes=0;else{var e=c.contents;c.contents=new Uint8Array(t),e&&c.contents.set(e.subarray(0,Math.min(t,c.usedBytes))),c.usedBytes=t}},node_ops:{getattr:function(c){var t={};return t.dev=jl.isChrdev(c.mode)?c.id:1,t.ino=c.id,t.mode=c.mode,t.nlink=1,t.uid=0,t.gid=0,t.rdev=c.rdev,jl.isDir(c.mode)?t.size=4096:jl.isFile(c.mode)?t.size=c.usedBytes:jl.isLink(c.mode)?t.size=c.link.length:t.size=0,t.atime=new Date(c.timestamp),t.mtime=new Date(c.timestamp),t.ctime=new Date(c.timestamp),t.blksize=4096,t.blocks=Math.ceil(t.size/t.blksize),t},setattr:function(c,t){void 0!==t.mode&&(c.mode=t.mode),void 0!==t.timestamp&&(c.timestamp=t.timestamp),void 0!==t.size&&Ml.resizeFileStorage(c,t.size)},lookup:function(c,t){throw jl.genericErrors[44]},mknod:function(c,t,e,n){return Ml.createNode(c,t,e,n)},rename:function(c,t,e){if(jl.isDir(c.mode)){var n;try{n=jl.lookupNode(t,e)}catch(c){}if(n)for(var r in n.contents)throw new jl.ErrnoError(55)}delete c.parent.contents[c.name],c.parent.timestamp=Date.now(),c.name=e,t.contents[e]=c,t.timestamp=c.parent.timestamp,c.parent=t},unlink:function(c,t){delete c.contents[t],c.timestamp=Date.now()},rmdir:function(c,t){var e=jl.lookupNode(c,t);for(var n in e.contents)throw new jl.ErrnoError(55);delete c.contents[t],c.timestamp=Date.now()},readdir:function(c){var t=[".",".."];for(var e in c.contents)c.contents.hasOwnProperty(e)&&t.push(e);return t},symlink:function(c,t,e){var n=Ml.createNode(c,t,41471,0);return n.link=e,n},readlink:function(c){if(!jl.isLink(c.mode))throw new jl.ErrnoError(28);return c.link}},stream_ops:{read:function(c,t,e,n,r){var o=c.node.contents;if(r>=c.node.usedBytes)return 0;var u=Math.min(c.node.usedBytes-r,n);if(u>8&&o.subarray)t.set(o.subarray(r,r+u),e);else for(var M=0;M<u;M++)t[e+M]=o[r+M];return u},write:function(c,t,e,n,r,o){if(t.buffer===ol.buffer&&(o=!1),!n)return 0;var u=c.node;if(u.timestamp=Date.now(),t.subarray&&(!u.contents||u.contents.subarray)){if(o)return u.contents=t.subarray(e,e+n),u.usedBytes=n,n;if(0===u.usedBytes&&0===r)return u.contents=t.slice(e,e+n),u.usedBytes=n,n;if(r+n<=u.usedBytes)return u.contents.set(t.subarray(e,e+n),r),n}if(Ml.expandFileStorage(u,r+n),u.contents.subarray&&t.subarray)u.contents.set(t.subarray(e,e+n),r);else for(var M=0;M<n;M++)u.contents[r+M]=t[e+M];return u.usedBytes=Math.max(u.usedBytes,r+n),n},llseek:function(c,t,e){var n=t;if(1===e?n+=c.position:2===e&&jl.isFile(c.node.mode)&&(n+=c.node.usedBytes),n<0)throw new jl.ErrnoError(28);return n},allocate:function(c,t,e){Ml.expandFileStorage(c.node,t+e),c.node.usedBytes=Math.max(c.node.usedBytes,t+e)},mmap:function(c,t,e,n,r,o){if(0!==t)throw new jl.ErrnoError(28);if(!jl.isFile(c.node.mode))throw new jl.ErrnoError(43);var u,M,ll=c.node.contents;if(2&o||ll.buffer!==Wl){if((n>0||n+e<ll.length)&&(ll=ll.subarray?ll.subarray(n,n+e):Array.prototype.slice.call(ll,n,n+e)),M=!0,!(u=mmapAlloc(e)))throw new jl.ErrnoError(48);ol.set(ll,u)}else M=!1,u=ll.byteOffset;return{ptr:u,allocated:M}},msync:function(c,t,e,n,r){if(!jl.isFile(c.node.mode))throw new jl.ErrnoError(43);if(2&r)return 0;Ml.stream_ops.write(c,t,0,n,e,!1);return 0}}};var jl={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:(c,t={})=>{if(!(c=Cl.resolve(jl.cwd(),c)))return{path:"",node:null};if((t=Object.assign({follow_mount:!0,recurse_count:0},t)).recurse_count>8)throw new jl.ErrnoError(32);for(var e=Ll.normalizeArray(c.split("/").filter((c=>!!c)),!1),n=jl.root,r="/",o=0;o<e.length;o++){var u=o===e.length-1;if(u&&t.parent)break;if(n=jl.lookupNode(n,e[o]),r=Ll.join2(r,e[o]),jl.isMountpoint(n)&&(!u||u&&t.follow_mount)&&(n=n.mounted.root),!u||t.follow)for(var M=0;jl.isLink(n.mode);){var ll=jl.readlink(r);if(r=Cl.resolve(Ll.dirname(r),ll),n=jl.lookupPath(r,{recurse_count:t.recurse_count+1}).node,M++>40)throw new jl.ErrnoError(32)}}return{path:r,node:n}},getPath:c=>{for(var t;;){if(jl.isRoot(c)){var e=c.mount.mountpoint;return t?"/"!==e[e.length-1]?e+"/"+t:e+t:e}t=t?c.name+"/"+t:c.name,c=c.parent}},hashName:(c,t)=>{for(var e=0,n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n)|0;return(c+e>>>0)%jl.nameTable.length},hashAddNode:c=>{var t=jl.hashName(c.parent.id,c.name);c.name_next=jl.nameTable[t],jl.nameTable[t]=c},hashRemoveNode:c=>{var t=jl.hashName(c.parent.id,c.name);if(jl.nameTable[t]===c)jl.nameTable[t]=c.name_next;else for(var e=jl.nameTable[t];e;){if(e.name_next===c){e.name_next=c.name_next;break}e=e.name_next}},lookupNode:(c,t)=>{var e=jl.mayLookup(c);if(e)throw new jl.ErrnoError(e,c);for(var n=jl.hashName(c.id,t),r=jl.nameTable[n];r;r=r.name_next){var o=r.name;if(r.parent.id===c.id&&o===t)return r}return jl.lookup(c,t)},createNode:(c,t,e,n)=>{var r=new jl.FSNode(c,t,e,n);return jl.hashAddNode(r),r},destroyNode:c=>{jl.hashRemoveNode(c)},isRoot:c=>c===c.parent,isMountpoint:c=>!!c.mounted,isFile:c=>32768==(61440&c),isDir:c=>16384==(61440&c),isLink:c=>40960==(61440&c),isChrdev:c=>8192==(61440&c),isBlkdev:c=>24576==(61440&c),isFIFO:c=>4096==(61440&c),isSocket:c=>49152==(49152&c),flagModes:{r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090},modeStringToFlags:c=>{var t=jl.flagModes[c];if(void 0===t)throw new Error("Unknown file open mode: "+c);return t},flagsToPermissionString:c=>{var t=["r","w","rw"][3&c];return 512&c&&(t+="w"),t},nodePermissions:(c,t)=>jl.ignorePermissions||(!t.includes("r")||292&c.mode)&&(!t.includes("w")||146&c.mode)&&(!t.includes("x")||73&c.mode)?0:2,mayLookup:c=>{var t=jl.nodePermissions(c,"x");return t||(c.node_ops.lookup?0:2)},mayCreate:(c,t)=>{try{jl.lookupNode(c,t);return 20}catch(c){}return jl.nodePermissions(c,"wx")},mayDelete:(c,t,e)=>{var n;try{n=jl.lookupNode(c,t)}catch(c){return c.errno}var r=jl.nodePermissions(c,"wx");if(r)return r;if(e){if(!jl.isDir(n.mode))return 54;if(jl.isRoot(n)||jl.getPath(n)===jl.cwd())return 10}else if(jl.isDir(n.mode))return 31;return 0},mayOpen:(c,t)=>c?jl.isLink(c.mode)?32:jl.isDir(c.mode)&&("r"!==jl.flagsToPermissionString(t)||512&t)?31:jl.nodePermissions(c,jl.flagsToPermissionString(t)):44,MAX_OPEN_FDS:4096,nextfd:(c=0,t=jl.MAX_OPEN_FDS)=>{for(var e=c;e<=t;e++)if(!jl.streams[e])return e;throw new jl.ErrnoError(33)},getStream:c=>jl.streams[c],createStream:(c,t,e)=>{jl.FSStream||(jl.FSStream=function(){this.shared={}},jl.FSStream.prototype={object:{get:function(){return this.node},set:function(c){this.node=c}},isRead:{get:function(){return 1!=(2097155&this.flags)}},isWrite:{get:function(){return 0!=(2097155&this.flags)}},isAppend:{get:function(){return 1024&this.flags}},flags:{get:function(){return this.shared.flags},set:function(c){this.shared.flags=c}},position:{get function(){return this.shared.position},set:function(c){this.shared.position=c}}}),c=Object.assign(new jl.FSStream,c);var n=jl.nextfd(t,e);return c.fd=n,jl.streams[n]=c,c},closeStream:c=>{jl.streams[c]=null},chrdev_stream_ops:{open:c=>{var t=jl.getDevice(c.node.rdev);c.stream_ops=t.stream_ops,c.stream_ops.open&&c.stream_ops.open(c)},llseek:()=>{throw new jl.ErrnoError(70)}},major:c=>c>>8,minor:c=>255&c,makedev:(c,t)=>c<<8|t,registerDevice:(c,t)=>{jl.devices[c]={stream_ops:t}},getDevice:c=>jl.devices[c],getMounts:c=>{for(var t=[],e=[c];e.length;){var n=e.pop();t.push(n),e.push.apply(e,n.mounts)}return t},syncfs:(c,t)=>{"function"==typeof c&&(t=c,c=!1),jl.syncFSRequests++,jl.syncFSRequests>1&&nl("warning: "+jl.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work");var e=jl.getMounts(jl.root.mount),n=0;function doCallback(c){return jl.syncFSRequests--,t(c)}function done(c){if(c)return done.errored?void 0:(done.errored=!0,doCallback(c));++n>=e.length&&doCallback(null)}e.forEach((t=>{if(!t.type.syncfs)return done(null);t.type.syncfs(t,c,done)}))},mount:(c,t,e)=>{var n,r="/"===e,o=!e;if(r&&jl.root)throw new jl.ErrnoError(10);if(!r&&!o){var u=jl.lookupPath(e,{follow_mount:!1});if(e=u.path,n=u.node,jl.isMountpoint(n))throw new jl.ErrnoError(10);if(!jl.isDir(n.mode))throw new jl.ErrnoError(54)}var M={type:c,opts:t,mountpoint:e,mounts:[]},ll=c.mount(M);return ll.mount=M,M.root=ll,r?jl.root=ll:n&&(n.mounted=M,n.mount&&n.mount.mounts.push(M)),ll},unmount:c=>{var t=jl.lookupPath(c,{follow_mount:!1});if(!jl.isMountpoint(t.node))throw new jl.ErrnoError(28);var e=t.node,n=e.mounted,r=jl.getMounts(n);Object.keys(jl.nameTable).forEach((c=>{for(var t=jl.nameTable[c];t;){var e=t.name_next;r.includes(t.mount)&&jl.destroyNode(t),t=e}})),e.mounted=null;var o=e.mount.mounts.indexOf(n);e.mount.mounts.splice(o,1)},lookup:(c,t)=>c.node_ops.lookup(c,t),mknod:(c,t,e)=>{var n=jl.lookupPath(c,{parent:!0}).node,r=Ll.basename(c);if(!r||"."===r||".."===r)throw new jl.ErrnoError(28);var o=jl.mayCreate(n,r);if(o)throw new jl.ErrnoError(o);if(!n.node_ops.mknod)throw new jl.ErrnoError(63);return n.node_ops.mknod(n,r,t,e)},create:(c,t)=>(t=void 0!==t?t:438,t&=4095,t|=32768,jl.mknod(c,t,0)),mkdir:(c,t)=>(t=void 0!==t?t:511,t&=1023,t|=16384,jl.mknod(c,t,0)),mkdirTree:(c,t)=>{for(var e=c.split("/"),n="",r=0;r<e.length;++r)if(e[r]){n+="/"+e[r];try{jl.mkdir(n,t)}catch(c){if(20!=c.errno)throw c}}},mkdev:(c,t,e)=>(void 0===e&&(e=t,t=438),t|=8192,jl.mknod(c,t,e)),symlink:(c,t)=>{if(!Cl.resolve(c))throw new jl.ErrnoError(44);var e=jl.lookupPath(t,{parent:!0}).node;if(!e)throw new jl.ErrnoError(44);var n=Ll.basename(t),r=jl.mayCreate(e,n);if(r)throw new jl.ErrnoError(r);if(!e.node_ops.symlink)throw new jl.ErrnoError(63);return e.node_ops.symlink(e,n,c)},rename:(c,t)=>{var e,n,r=Ll.dirname(c),o=Ll.dirname(t),u=Ll.basename(c),M=Ll.basename(t);if(e=jl.lookupPath(c,{parent:!0}).node,n=jl.lookupPath(t,{parent:!0}).node,!e||!n)throw new jl.ErrnoError(44);if(e.mount!==n.mount)throw new jl.ErrnoError(75);var ll,cl=jl.lookupNode(e,u),tl=Cl.relative(c,o);if("."!==tl.charAt(0))throw new jl.ErrnoError(28);if("."!==(tl=Cl.relative(t,r)).charAt(0))throw new jl.ErrnoError(55);try{ll=jl.lookupNode(n,M)}catch(c){}if(cl!==ll){var Zl=jl.isDir(cl.mode),dl=jl.mayDelete(e,u,Zl);if(dl)throw new jl.ErrnoError(dl);if(dl=ll?jl.mayDelete(n,M,Zl):jl.mayCreate(n,M))throw new jl.ErrnoError(dl);if(!e.node_ops.rename)throw new jl.ErrnoError(63);if(jl.isMountpoint(cl)||ll&&jl.isMountpoint(ll))throw new jl.ErrnoError(10);if(n!==e&&(dl=jl.nodePermissions(e,"w")))throw new jl.ErrnoError(dl);jl.hashRemoveNode(cl);try{e.node_ops.rename(cl,n,M)}catch(c){throw c}finally{jl.hashAddNode(cl)}}},rmdir:c=>{var t=jl.lookupPath(c,{parent:!0}).node,e=Ll.basename(c),n=jl.lookupNode(t,e),r=jl.mayDelete(t,e,!0);if(r)throw new jl.ErrnoError(r);if(!t.node_ops.rmdir)throw new jl.ErrnoError(63);if(jl.isMountpoint(n))throw new jl.ErrnoError(10);t.node_ops.rmdir(t,e),jl.destroyNode(n)},readdir:c=>{var t=jl.lookupPath(c,{follow:!0}).node;if(!t.node_ops.readdir)throw new jl.ErrnoError(54);return t.node_ops.readdir(t)},unlink:c=>{var t=jl.lookupPath(c,{parent:!0}).node;if(!t)throw new jl.ErrnoError(44);var e=Ll.basename(c),n=jl.lookupNode(t,e),r=jl.mayDelete(t,e,!1);if(r)throw new jl.ErrnoError(r);if(!t.node_ops.unlink)throw new jl.ErrnoError(63);if(jl.isMountpoint(n))throw new jl.ErrnoError(10);t.node_ops.unlink(t,e),jl.destroyNode(n)},readlink:c=>{var t=jl.lookupPath(c).node;if(!t)throw new jl.ErrnoError(44);if(!t.node_ops.readlink)throw new jl.ErrnoError(28);return Cl.resolve(jl.getPath(t.parent),t.node_ops.readlink(t))},stat:(c,t)=>{var e=jl.lookupPath(c,{follow:!t}).node;if(!e)throw new jl.ErrnoError(44);if(!e.node_ops.getattr)throw new jl.ErrnoError(63);return e.node_ops.getattr(e)},lstat:c=>jl.stat(c,!0),chmod:(c,t,e)=>{var n;"string"==typeof c?n=jl.lookupPath(c,{follow:!e}).node:n=c;if(!n.node_ops.setattr)throw new jl.ErrnoError(63);n.node_ops.setattr(n,{mode:4095&t|-4096&n.mode,timestamp:Date.now()})},lchmod:(c,t)=>{jl.chmod(c,t,!0)},fchmod:(c,t)=>{var e=jl.getStream(c);if(!e)throw new jl.ErrnoError(8);jl.chmod(e.node,t)},chown:(c,t,e,n)=>{var r;"string"==typeof c?r=jl.lookupPath(c,{follow:!n}).node:r=c;if(!r.node_ops.setattr)throw new jl.ErrnoError(63);r.node_ops.setattr(r,{timestamp:Date.now()})},lchown:(c,t,e)=>{jl.chown(c,t,e,!0)},fchown:(c,t,e)=>{var n=jl.getStream(c);if(!n)throw new jl.ErrnoError(8);jl.chown(n.node,t,e)},truncate:(c,t)=>{if(t<0)throw new jl.ErrnoError(28);var e;"string"==typeof c?e=jl.lookupPath(c,{follow:!0}).node:e=c;if(!e.node_ops.setattr)throw new jl.ErrnoError(63);if(jl.isDir(e.mode))throw new jl.ErrnoError(31);if(!jl.isFile(e.mode))throw new jl.ErrnoError(28);var n=jl.nodePermissions(e,"w");if(n)throw new jl.ErrnoError(n);e.node_ops.setattr(e,{size:t,timestamp:Date.now()})},ftruncate:(c,t)=>{var e=jl.getStream(c);if(!e)throw new jl.ErrnoError(8);if(0==(2097155&e.flags))throw new jl.ErrnoError(28);jl.truncate(e.node,t)},utime:(c,t,e)=>{var n=jl.lookupPath(c,{follow:!0}).node;n.node_ops.setattr(n,{timestamp:Math.max(t,e)})},open:(c,e,n)=>{if(""===c)throw new jl.ErrnoError(44);var r;if(n=void 0===n?438:n,n=64&(e="string"==typeof e?jl.modeStringToFlags(e):e)?4095&n|32768:0,"object"==typeof c)r=c;else{c=Ll.normalize(c);try{r=jl.lookupPath(c,{follow:!(131072&e)}).node}catch(c){}}var o=!1;if(64&e)if(r){if(128&e)throw new jl.ErrnoError(20)}else r=jl.mknod(c,n,0),o=!0;if(!r)throw new jl.ErrnoError(44);if(jl.isChrdev(r.mode)&&(e&=-513),65536&e&&!jl.isDir(r.mode))throw new jl.ErrnoError(54);if(!o){var u=jl.mayOpen(r,e);if(u)throw new jl.ErrnoError(u)}512&e&&!o&&jl.truncate(r,0),e&=-131713;var M=jl.createStream({node:r,path:jl.getPath(r),flags:e,seekable:!0,position:0,stream_ops:r.stream_ops,ungotten:[],error:!1});return M.stream_ops.open&&M.stream_ops.open(M),!t.logReadFiles||1&e||(jl.readFiles||(jl.readFiles={}),c in jl.readFiles||(jl.readFiles[c]=1)),M},close:c=>{if(jl.isClosed(c))throw new jl.ErrnoError(8);c.getdents&&(c.getdents=null);try{c.stream_ops.close&&c.stream_ops.close(c)}catch(c){throw c}finally{jl.closeStream(c.fd)}c.fd=null},isClosed:c=>null===c.fd,llseek:(c,t,e)=>{if(jl.isClosed(c))throw new jl.ErrnoError(8);if(!c.seekable||!c.stream_ops.llseek)throw new jl.ErrnoError(70);if(0!=e&&1!=e&&2!=e)throw new jl.ErrnoError(28);return c.position=c.stream_ops.llseek(c,t,e),c.ungotten=[],c.position},read:(c,t,e,n,r)=>{if(n<0||r<0)throw new jl.ErrnoError(28);if(jl.isClosed(c))throw new jl.ErrnoError(8);if(1==(2097155&c.flags))throw new jl.ErrnoError(8);if(jl.isDir(c.node.mode))throw new jl.ErrnoError(31);if(!c.stream_ops.read)throw new jl.ErrnoError(28);var o=void 0!==r;if(o){if(!c.seekable)throw new jl.ErrnoError(70)}else r=c.position;var u=c.stream_ops.read(c,t,e,n,r);return o||(c.position+=u),u},write:(c,t,e,n,r,o)=>{if(n<0||r<0)throw new jl.ErrnoError(28);if(jl.isClosed(c))throw new jl.ErrnoError(8);if(0==(2097155&c.flags))throw new jl.ErrnoError(8);if(jl.isDir(c.node.mode))throw new jl.ErrnoError(31);if(!c.stream_ops.write)throw new jl.ErrnoError(28);c.seekable&&1024&c.flags&&jl.llseek(c,0,2);var u=void 0!==r;if(u){if(!c.seekable)throw new jl.ErrnoError(70)}else r=c.position;var M=c.stream_ops.write(c,t,e,n,r,o);return u||(c.position+=M),M},allocate:(c,t,e)=>{if(jl.isClosed(c))throw new jl.ErrnoError(8);if(t<0||e<=0)throw new jl.ErrnoError(28);if(0==(2097155&c.flags))throw new jl.ErrnoError(8);if(!jl.isFile(c.node.mode)&&!jl.isDir(c.node.mode))throw new jl.ErrnoError(43);if(!c.stream_ops.allocate)throw new jl.ErrnoError(138);c.stream_ops.allocate(c,t,e)},mmap:(c,t,e,n,r,o)=>{if(0!=(2&r)&&0==(2&o)&&2!=(2097155&c.flags))throw new jl.ErrnoError(2);if(1==(2097155&c.flags))throw new jl.ErrnoError(2);if(!c.stream_ops.mmap)throw new jl.ErrnoError(43);return c.stream_ops.mmap(c,t,e,n,r,o)},msync:(c,t,e,n,r)=>c&&c.stream_ops.msync?c.stream_ops.msync(c,t,e,n,r):0,munmap:c=>0,ioctl:(c,t,e)=>{if(!c.stream_ops.ioctl)throw new jl.ErrnoError(59);return c.stream_ops.ioctl(c,t,e)},readFile:(c,t={})=>{if(t.flags=t.flags||0,t.encoding=t.encoding||"binary","utf8"!==t.encoding&&"binary"!==t.encoding)throw new Error('Invalid encoding type "'+t.encoding+'"');var e,n=jl.open(c,t.flags),r=jl.stat(c).size,o=new Uint8Array(r);return jl.read(n,o,0,r,0),"utf8"===t.encoding?e=UTF8ArrayToString(o,0):"binary"===t.encoding&&(e=o),jl.close(n),e},writeFile:(c,t,e={})=>{e.flags=e.flags||577;var n=jl.open(c,e.flags,e.mode);if("string"==typeof t){var r=new Uint8Array(lengthBytesUTF8(t)+1),o=stringToUTF8Array(t,r,0,r.length);jl.write(n,r,0,o,void 0,e.canOwn)}else{if(!ArrayBuffer.isView(t))throw new Error("Unsupported data type");jl.write(n,t,0,t.byteLength,void 0,e.canOwn)}jl.close(n)},cwd:()=>jl.currentPath,chdir:c=>{var t=jl.lookupPath(c,{follow:!0});if(null===t.node)throw new jl.ErrnoError(44);if(!jl.isDir(t.node.mode))throw new jl.ErrnoError(54);var e=jl.nodePermissions(t.node,"x");if(e)throw new jl.ErrnoError(e);jl.currentPath=t.path},createDefaultDirectories:()=>{jl.mkdir("/tmp"),jl.mkdir("/home"),jl.mkdir("/home/web_user")},createDefaultDevices:()=>{jl.mkdir("/dev"),jl.registerDevice(jl.makedev(1,3),{read:()=>0,write:(c,t,e,n,r)=>n}),jl.mkdev("/dev/null",jl.makedev(1,3)),El.register(jl.makedev(5,0),El.default_tty_ops),El.register(jl.makedev(6,0),El.default_tty1_ops),jl.mkdev("/dev/tty",jl.makedev(5,0)),jl.mkdev("/dev/tty1",jl.makedev(6,0));var c=getRandomDevice();jl.createDevice("/dev","random",c),jl.createDevice("/dev","urandom",c),jl.mkdir("/dev/shm"),jl.mkdir("/dev/shm/tmp")},createSpecialDirectories:()=>{jl.mkdir("/proc");var c=jl.mkdir("/proc/self");jl.mkdir("/proc/self/fd"),jl.mount({mount:()=>{var t=jl.createNode(c,"fd",16895,73);return t.node_ops={lookup:(c,t)=>{var e=+t,n=jl.getStream(e);if(!n)throw new jl.ErrnoError(8);var r={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:()=>n.path}};return r.parent=r,r}},t}},{},"/proc/self/fd")},createStandardStreams:()=>{t.stdin?jl.createDevice("/dev","stdin",t.stdin):jl.symlink("/dev/tty","/dev/stdin"),t.stdout?jl.createDevice("/dev","stdout",null,t.stdout):jl.symlink("/dev/tty","/dev/stdout"),t.stderr?jl.createDevice("/dev","stderr",null,t.stderr):jl.symlink("/dev/tty1","/dev/stderr");jl.open("/dev/stdin",0),jl.open("/dev/stdout",1),jl.open("/dev/stderr",1)},ensureErrnoError:()=>{jl.ErrnoError||(jl.ErrnoError=function(c,t){this.node=t,this.setErrno=function(c){this.errno=c},this.setErrno(c),this.message="FS error"},jl.ErrnoError.prototype=new Error,jl.ErrnoError.prototype.constructor=jl.ErrnoError,[44].forEach((c=>{jl.genericErrors[c]=new jl.ErrnoError(c),jl.genericErrors[c].stack="<generic error, no stack>"})))},staticInit:()=>{jl.ensureErrnoError(),jl.nameTable=new Array(4096),jl.mount(Ml,{},"/"),jl.createDefaultDirectories(),jl.createDefaultDevices(),jl.createSpecialDirectories(),jl.filesystems={MEMFS:Ml}},init:(c,e,n)=>{jl.init.initialized=!0,jl.ensureErrnoError(),t.stdin=c||t.stdin,t.stdout=e||t.stdout,t.stderr=n||t.stderr,jl.createStandardStreams()},quit:()=>{jl.init.initialized=!1,pc();for(var c=0;c<jl.streams.length;c++){var t=jl.streams[c];t&&jl.close(t)}},getMode:(c,t)=>{var e=0;return c&&(e|=365),t&&(e|=146),e},findObject:(c,t)=>{var e=jl.analyzePath(c,t);return e.exists?e.object:null},analyzePath:(c,t)=>{try{c=(n=jl.lookupPath(c,{follow:!t})).path}catch(c){}var e={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var n=jl.lookupPath(c,{parent:!0});e.parentExists=!0,e.parentPath=n.path,e.parentObject=n.node,e.name=Ll.basename(c),n=jl.lookupPath(c,{follow:!t}),e.exists=!0,e.path=n.path,e.object=n.node,e.name=n.node.name,e.isRoot="/"===n.path}catch(c){e.error=c.errno}return e},createPath:(c,t,e,n)=>{c="string"==typeof c?c:jl.getPath(c);for(var r=t.split("/").reverse();r.length;){var o=r.pop();if(o){var u=Ll.join2(c,o);try{jl.mkdir(u)}catch(c){}c=u}}return u},createFile:(c,t,e,n,r)=>{var o=Ll.join2("string"==typeof c?c:jl.getPath(c),t),u=jl.getMode(n,r);return jl.create(o,u)},createDataFile:(c,t,e,n,r,o)=>{var u=t;c&&(c="string"==typeof c?c:jl.getPath(c),u=t?Ll.join2(c,t):c);var M=jl.getMode(n,r),ll=jl.create(u,M);if(e){if("string"==typeof e){for(var cl=new Array(e.length),tl=0,Zl=e.length;tl<Zl;++tl)cl[tl]=e.charCodeAt(tl);e=cl}jl.chmod(ll,146|M);var dl=jl.open(ll,577);jl.write(dl,e,0,e.length,0,o),jl.close(dl),jl.chmod(ll,M)}return ll},createDevice:(c,t,e,n)=>{var r=Ll.join2("string"==typeof c?c:jl.getPath(c),t),o=jl.getMode(!!e,!!n);jl.createDevice.major||(jl.createDevice.major=64);var u=jl.makedev(jl.createDevice.major++,0);return jl.registerDevice(u,{open:c=>{c.seekable=!1},close:c=>{n&&n.buffer&&n.buffer.length&&n(10)},read:(c,t,n,r,o)=>{for(var u=0,M=0;M<r;M++){var ll;try{ll=e()}catch(c){throw new jl.ErrnoError(29)}if(void 0===ll&&0===u)throw new jl.ErrnoError(6);if(null==ll)break;u++,t[n+M]=ll}return u&&(c.node.timestamp=Date.now()),u},write:(c,t,e,r,o)=>{for(var u=0;u<r;u++)try{n(t[e+u])}catch(c){throw new jl.ErrnoError(29)}return r&&(c.node.timestamp=Date.now()),u}}),jl.mkdev(r,o,u)},forceLoadFile:c=>{if(c.isDevice||c.isFolder||c.link||c.contents)return!0;if("undefined"!=typeof XMLHttpRequest)throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");if(!r)throw new Error("Cannot load without read() or XMLHttpRequest.");try{c.contents=intArrayFromString(r(c.url),!0),c.usedBytes=c.contents.length}catch(c){throw new jl.ErrnoError(29)}},createLazyFile:(c,t,e,n,r)=>{function LazyUint8Array(){this.lengthKnown=!1,this.chunks=[]}if(LazyUint8Array.prototype.get=function(c){if(!(c>this.length-1||c<0)){var t=c%this.chunkSize,e=c/this.chunkSize|0;return this.getter(e)[t]}},LazyUint8Array.prototype.setDataGetter=function(c){this.getter=c},LazyUint8Array.prototype.cacheLength=function(){var c=new XMLHttpRequest;if(c.open("HEAD",e,!1),c.send(null),!(c.status>=200&&c.status<300||304===c.status))throw new Error("Couldn't load "+e+". Status: "+c.status);var t,n=Number(c.getResponseHeader("Content-length")),r=(t=c.getResponseHeader("Accept-Ranges"))&&"bytes"===t,o=(t=c.getResponseHeader("Content-Encoding"))&&"gzip"===t,u=1048576;r||(u=n);var M=this;M.setDataGetter((c=>{var t=c*u,r=(c+1)*u-1;if(r=Math.min(r,n-1),void 0===M.chunks[c]&&(M.chunks[c]=((c,t)=>{if(c>t)throw new Error("invalid range ("+c+", "+t+") or no bytes requested!");if(t>n-1)throw new Error("only "+n+" bytes available! programmer error!");var r=new XMLHttpRequest;if(r.open("GET",e,!1),n!==u&&r.setRequestHeader("Range","bytes="+c+"-"+t),r.responseType="arraybuffer",r.overrideMimeType&&r.overrideMimeType("text/plain; charset=x-user-defined"),r.send(null),!(r.status>=200&&r.status<300||304===r.status))throw new Error("Couldn't load "+e+". Status: "+r.status);return void 0!==r.response?new Uint8Array(r.response||[]):intArrayFromString(r.responseText||"",!0)})(t,r)),void 0===M.chunks[c])throw new Error("doXHR failed!");return M.chunks[c]})),!o&&n||(u=n=1,n=this.getter(0).length,u=n,el("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=n,this._chunkSize=u,this.lengthKnown=!0},"undefined"!=typeof XMLHttpRequest){if(!Zl)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var o=new LazyUint8Array;Object.defineProperties(o,{length:{get:function(){return this.lengthKnown||this.cacheLength(),this._length}},chunkSize:{get:function(){return this.lengthKnown||this.cacheLength(),this._chunkSize}}});var u={isDevice:!1,contents:o}}else u={isDevice:!1,url:e};var M=jl.createFile(c,t,u,n,r);u.contents?M.contents=u.contents:u.url&&(M.contents=null,M.url=u.url),Object.defineProperties(M,{usedBytes:{get:function(){return this.contents.length}}});var ll={};return Object.keys(M.stream_ops).forEach((c=>{var t=M.stream_ops[c];ll[c]=function(){return jl.forceLoadFile(M),t.apply(null,arguments)}})),ll.read=(c,t,e,n,r)=>{jl.forceLoadFile(M);var o=c.node.contents;if(r>=o.length)return 0;var u=Math.min(o.length-r,n);if(o.slice)for(var ll=0;ll<u;ll++)t[e+ll]=o[r+ll];else for(ll=0;ll<u;ll++)t[e+ll]=o.get(r+ll);return u},M.stream_ops=ll,M},createPreloadedFile:(c,t,e,n,r,u,M,ll,cl,tl)=>{var Zl=t?Cl.resolve(Ll.join2(c,t)):c;function processData(e){function finish(e){tl&&tl(),ll||jl.createDataFile(c,t,e,n,r,cl),u&&u(),removeRunDependency()}Browser.handledByPreloadPlugin(e,Zl,finish,(()=>{M&&M(),removeRunDependency()}))||finish(e)}addRunDependency(),"string"==typeof e?function(c,t,e,n){var r=n?"":"al "+c;o(c,(function(e){assert(e,'Loading data file "'+c+'" failed (no arrayBuffer).'),t(new Uint8Array(e)),r&&removeRunDependency()}),(function(t){if(!e)throw'Loading data file "'+c+'" failed.';e()})),r&&addRunDependency()}(e,(c=>processData(c)),M):processData(e)},indexedDB:()=>window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB,DB_NAME:()=>"EM_FS_"+window.location.pathname,DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:(c,t,e)=>{t=t||(()=>{}),e=e||(()=>{});var n=jl.indexedDB();try{var r=n.open(jl.DB_NAME(),jl.DB_VERSION)}catch(c){return e(c)}r.onupgradeneeded=()=>{el("creating db"),r.result.createObjectStore(jl.DB_STORE_NAME)},r.onsuccess=()=>{var n=r.result.transaction([jl.DB_STORE_NAME],"readwrite"),o=n.objectStore(jl.DB_STORE_NAME),u=0,M=0,ll=c.length;function finish(){0==M?t():e()}c.forEach((c=>{var t=o.put(jl.analyzePath(c).object.contents,c);t.onsuccess=()=>{++u+M==ll&&finish()},t.onerror=()=>{M++,u+M==ll&&finish()}})),n.onerror=e},r.onerror=e},loadFilesFromDB:(c,t,e)=>{t=t||(()=>{}),e=e||(()=>{});var n=jl.indexedDB();try{var r=n.open(jl.DB_NAME(),jl.DB_VERSION)}catch(c){return e(c)}r.onupgradeneeded=e,r.onsuccess=()=>{var n=r.result;try{var o=n.transaction([jl.DB_STORE_NAME],"readonly")}catch(c){return void e(c)}var u=o.objectStore(jl.DB_STORE_NAME),M=0,ll=0,cl=c.length;function finish(){0==ll?t():e()}c.forEach((c=>{var t=u.get(c);t.onsuccess=()=>{jl.analyzePath(c).exists&&jl.unlink(c),jl.createDataFile(Ll.dirname(c),Ll.basename(c),t.result,!0,!0,!0),++M+ll==cl&&finish()},t.onerror=()=>{ll++,M+ll==cl&&finish()}})),o.onerror=e},r.onerror=e}},Ql={DEFAULT_POLLMASK:5,calculateAt:function(c,t,e){if(Ll.isAbs(t))return t;var n;if(-100===c)n=jl.cwd();else{var r=jl.getStream(c);if(!r)throw new jl.ErrnoError(8);n=r.path}if(0==t.length){if(!e)throw new jl.ErrnoError(44);return n}return Ll.join2(n,t)},doStat:function(c,t,e){try{var n=c(t)}catch(c){if(c&&c.node&&Ll.normalize(t)!==Ll.normalize(jl.getPath(c.node)))return-54;throw c}return yl[e>>2]=n.dev,yl[e+4>>2]=0,yl[e+8>>2]=n.ino,yl[e+12>>2]=n.mode,yl[e+16>>2]=n.nlink,yl[e+20>>2]=n.uid,yl[e+24>>2]=n.gid,yl[e+28>>2]=n.rdev,yl[e+32>>2]=0,Kl=[n.size>>>0,(Tl=n.size,+Math.abs(Tl)>=1?Tl>0?(0|Math.min(+Math.floor(Tl/4294967296),4294967295))>>>0:~~+Math.ceil((Tl-+(~~Tl>>>0))/4294967296)>>>0:0)],yl[e+40>>2]=Kl[0],yl[e+44>>2]=Kl[1],yl[e+48>>2]=4096,yl[e+52>>2]=n.blocks,yl[e+56>>2]=n.atime.getTime()/1e3|0,yl[e+60>>2]=0,yl[e+64>>2]=n.mtime.getTime()/1e3|0,yl[e+68>>2]=0,yl[e+72>>2]=n.ctime.getTime()/1e3|0,yl[e+76>>2]=0,Kl=[n.ino>>>0,(Tl=n.ino,+Math.abs(Tl)>=1?Tl>0?(0|Math.min(+Math.floor(Tl/4294967296),4294967295))>>>0:~~+Math.ceil((Tl-+(~~Tl>>>0))/4294967296)>>>0:0)],yl[e+80>>2]=Kl[0],yl[e+84>>2]=Kl[1],0},doMsync:function(c,t,e,n,r){var o=Vl.slice(c,c+e);jl.msync(t,o,r,e,n)},varargs:void 0,get:function(){return Ql.varargs+=4,yl[Ql.varargs-4>>2]},getStr:function(c){return UTF8ToString(c)},getStreamFromFD:function(c){var t=jl.getStream(c);if(!t)throw new jl.ErrnoError(8);return t}};var Pl="To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking";function getShiftFromSize(c){switch(c){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+c)}}var Ol=void 0;function readLatin1String(c){for(var t="",e=c;Vl[e];)t+=Ol[Vl[e++]];return t}var Dl={},_l={},Al={},$l=48,ql=57;function makeLegalFunctionName(c){if(void 0===c)return"_unknown";var t=(c=c.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return t>=$l&&t<=ql?"_"+c:c}function createNamedFunction(c,t){return c=makeLegalFunctionName(c),new Function("body","return function "+c+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(t)}function extendError(c,t){var e=createNamedFunction(t,(function(c){this.name=t,this.message=c;var e=new Error(c).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(c.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var lc=void 0;function throwBindingError(c){throw new lc(c)}var cc=void 0;function throwInternalError(c){throw new cc(c)}function whenDependentTypesAreResolved(c,t,e){function onComplete(t){var n=e(t);n.length!==c.length&&throwInternalError("Mismatched type converter count");for(var r=0;r<c.length;++r)registerType(c[r],n[r])}c.forEach((function(c){Al[c]=t}));var n=new Array(t.length),r=[],o=0;t.forEach(((c,t)=>{_l.hasOwnProperty(c)?n[t]=_l[c]:(r.push(c),Dl.hasOwnProperty(c)||(Dl[c]=[]),Dl[c].push((()=>{n[t]=_l[c],++o===r.length&&onComplete(n)})))})),0===r.length&&onComplete(n)}function registerType(c,t,e={}){if(!("argPackAdvance"in t))throw new TypeError("registerType registeredInstance requires argPackAdvance");var n=t.name;if(c||throwBindingError('type "'+n+'" must have a positive integer typeid pointer'),_l.hasOwnProperty(c)){if(e.ignoreDuplicateRegistrations)return;throwBindingError("Cannot register type '"+n+"' twice")}if(_l[c]=t,delete Al[c],Dl.hasOwnProperty(c)){var r=Dl[c];delete Dl[c],r.forEach((c=>c()))}}function ClassHandle_isAliasOf(c){if(!(this instanceof ClassHandle))return!1;if(!(c instanceof ClassHandle))return!1;for(var t=this.$$.ptrType.registeredClass,e=this.$$.ptr,n=c.$$.ptrType.registeredClass,r=c.$$.ptr;t.baseClass;)e=t.upcast(e),t=t.baseClass;for(;n.baseClass;)r=n.upcast(r),n=n.baseClass;return t===n&&e===r}function throwInstanceAlreadyDeleted(c){throwBindingError(c.$$.ptrType.registeredClass.name+" instance already deleted")}var tc=!1;function detachFinalizer(c){}function releaseClassHandle(c){c.count.value-=1,0===c.count.value&&function(c){c.smartPtr?c.smartPtrType.rawDestructor(c.smartPtr):c.ptrType.registeredClass.rawDestructor(c.ptr)}(c)}function downcastPointer(c,t,e){if(t===e)return c;if(void 0===e.baseClass)return null;var n=downcastPointer(c,t,e.baseClass);return null===n?null:e.downcast(n)}var Zc={};function getInheritedInstanceCount(){return Object.keys(nc).length}function getLiveInheritedInstances(){var c=[];for(var t in nc)nc.hasOwnProperty(t)&&c.push(nc[t]);return c}var dc=[];function flushPendingDeletes(){for(;dc.length;){var c=dc.pop();c.$$.deleteScheduled=!1,c.delete()}}var ec=void 0;function setDelayFunction(c){ec=c,dc.length&&ec&&ec(flushPendingDeletes)}var nc={};function getInheritedInstance(c,t){return t=function(c,t){for(void 0===t&&throwBindingError("ptr should not be undefined");c.baseClass;)t=c.upcast(t),c=c.baseClass;return t}(c,t),nc[t]}function makeClassHandle(c,t){return t.ptrType&&t.ptr||throwInternalError("makeClassHandle requires ptr and ptrType"),!!t.smartPtrType!==!!t.smartPtr&&throwInternalError("Both smartPtrType and smartPtr must be specified"),t.count={value:1},attachFinalizer(Object.create(c,{$$:{value:t}}))}function RegisteredPointer_fromWireType(c){var t=this.getPointee(c);if(!t)return this.destructor(c),null;var e=getInheritedInstance(this.registeredClass,t);if(void 0!==e){if(0===e.$$.count.value)return e.$$.ptr=t,e.$$.smartPtr=c,e.clone();var n=e.clone();return this.destructor(c),n}function makeDefaultHandle(){return this.isSmartPointer?makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:t,smartPtrType:this,smartPtr:c}):makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr:c})}var r,o=this.registeredClass.getActualType(t),u=Zc[o];if(!u)return makeDefaultHandle.call(this);r=this.isConst?u.constPointerType:u.pointerType;var M=downcastPointer(t,this.registeredClass,r.registeredClass);return null===M?makeDefaultHandle.call(this):this.isSmartPointer?makeClassHandle(r.registeredClass.instancePrototype,{ptrType:r,ptr:M,smartPtrType:this,smartPtr:c}):makeClassHandle(r.registeredClass.instancePrototype,{ptrType:r,ptr:M})}function attachFinalizer(c){return"undefined"==typeof FinalizationRegistry?(attachFinalizer=c=>c,c):(tc=new FinalizationRegistry((c=>{releaseClassHandle(c.$$)})),attachFinalizer=c=>{var t=c.$$;if(!!t.smartPtr){var e={$$:t};tc.register(c,e,c)}return c},detachFinalizer=c=>tc.unregister(c),attachFinalizer(c))}function ClassHandle_clone(){if(this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.preservePointerOnDelete)return this.$$.count.value+=1,this;var c,t=attachFinalizer(Object.create(Object.getPrototypeOf(this),{$$:{value:(c=this.$$,{count:c.count,deleteScheduled:c.deleteScheduled,preservePointerOnDelete:c.preservePointerOnDelete,ptr:c.ptr,ptrType:c.ptrType,smartPtr:c.smartPtr,smartPtrType:c.smartPtrType})}}));return t.$$.count.value+=1,t.$$.deleteScheduled=!1,t}function ClassHandle_delete(){this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&throwBindingError("Object already scheduled for deletion"),detachFinalizer(this),releaseClassHandle(this.$$),this.$$.preservePointerOnDelete||(this.$$.smartPtr=void 0,this.$$.ptr=void 0)}function ClassHandle_isDeleted(){return!this.$$.ptr}function ClassHandle_deleteLater(){return this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&throwBindingError("Object already scheduled for deletion"),dc.push(this),1===dc.length&&ec&&ec(flushPendingDeletes),this.$$.deleteScheduled=!0,this}function ClassHandle(){}function ensureOverloadTable(c,t,e){if(void 0===c[t].overloadTable){var n=c[t];c[t]=function(){return c[t].overloadTable.hasOwnProperty(arguments.length)||throwBindingError("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+c[t].overloadTable+")!"),c[t].overloadTable[arguments.length].apply(this,arguments)},c[t].overloadTable=[],c[t].overloadTable[n.argCount]=n}}function RegisteredClass(c,t,e,n,r,o,u,M){this.name=c,this.constructor=t,this.instancePrototype=e,this.rawDestructor=n,this.baseClass=r,this.getActualType=o,this.upcast=u,this.downcast=M,this.pureVirtualFunctions=[]}function upcastPointer(c,t,e){for(;t!==e;)t.upcast||throwBindingError("Expected null or instance of "+e.name+", got an instance of "+t.name),c=t.upcast(c),t=t.baseClass;return c}function constNoSmartPtrRawPointerToWireType(c,t){if(null===t)return this.isReference&&throwBindingError("null is not a valid "+this.name),0;t.$$||throwBindingError('Cannot pass "'+_embind_repr(t)+'" as a '+this.name),t.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name);var e=t.$$.ptrType.registeredClass;return upcastPointer(t.$$.ptr,e,this.registeredClass)}function genericPointerToWireType(c,t){var e;if(null===t)return this.isReference&&throwBindingError("null is not a valid "+this.name),this.isSmartPointer?(e=this.rawConstructor(),null!==c&&c.push(this.rawDestructor,e),e):0;t.$$||throwBindingError('Cannot pass "'+_embind_repr(t)+'" as a '+this.name),t.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name),!this.isConst&&t.$$.ptrType.isConst&&throwBindingError("Cannot convert argument of type "+(t.$$.smartPtrType?t.$$.smartPtrType.name:t.$$.ptrType.name)+" to parameter type "+this.name);var n=t.$$.ptrType.registeredClass;if(e=upcastPointer(t.$$.ptr,n,this.registeredClass),this.isSmartPointer)switch(void 0===t.$$.smartPtr&&throwBindingError("Passing raw pointer to smart pointer is illegal"),this.sharingPolicy){case 0:t.$$.smartPtrType===this?e=t.$$.smartPtr:throwBindingError("Cannot convert argument of type "+(t.$$.smartPtrType?t.$$.smartPtrType.name:t.$$.ptrType.name)+" to parameter type "+this.name);break;case 1:e=t.$$.smartPtr;break;case 2:if(t.$$.smartPtrType===this)e=t.$$.smartPtr;else{var r=t.clone();e=this.rawShare(e,ic.toHandle((function(){r.delete()}))),null!==c&&c.push(this.rawDestructor,e)}break;default:throwBindingError("Unsupporting sharing policy")}return e}function nonConstNoSmartPtrRawPointerToWireType(c,t){if(null===t)return this.isReference&&throwBindingError("null is not a valid "+this.name),0;t.$$||throwBindingError('Cannot pass "'+_embind_repr(t)+'" as a '+this.name),t.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name),t.$$.ptrType.isConst&&throwBindingError("Cannot convert argument of type "+t.$$.ptrType.name+" to parameter type "+this.name);var e=t.$$.ptrType.registeredClass;return upcastPointer(t.$$.ptr,e,this.registeredClass)}function simpleReadValueFromPointer(c){return this.fromWireType(sl[c>>2])}function RegisteredPointer_getPointee(c){return this.rawGetPointee&&(c=this.rawGetPointee(c)),c}function RegisteredPointer_destructor(c){this.rawDestructor&&this.rawDestructor(c)}function RegisteredPointer_deleteObject(c){null!==c&&c.delete()}function RegisteredPointer(c,t,e,n,r,o,u,M,ll,cl,tl){this.name=c,this.registeredClass=t,this.isReference=e,this.isConst=n,this.isSmartPointer=r,this.pointeeType=o,this.sharingPolicy=u,this.rawGetPointee=M,this.rawConstructor=ll,this.rawShare=cl,this.rawDestructor=tl,r||void 0!==t.baseClass?this.toWireType=genericPointerToWireType:n?(this.toWireType=constNoSmartPtrRawPointerToWireType,this.destructorFunction=null):(this.toWireType=nonConstNoSmartPtrRawPointerToWireType,this.destructorFunction=null)}function dynCall(c,e,n){return c.includes("j")?function(c,e,n){var r=t["dynCall_"+c];return n&&n.length?r.apply(null,[e].concat(n)):r.call(null,e)}(c,e,n):getWasmTableEntry(e).apply(null,n)}function embind__requireFunction(c,t){var e,n,r,o=(c=readLatin1String(c)).includes("j")?(e=c,n=t,r=[],function(){return r.length=0,Object.assign(r,arguments),dynCall(e,n,r)}):getWasmTableEntry(t);return"function"!=typeof o&&throwBindingError("unknown function pointer with signature "+c+": "+t),o}var bc=void 0;function getTypeName(c){var t=Rc(c),e=readLatin1String(t);return hc(t),e}function throwUnboundTypeError(c,t){var e=[],n={};throw t.forEach((function visit(c){n[c]||_l[c]||(Al[c]?Al[c].forEach(visit):(e.push(c),n[c]=!0))})),new bc(c+": "+e.map(getTypeName).join([", "]))}function heap32VectorToArray(c,t){for(var e=[],n=0;n<c;n++)e.push(yl[(t>>2)+n]);return e}function runDestructors(c){for(;c.length;){var t=c.pop();c.pop()(t)}}function craftInvokerFunction(c,t,e,n,r){var o=t.length;o<2&&throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var u=null!==t[1]&&null!==e,M=!1,ll=1;ll<t.length;++ll)if(null!==t[ll]&&void 0===t[ll].destructorFunction){M=!0;break}var cl="void"!==t[0].name,tl="",Zl="";for(ll=0;ll<o-2;++ll)tl+=(0!==ll?", ":"")+"arg"+ll,Zl+=(0!==ll?", ":"")+"arg"+ll+"Wired";var dl="return function "+makeLegalFunctionName(c)+"("+tl+") {\nif (arguments.length !== "+(o-2)+") {\nthrowBindingError('function "+c+" called with ' + arguments.length + ' arguments, expected "+(o-2)+" args!');\n}\n";M&&(dl+="var destructors = [];\n");var el=M?"destructors":"null",nl=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],bl=[throwBindingError,n,r,runDestructors,t[0],t[1]];u&&(dl+="var thisWired = classParam.toWireType("+el+", this);\n");for(ll=0;ll<o-2;++ll)dl+="var arg"+ll+"Wired = argType"+ll+".toWireType("+el+", arg"+ll+"); // "+t[ll+2].name+"\n",nl.push("argType"+ll),bl.push(t[ll+2]);if(u&&(Zl="thisWired"+(Zl.length>0?", ":"")+Zl),dl+=(cl?"var rv = ":"")+"invoker(fn"+(Zl.length>0?", ":"")+Zl+");\n",M)dl+="runDestructors(destructors);\n";else for(ll=u?1:2;ll<t.length;++ll){var ml=1===ll?"thisWired":"arg"+(ll-2)+"Wired";null!==t[ll].destructorFunction&&(dl+=ml+"_dtor("+ml+"); // "+t[ll].name+"\n",nl.push(ml+"_dtor"),bl.push(t[ll].destructorFunction))}return cl&&(dl+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),dl+="}\n",nl.push(dl),function(c,t){if(!(c instanceof Function))throw new TypeError("new_ called with constructor type "+typeof c+" which is not a function");var e=createNamedFunction(c.name||"unknownFunctionName",(function(){}));e.prototype=c.prototype;var n=new e,r=c.apply(n,t);return r instanceof Object?r:n}(Function,nl).apply(null,bl)}var mc=[],ac=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function __emval_decref(c){c>4&&0==--ac[c].refcount&&(ac[c]=void 0,mc.push(c))}function count_emval_handles(){for(var c=0,t=5;t<ac.length;++t)void 0!==ac[t]&&++c;return c}function get_first_emval(){for(var c=5;c<ac.length;++c)if(void 0!==ac[c])return ac[c];return null}var ic={toValue:c=>(c||throwBindingError("Cannot use deleted val. handle = "+c),ac[c].value),toHandle:c=>{switch(c){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var t=mc.length?mc.pop():ac.length;return ac[t]={refcount:1,value:c},t}}};function _embind_repr(c){if(null===c)return"null";var t=typeof c;return"object"===t||"array"===t||"function"===t?c.toString():""+c}function floatReadValueFromPointer(c,t){switch(t){case 2:return function(c){return this.fromWireType(hl[c>>2])};case 3:return function(c){return this.fromWireType(Rl[c>>3])};default:throw new TypeError("Unknown float type: "+c)}}function integerReadValueFromPointer(c,t,e){switch(t){case 0:return e?function(c){return ol[c]}:function(c){return Vl[c]};case 1:return e?function(c){return Gl[c>>1]}:function(c){return ul[c>>1]};case 2:return e?function(c){return yl[c>>2]}:function(c){return sl[c>>2]};default:throw new TypeError("Unknown integer type: "+c)}}var rc;function _emscripten_get_heap_max(){return 2147483648}function emscripten_realloc_buffer(c){try{return al.grow(c-Wl.byteLength+65535>>>16),updateGlobalBufferAndViews(al.buffer),1}catch(c){}}rc=()=>performance.now();var Xc={};function getEnvStrings(){if(!getEnvStrings.strings){var c={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:cl||"./this.program"};for(var t in Xc)void 0===Xc[t]?delete c[t]:c[t]=Xc[t];var e=[];for(var t in c)e.push(t+"="+c[t]);getEnvStrings.strings=e}return getEnvStrings.strings}function __isLeapYear(c){return c%4==0&&(c%100!=0||c%400==0)}var Wc=[31,29,31,30,31,30,31,31,30,31,30,31],oc=[31,28,31,30,31,30,31,31,30,31,30,31];function _strftime(c,t,e,n){var r=yl[n+40>>2],o={tm_sec:yl[n>>2],tm_min:yl[n+4>>2],tm_hour:yl[n+8>>2],tm_mday:yl[n+12>>2],tm_mon:yl[n+16>>2],tm_year:yl[n+20>>2],tm_wday:yl[n+24>>2],tm_yday:yl[n+28>>2],tm_isdst:yl[n+32>>2],tm_gmtoff:yl[n+36>>2],tm_zone:r?UTF8ToString(r):""},u=UTF8ToString(e),M={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ll in M)u=u.replace(new RegExp(ll,"g"),M[ll]);var cl=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],tl=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(c,t,e){for(var n="number"==typeof c?c.toString():c||"";n.length<t;)n=e[0]+n;return n}function leadingNulls(c,t){return leadingSomething(c,t,"0")}function compareByDay(c,t){function sgn(c){return c<0?-1:c>0?1:0}var e;return 0===(e=sgn(c.getFullYear()-t.getFullYear()))&&0===(e=sgn(c.getMonth()-t.getMonth()))&&(e=sgn(c.getDate()-t.getDate())),e}function getFirstWeekStartDate(c){switch(c.getDay()){case 0:return new Date(c.getFullYear()-1,11,29);case 1:return c;case 2:return new Date(c.getFullYear(),0,3);case 3:return new Date(c.getFullYear(),0,2);case 4:return new Date(c.getFullYear(),0,1);case 5:return new Date(c.getFullYear()-1,11,31);case 6:return new Date(c.getFullYear()-1,11,30)}}function getWeekBasedYear(c){var t=function(c,t){for(var e=new Date(c.getTime());t>0;){var n=__isLeapYear(e.getFullYear()),r=e.getMonth(),o=(n?Wc:oc)[r];if(!(t>o-e.getDate()))return e.setDate(e.getDate()+t),e;t-=o-e.getDate()+1,e.setDate(1),r<11?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return e}(new Date(c.tm_year+1900,0,1),c.tm_yday),e=new Date(t.getFullYear(),0,4),n=new Date(t.getFullYear()+1,0,4),r=getFirstWeekStartDate(e),o=getFirstWeekStartDate(n);return compareByDay(r,t)<=0?compareByDay(o,t)<=0?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var Zl={"%a":function(c){return cl[c.tm_wday].substring(0,3)},"%A":function(c){return cl[c.tm_wday]},"%b":function(c){return tl[c.tm_mon].substring(0,3)},"%B":function(c){return tl[c.tm_mon]},"%C":function(c){return leadingNulls((c.tm_year+1900)/100|0,2)},"%d":function(c){return leadingNulls(c.tm_mday,2)},"%e":function(c){return leadingSomething(c.tm_mday,2," ")},"%g":function(c){return getWeekBasedYear(c).toString().substring(2)},"%G":function(c){return getWeekBasedYear(c)},"%H":function(c){return leadingNulls(c.tm_hour,2)},"%I":function(c){var t=c.tm_hour;return 0==t?t=12:t>12&&(t-=12),leadingNulls(t,2)},"%j":function(c){return leadingNulls(c.tm_mday+function(c,t){for(var e=0,n=0;n<=t;e+=c[n++]);return e}(__isLeapYear(c.tm_year+1900)?Wc:oc,c.tm_mon-1),3)},"%m":function(c){return leadingNulls(c.tm_mon+1,2)},"%M":function(c){return leadingNulls(c.tm_min,2)},"%n":function(){return"\n"},"%p":function(c){return c.tm_hour>=0&&c.tm_hour<12?"AM":"PM"},"%S":function(c){return leadingNulls(c.tm_sec,2)},"%t":function(){return"\t"},"%u":function(c){return c.tm_wday||7},"%U":function(c){var t=c.tm_yday+7-c.tm_wday;return leadingNulls(Math.floor(t/7),2)},"%V":function(c){var t=Math.floor((c.tm_yday+7-(c.tm_wday+6)%7)/7);if((c.tm_wday+371-c.tm_yday-2)%7<=2&&t++,t){if(53==t){var e=(c.tm_wday+371-c.tm_yday)%7;4==e||3==e&&__isLeapYear(c.tm_year)||(t=1)}}else{t=52;var n=(c.tm_wday+7-c.tm_yday-1)%7;(4==n||5==n&&__isLeapYear(c.tm_year%400-1))&&t++}return leadingNulls(t,2)},"%w":function(c){return c.tm_wday},"%W":function(c){var t=c.tm_yday+7-(c.tm_wday+6)%7;return leadingNulls(Math.floor(t/7),2)},"%y":function(c){return(c.tm_year+1900).toString().substring(2)},"%Y":function(c){return c.tm_year+1900},"%z":function(c){var t=c.tm_gmtoff,e=t>=0;return t=(t=Math.abs(t)/60)/60*100+t%60,(e?"+":"-")+String("0000"+t).slice(-4)},"%Z":function(c){return c.tm_zone},"%%":function(){return"%"}};for(var ll in u=u.replace(/%%/g,"\0\0"),Zl)u.includes(ll)&&(u=u.replace(new RegExp(ll,"g"),Zl[ll](o)));var dl=intArrayFromString(u=u.replace(/\0\0/g,"%"),!1);return dl.length>t?0:(function(c,t){ol.set(c,t)}(dl,c),dl.length-1)}var FSNode=function(c,t,e,n){c||(c=this),this.parent=c,this.mount=c.mount,this.mounted=null,this.id=jl.nextInode++,this.name=t,this.mode=e,this.node_ops={},this.stream_ops={},this.rdev=n},Vc=365,Gc=146;function intArrayFromString(c,t,e){var n=e>0?e:lengthBytesUTF8(c)+1,r=new Array(n),o=stringToUTF8Array(c,r,0,r.length);return t&&(r.length=o),r}Object.defineProperties(FSNode.prototype,{read:{get:function(){return(this.mode&Vc)===Vc},set:function(c){c?this.mode|=Vc:this.mode&=-366}},write:{get:function(){return(this.mode&Gc)===Gc},set:function(c){c?this.mode|=Gc:this.mode&=-147}},isFolder:{get:function(){return jl.isDir(this.mode)}},isDevice:{get:function(){return jl.isChrdev(this.mode)}}}),jl.FSNode=FSNode,jl.staticInit(),function(){for(var c=new Array(256),t=0;t<256;++t)c[t]=String.fromCharCode(t);Ol=c}(),lc=t.BindingError=extendError(Error,"BindingError"),cc=t.InternalError=extendError(Error,"InternalError"),ClassHandle.prototype.isAliasOf=ClassHandle_isAliasOf,ClassHandle.prototype.clone=ClassHandle_clone,ClassHandle.prototype.delete=ClassHandle_delete,ClassHandle.prototype.isDeleted=ClassHandle_isDeleted,ClassHandle.prototype.deleteLater=ClassHandle_deleteLater,t.getInheritedInstanceCount=getInheritedInstanceCount,t.getLiveInheritedInstances=getLiveInheritedInstances,t.flushPendingDeletes=flushPendingDeletes,t.setDelayFunction=setDelayFunction,RegisteredPointer.prototype.getPointee=RegisteredPointer_getPointee,RegisteredPointer.prototype.destructor=RegisteredPointer_destructor,RegisteredPointer.prototype.argPackAdvance=8,RegisteredPointer.prototype.readValueFromPointer=simpleReadValueFromPointer,RegisteredPointer.prototype.deleteObject=RegisteredPointer_deleteObject,RegisteredPointer.prototype.fromWireType=RegisteredPointer_fromWireType,bc=t.UnboundTypeError=extendError(Error,"UnboundTypeError"),t.count_emval_handles=count_emval_handles,t.get_first_emval=get_first_emval;var uc,yc={a:function(c,t,e,n){abort("Assertion failed: "+UTF8ToString(c)+", at: "+[t?UTF8ToString(t):"unknown filename",e,n?UTF8ToString(n):"unknown function"])},k:function(c){return sc(c+24)+24},t:function(c){var t=new ExceptionInfo(c);return t.get_caught()||(t.set_caught(!0),wl--),t.set_rethrown(!1),Sl.push(t),exception_addRef(t),t.get_exception_ptr()},ia:function(){if(!Sl.length)return 0;var c=Sl[Sl.length-1];return exception_addRef(c),c.excPtr},R:function(c){c&&exception_decRef(new ExceptionInfo(c))},v:function(){Jc(0),exception_decRef(Sl.pop()),xl=0},d:function(){var c=xl;if(!c)return setTempRet0(0),0;var t=new ExceptionInfo(c);t.set_adjusted_ptr(c);var e=t.get_type();if(!e)return setTempRet0(0),c;for(var n=Array.prototype.slice.call(arguments),r=0;r<n.length;r++){var o=n[r];if(0===o||o===e)break;var u=t.ptr+16;if(Hc(o,e,u))return setTempRet0(o),c}return setTempRet0(e),c},i:function(){var c=xl;if(!c)return setTempRet0(0),0;var t=new ExceptionInfo(c);t.set_adjusted_ptr(c);var e=t.get_type();if(!e)return setTempRet0(0),c;for(var n=Array.prototype.slice.call(arguments),r=0;r<n.length;r++){var o=n[r];if(0===o||o===e)break;var u=t.ptr+16;if(Hc(o,e,u))return setTempRet0(o),c}return setTempRet0(e),c},r:___cxa_free_exception,Q:function(c){c&&exception_addRef(new ExceptionInfo(c))},X:___cxa_rethrow,ha:function(c){if(c){var t=new ExceptionInfo(c);Sl.push(t),t.set_rethrown(!0),___cxa_rethrow()}},p:function(c,t,e){throw new ExceptionInfo(c).init(t,e),xl=c,wl++,c},ja:function(){return wl},g:function(c){throw xl||(xl=c),c},wa:function(c,t){try{var e=Ql.getStreamFromFD(c);return Ql.doStat(jl.stat,e.path,t)}catch(c){if(void 0===jl||!(c instanceof jl.ErrnoError))throw c;return-c.errno}},ca:function(c,t,e){try{var n=4294967296*e+(t>>>0);return jl.ftruncate(c,n),0}catch(c){if(void 0===jl||!(c instanceof jl.ErrnoError))throw c;return-c.errno}},ta:function(c,t){try{return c=Ql.getStr(c),Ql.doStat(jl.lstat,c,t)}catch(c){if(void 0===jl||!(c instanceof jl.ErrnoError))throw c;return-c.errno}},ua:function(c,t,e,n){try{t=Ql.getStr(t);var r=256&n,o=4096&n;return n&=-4353,t=Ql.calculateAt(c,t,o),Ql.doStat(r?jl.lstat:jl.stat,t,e)}catch(c){if(void 0===jl||!(c instanceof jl.ErrnoError))throw c;return-c.errno}},xa:function(c,t,e,n){Ql.varargs=n;try{t=Ql.getStr(t),t=Ql.calculateAt(c,t);var r=n?Ql.get():0;return jl.open(t,e,r).fd}catch(c){if(void 0===jl||!(c instanceof jl.ErrnoError))throw c;return-c.errno}},na:function(c,t,e,n){try{return t=Ql.getStr(t),n=Ql.getStr(n),t=Ql.calculateAt(c,t),n=Ql.calculateAt(e,n),jl.rename(t,n),0}catch(c){if(void 0===jl||!(c instanceof jl.ErrnoError))throw c;return-c.errno}},va:function(c,t){try{return c=Ql.getStr(c),Ql.doStat(jl.stat,c,t)}catch(c){if(void 0===jl||!(c instanceof jl.ErrnoError))throw c;return-c.errno}},la:function(c,t,e){try{return t=Ql.getStr(t),t=Ql.calculateAt(c,t),0===e?jl.unlink(t):512===e?jl.rmdir(t):abort("Invalid flags passed to unlinkat"),0}catch(c){if(void 0===jl||!(c instanceof jl.ErrnoError))throw c;return-c.errno}},Aa:function(c){},Ca:function(c,t){abort(Pl)},Ba:function(c,t){abort(Pl)},da:function(c,t,e,n,r){},Ea:function(c,t,e,n,r){var o=getShiftFromSize(e);registerType(c,{name:t=readLatin1String(t),fromWireType:function(c){return!!c},toWireType:function(c,t){return t?n:r},argPackAdvance:8,readValueFromPointer:function(c){var n;if(1===e)n=ol;else if(2===e)n=Gl;else{if(4!==e)throw new TypeError("Unknown boolean type size: "+t);n=yl}return this.fromWireType(n[c>>o])},destructorFunction:null})},Ma:function(c,e,n,r,o,u,M,ll,cl,tl,Zl,dl,el){Zl=readLatin1String(Zl),u=embind__requireFunction(o,u),ll&&(ll=embind__requireFunction(M,ll)),tl&&(tl=embind__requireFunction(cl,tl)),el=embind__requireFunction(dl,el);var nl=makeLegalFunctionName(Zl);!function(c,e,n){t.hasOwnProperty(c)?((void 0===n||void 0!==t[c].overloadTable&&void 0!==t[c].overloadTable[n])&&throwBindingError("Cannot register public name '"+c+"' twice"),ensureOverloadTable(t,c,c),t.hasOwnProperty(n)&&throwBindingError("Cannot register multiple overloads of a function with the same number of arguments ("+n+")!"),t[c].overloadTable[n]=e):(t[c]=e,void 0!==n&&(t[c].numArguments=n))}(nl,(function(){throwUnboundTypeError("Cannot construct "+Zl+" due to unbound types",[r])})),whenDependentTypesAreResolved([c,e,n],r?[r]:[],(function(e){var n,o;e=e[0],o=r?(n=e.registeredClass).instancePrototype:ClassHandle.prototype;var M=createNamedFunction(nl,(function(){if(Object.getPrototypeOf(this)!==cl)throw new lc("Use 'new' to construct "+Zl);if(void 0===dl.constructor_body)throw new lc(Zl+" has no accessible constructor");var c=dl.constructor_body[arguments.length];if(void 0===c)throw new lc("Tried to invoke ctor of "+Zl+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(dl.constructor_body).toString()+") parameters instead!");return c.apply(this,arguments)})),cl=Object.create(o,{constructor:{value:M}});M.prototype=cl;var dl=new RegisteredClass(Zl,M,cl,el,n,u,ll,tl),bl=new RegisteredPointer(Zl,dl,!0,!1,!1),ml=new RegisteredPointer(Zl+"*",dl,!1,!1,!1),al=new RegisteredPointer(Zl+" const*",dl,!1,!0,!1);return Zc[c]={pointerType:ml,constPointerType:al},function(c,e,n){t.hasOwnProperty(c)||throwInternalError("Replacing nonexistant public symbol"),void 0!==t[c].overloadTable&&void 0!==n?t[c].overloadTable[n]=e:(t[c]=e,t[c].argCount=n)}(nl,M),[bl,ml,al]}))},La:function(c,t,e,n,r,o){assert(t>0);var u=heap32VectorToArray(t,e);r=embind__requireFunction(n,r),whenDependentTypesAreResolved([],[c],(function(c){var e="constructor "+(c=c[0]).name;if(void 0===c.registeredClass.constructor_body&&(c.registeredClass.constructor_body=[]),void 0!==c.registeredClass.constructor_body[t-1])throw new lc("Cannot register multiple constructors with identical number of parameters ("+(t-1)+") for class '"+c.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!");return c.registeredClass.constructor_body[t-1]=()=>{throwUnboundTypeError("Cannot construct "+c.name+" due to unbound types",u)},whenDependentTypesAreResolved([],u,(function(n){return n.splice(1,0,null),c.registeredClass.constructor_body[t-1]=craftInvokerFunction(e,n,null,r,o),[]})),[]}))},w:function(c,t,e,n,r,o,u,M){var ll=heap32VectorToArray(e,n);t=readLatin1String(t),o=embind__requireFunction(r,o),whenDependentTypesAreResolved([],[c],(function(c){var n=(c=c[0]).name+"."+t;function unboundTypesHandler(){throwUnboundTypeError("Cannot call "+n+" due to unbound types",ll)}t.startsWith("@@")&&(t=Symbol[t.substring(2)]),M&&c.registeredClass.pureVirtualFunctions.push(t);var r=c.registeredClass.instancePrototype,cl=r[t];return void 0===cl||void 0===cl.overloadTable&&cl.className!==c.name&&cl.argCount===e-2?(unboundTypesHandler.argCount=e-2,unboundTypesHandler.className=c.name,r[t]=unboundTypesHandler):(ensureOverloadTable(r,t,n),r[t].overloadTable[e-2]=unboundTypesHandler),whenDependentTypesAreResolved([],ll,(function(M){var ll=craftInvokerFunction(n,M,c,o,u);return void 0===r[t].overloadTable?(ll.argCount=e-2,r[t]=ll):r[t].overloadTable[e-2]=ll,[]})),[]}))},Da:function(c,t){registerType(c,{name:t=readLatin1String(t),fromWireType:function(c){var t=ic.toValue(c);return __emval_decref(c),t},toWireType:function(c,t){return ic.toHandle(t)},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:null})},W:function(c,t,e){var n=getShiftFromSize(e);registerType(c,{name:t=readLatin1String(t),fromWireType:function(c){return c},toWireType:function(c,t){return t},argPackAdvance:8,readValueFromPointer:floatReadValueFromPointer(t,n),destructorFunction:null})},y:function(c,t,e,n,r){t=readLatin1String(t),-1===r&&(r=4294967295);var o=getShiftFromSize(e),fromWireType=c=>c;if(0===n){var u=32-8*e;fromWireType=c=>c<<u>>>u}var M=t.includes("unsigned");registerType(c,{name:t,fromWireType:fromWireType,toWireType:M?function(c,t){return this.name,t>>>0}:function(c,t){return this.name,t},argPackAdvance:8,readValueFromPointer:integerReadValueFromPointer(t,o,0!==n),destructorFunction:null})},s:function(c,t,e){var n=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][t];function decodeMemoryView(c){var t=sl,e=t[c>>=2],r=t[c+1];return new n(Wl,r,e)}registerType(c,{name:e=readLatin1String(e),fromWireType:decodeMemoryView,argPackAdvance:8,readValueFromPointer:decodeMemoryView},{ignoreDuplicateRegistrations:!0})},V:function(c,t){var e="std::string"===(t=readLatin1String(t));registerType(c,{name:t,fromWireType:function(c){var t,n=sl[c>>2];if(e)for(var r=c+4,o=0;o<=n;++o){var u=c+4+o;if(o==n||0==Vl[u]){var M=UTF8ToString(r,u-r);void 0===t?t=M:(t+=String.fromCharCode(0),t+=M),r=u+1}}else{var ll=new Array(n);for(o=0;o<n;++o)ll[o]=String.fromCharCode(Vl[c+4+o]);t=ll.join("")}return hc(c),t},toWireType:function(c,t){t instanceof ArrayBuffer&&(t=new Uint8Array(t));var n="string"==typeof t;n||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int8Array||throwBindingError("Cannot pass non-string to std::string");var r=(e&&n?()=>lengthBytesUTF8(t):()=>t.length)(),o=sc(4+r+1);if(sl[o>>2]=r,e&&n)stringToUTF8Array(t,Vl,o+4,r+1);else if(n)for(var u=0;u<r;++u){var M=t.charCodeAt(u);M>255&&(hc(o),throwBindingError("String has UTF-16 code units that do not fit in 8 bits")),Vl[o+4+u]=M}else for(u=0;u<r;++u)Vl[o+4+u]=t[u];return null!==c&&c.push(hc,o),o},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:function(c){hc(c)}})},L:function(c,t,e){var n,r,o,u,M;e=readLatin1String(e),2===t?(n=UTF16ToString,r=stringToUTF16,u=lengthBytesUTF16,o=()=>ul,M=1):4===t&&(n=UTF32ToString,r=stringToUTF32,u=lengthBytesUTF32,o=()=>sl,M=2),registerType(c,{name:e,fromWireType:function(c){for(var e,r=sl[c>>2],u=o(),ll=c+4,cl=0;cl<=r;++cl){var tl=c+4+cl*t;if(cl==r||0==u[tl>>M]){var Zl=n(ll,tl-ll);void 0===e?e=Zl:(e+=String.fromCharCode(0),e+=Zl),ll=tl+t}}return hc(c),e},toWireType:function(c,n){"string"!=typeof n&&throwBindingError("Cannot pass non-string to C++ string type "+e);var o=u(n),ll=sc(4+o+t);return sl[ll>>2]=o>>M,r(n,ll+4,o+t),null!==c&&c.push(hc,ll),ll},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:function(c){hc(c)}})},Fa:function(c,t){registerType(c,{isVoid:!0,name:t=readLatin1String(t),argPackAdvance:0,fromWireType:function(){},toWireType:function(c,t){}})},T:function(){return Date.now()},ya:function(){return true},Ka:__emval_decref,ba:function(c){c>4&&(ac[c].refcount+=1)},G:function(c,t){var e,n,r;n="_emval_take_value",void 0===(r=_l[e=c])&&throwBindingError(n+" has unknown type "+getTypeName(e));var o=(c=r).readValueFromPointer(t);return ic.toHandle(o)},oa:function(c,t,e,n,r,o,u,M){try{var ll=jl.getStream(r);if(!ll)return-8;var cl=jl.mmap(ll,c,t,o,e,n),tl=cl.ptr;return yl[u>>2]=cl.allocated,tl}catch(c){if(void 0===jl||!(c instanceof jl.ErrnoError))throw c;return-c.errno}},pa:function(c,t,e,n,r,o){try{var u=jl.getStream(r);u&&(2&e&&Ql.doMsync(c,u,t,n,o),jl.munmap(u))}catch(c){if(void 0===jl||!(c instanceof jl.ErrnoError))throw c;return-c.errno}},b:function(){abort("")},ma:_emscripten_get_heap_max,K:rc,za:function(c,t,e){Vl.copyWithin(c,t,t+e)},ka:function(c){var t=Vl.length,e=2147483648;if((c>>>=0)>e)return!1;let alignUp=(c,t)=>c+(t-c%t)%t;for(var n=1;n<=4;n*=2){var r=t*(1+.2/n);if(r=Math.min(r,c+100663296),emscripten_realloc_buffer(Math.min(e,alignUp(Math.max(c,r),65536))))return!0}return!1},qa:function(c,t){var e=0;return getEnvStrings().forEach((function(n,r){var o=t+e;yl[c+4*r>>2]=o,function(c,t,e){for(var n=0;n<c.length;++n)ol[t++>>0]=c.charCodeAt(n);e||(ol[t>>0]=0)}(n,o),e+=n.length+1})),0},ra:function(c,t){var e=getEnvStrings();yl[c>>2]=e.length;var n=0;return e.forEach((function(c){n+=c.length+1})),yl[t>>2]=n,0},Ga:function(c){!function(c,e){c,keepRuntimeAlive()||(Yc(),callRuntimeCallbacks(Il),jl.quit(),El.shutdown(),!0);!function(c){c,keepRuntimeAlive()||(t.onExit&&t.onExit(c),rl=!0);quit_(c,new ExitStatus(c))}(c)}(c)},U:function(c){try{var t=Ql.getStreamFromFD(c);return jl.close(t),0}catch(c){if(void 0===jl||!(c instanceof jl.ErrnoError))throw c;return c.errno}},S:function(c,t,e,n){try{var r=function(c,t,e,n){for(var r=0,o=0;o<e;o++){var u=sl[t>>2],M=sl[t+4>>2];t+=8;var ll=jl.read(c,ol,u,M,n);if(ll<0)return-1;if(r+=ll,ll<M)break}return r}(Ql.getStreamFromFD(c),t,e);return yl[n>>2]=r,0}catch(c){if(void 0===jl||!(c instanceof jl.ErrnoError))throw c;return c.errno}},aa:function(c,t,e,n,r){try{var o=Ql.getStreamFromFD(c),u=4294967296*e+(t>>>0),M=9007199254740992;return u<=-M||u>=M?61:(jl.llseek(o,u,n),Kl=[o.position>>>0,(Tl=o.position,+Math.abs(Tl)>=1?Tl>0?(0|Math.min(+Math.floor(Tl/4294967296),4294967295))>>>0:~~+Math.ceil((Tl-+(~~Tl>>>0))/4294967296)>>>0:0)],yl[r>>2]=Kl[0],yl[r+4>>2]=Kl[1],o.getdents&&0===u&&0===n&&(o.getdents=null),0)}catch(c){if(void 0===jl||!(c instanceof jl.ErrnoError))throw c;return c.errno}},sa:function(c){try{var t=Ql.getStreamFromFD(c);return t.stream_ops&&t.stream_ops.fsync?-t.stream_ops.fsync(t):0}catch(c){if(void 0===jl||!(c instanceof jl.ErrnoError))throw c;return c.errno}},J:function(c,t,e,n){try{var r=function(c,t,e,n){for(var r=0,o=0;o<e;o++){var u=sl[t>>2],M=sl[t+4>>2];t+=8;var ll=jl.write(c,ol,u,M,n);if(ll<0)return-1;r+=ll}return r}(Ql.getStreamFromFD(c),t,e);return yl[n>>2]=r,0}catch(c){if(void 0===jl||!(c instanceof jl.ErrnoError))throw c;return c.errno}},c:function(){return ml},ea:function _getentropy(c,t){_getentropy.randomDevice||(_getentropy.randomDevice=getRandomDevice());for(var e=0;e<t;e++)ol[c+e>>0]=_getentropy.randomDevice();return 0},N:function(c,t,e,n){var r=Ic();try{return getWasmTableEntry(c)(t,e,n)}catch(c){if(Nc(r),c!==c+0)throw c;Jc(1,0)}},Ja:function(c,t){var e=Ic();try{return getWasmTableEntry(c)(t)}catch(c){if(Nc(e),c!==c+0)throw c;Jc(1,0)}},O:function(c,t,e,n){var r=Ic();try{return getWasmTableEntry(c)(t,e,n)}catch(c){if(Nc(r),c!==c+0)throw c;Jc(1,0)}},q:function(c){var t=Ic();try{return getWasmTableEntry(c)()}catch(c){if(Nc(t),c!==c+0)throw c;Jc(1,0)}},f:function(c,t){var e=Ic();try{return getWasmTableEntry(c)(t)}catch(c){if(Nc(e),c!==c+0)throw c;Jc(1,0)}},Ha:function(c,t,e,n,r){var o=Ic();try{return getWasmTableEntry(c)(t,e,n,r)}catch(c){if(Nc(o),c!==c+0)throw c;Jc(1,0)}},e:function(c,t,e){var n=Ic();try{return getWasmTableEntry(c)(t,e)}catch(c){if(Nc(n),c!==c+0)throw c;Jc(1,0)}},l:function(c,t,e,n){var r=Ic();try{return getWasmTableEntry(c)(t,e,n)}catch(c){if(Nc(r),c!==c+0)throw c;Jc(1,0)}},m:function(c,t,e,n,r){var o=Ic();try{return getWasmTableEntry(c)(t,e,n,r)}catch(c){if(Nc(o),c!==c+0)throw c;Jc(1,0)}},ga:function(c,t,e,n,r,o){var u=Ic();try{return getWasmTableEntry(c)(t,e,n,r,o)}catch(c){if(Nc(u),c!==c+0)throw c;Jc(1,0)}},C:function(c,t,e,n,r,o){var u=Ic();try{return getWasmTableEntry(c)(t,e,n,r,o)}catch(c){if(Nc(u),c!==c+0)throw c;Jc(1,0)}},x:function(c,t,e,n,r,o,u){var M=Ic();try{return getWasmTableEntry(c)(t,e,n,r,o,u)}catch(c){if(Nc(M),c!==c+0)throw c;Jc(1,0)}},P:function(c,t,e,n,r,o,u,M){var ll=Ic();try{return getWasmTableEntry(c)(t,e,n,r,o,u,M)}catch(c){if(Nc(ll),c!==c+0)throw c;Jc(1,0)}},F:function(c,t,e,n,r,o,u,M,ll,cl,tl,Zl){var dl=Ic();try{return getWasmTableEntry(c)(t,e,n,r,o,u,M,ll,cl,tl,Zl)}catch(c){if(Nc(dl),c!==c+0)throw c;Jc(1,0)}},$:function(c){var t=Ic();try{return fc(c)}catch(c){if(Nc(t),c!==c+0)throw c;Jc(1,0)}},_:function(c,t,e,n,r){var o=Ic();try{return kc(c,t,e,n,r)}catch(c){if(Nc(o),c!==c+0)throw c;Jc(1,0)}},n:function(c){var t=Ic();try{getWasmTableEntry(c)()}catch(c){if(Nc(t),c!==c+0)throw c;Jc(1,0)}},j:function(c,t){var e=Ic();try{getWasmTableEntry(c)(t)}catch(c){if(Nc(e),c!==c+0)throw c;Jc(1,0)}},h:function(c,t,e){var n=Ic();try{getWasmTableEntry(c)(t,e)}catch(c){if(Nc(n),c!==c+0)throw c;Jc(1,0)}},A:function(c,t,e,n){var r=Ic();try{getWasmTableEntry(c)(t,e,n)}catch(c){if(Nc(r),c!==c+0)throw c;Jc(1,0)}},M:function(c,t,e,n,r){var o=Ic();try{getWasmTableEntry(c)(t,e,n,r)}catch(c){if(Nc(o),c!==c+0)throw c;Jc(1,0)}},o:function(c,t,e,n){var r=Ic();try{getWasmTableEntry(c)(t,e,n)}catch(c){if(Nc(r),c!==c+0)throw c;Jc(1,0)}},Ia:function(c,t,e,n,r,o,u,M){var ll=Ic();try{getWasmTableEntry(c)(t,e,n,r,o,u,M)}catch(c){if(Nc(ll),c!==c+0)throw c;Jc(1,0)}},H:function(c,t,e,n,r){var o=Ic();try{getWasmTableEntry(c)(t,e,n,r)}catch(c){if(Nc(o),c!==c+0)throw c;Jc(1,0)}},Y:function(c,t,e,n,r,o,u){var M=Ic();try{getWasmTableEntry(c)(t,e,n,r,o,u)}catch(c){if(Nc(M),c!==c+0)throw c;Jc(1,0)}},Z:function(c,t,e,n,r,o){var u=Ic();try{getWasmTableEntry(c)(t,e,n,r,o)}catch(c){if(Nc(u),c!==c+0)throw c;Jc(1,0)}},u:function(c,t,e,n,r,o,u,M){var ll=Ic();try{getWasmTableEntry(c)(t,e,n,r,o,u,M)}catch(c){if(Nc(ll),c!==c+0)throw c;Jc(1,0)}},D:function(c,t,e,n,r,o,u,M,ll,cl){var tl=Ic();try{getWasmTableEntry(c)(t,e,n,r,o,u,M,ll,cl)}catch(c){if(Nc(tl),c!==c+0)throw c;Jc(1,0)}},I:function(c,t,e,n,r,o,u,M,ll){var cl=Ic();try{getWasmTableEntry(c)(t,e,n,r,o,u,M,ll)}catch(c){if(Nc(cl),c!==c+0)throw c;Jc(1,0)}},B:function(c,t,e,n,r,o,u,M,ll,cl,tl){var Zl=Ic();try{getWasmTableEntry(c)(t,e,n,r,o,u,M,ll,cl,tl)}catch(c){if(Nc(Zl),c!==c+0)throw c;Jc(1,0)}},E:function(c,t,e,n,r,o,u,M,ll,cl,tl,Zl,dl,el,nl,bl){var ml=Ic();try{getWasmTableEntry(c)(t,e,n,r,o,u,M,ll,cl,tl,Zl,dl,el,nl,bl)}catch(c){if(Nc(ml),c!==c+0)throw c;Jc(1,0)}},z:function(c){setTempRet0(c)},fa:function(c,t,e,n){return _strftime(c,t,e,n)}},sc=(function(){var c={a:yc};function receiveInstance(c,e){var n,r=c.exports;t.asm=r,updateGlobalBufferAndViews((al=t.asm.Na).buffer),Yl=t.asm.Pa,n=t.asm.Oa,Jl.unshift(n),removeRunDependency()}function receiveInstantiationResult(c){receiveInstance(c.instance)}function instantiateArrayBuffer(t){return(bl||!tl&&!Zl||"function"!=typeof fetch?Promise.resolve().then((function(){return getBinary(Ul)})):fetch(Ul,{credentials:"same-origin"}).then((function(c){if(!c.ok)throw"failed to load wasm binary file at '"+Ul+"'";return c.arrayBuffer()})).catch((function(){return getBinary(Ul)}))).then((function(t){return WebAssembly.instantiate(t,c)})).then((function(c){return c})).then(t,(function(c){nl("failed to asynchronously prepare wasm: "+c),abort(c)}))}if(addRunDependency(),t.instantiateWasm)try{return t.instantiateWasm(c,receiveInstance)}catch(c){return nl("Module.instantiateWasm callback failed with error: "+c),!1}(bl||"function"!=typeof WebAssembly.instantiateStreaming||isDataURI(Ul)||"function"!=typeof fetch?instantiateArrayBuffer(receiveInstantiationResult):fetch(Ul,{credentials:"same-origin"}).then((function(t){return WebAssembly.instantiateStreaming(t,c).then(receiveInstantiationResult,(function(c){return nl("wasm streaming compile failed: "+c),nl("falling back to ArrayBuffer instantiation"),instantiateArrayBuffer(receiveInstantiationResult)}))}))).catch(n)}(),t.___wasm_call_ctors=function(){return(t.___wasm_call_ctors=t.asm.Oa).apply(null,arguments)},t._malloc=function(){return(sc=t._malloc=t.asm.Qa).apply(null,arguments)}),hc=t._free=function(){return(hc=t._free=t.asm.Ra).apply(null,arguments)},Rc=t.___getTypeName=function(){return(Rc=t.___getTypeName=t.asm.Sa).apply(null,arguments)},pc=(t.___embind_register_native_and_builtin_types=function(){return(t.___embind_register_native_and_builtin_types=t.asm.Ta).apply(null,arguments)},t.___stdio_exit=function(){return(pc=t.___stdio_exit=t.asm.Ua).apply(null,arguments)}),Yc=t.___funcs_on_exit=function(){return(Yc=t.___funcs_on_exit=t.asm.Va).apply(null,arguments)},Fc=t._emscripten_builtin_memalign=function(){return(Fc=t._emscripten_builtin_memalign=t.asm.Wa).apply(null,arguments)},Jc=t._setThrew=function(){return(Jc=t._setThrew=t.asm.Xa).apply(null,arguments)},Ic=t.stackSave=function(){return(Ic=t.stackSave=t.asm.Ya).apply(null,arguments)},Nc=t.stackRestore=function(){return(Nc=t.stackRestore=t.asm.Za).apply(null,arguments)},Hc=t.___cxa_can_catch=function(){return(Hc=t.___cxa_can_catch=t.asm._a).apply(null,arguments)},vc=t.___cxa_is_pointer_type=function(){return(vc=t.___cxa_is_pointer_type=t.asm.$a).apply(null,arguments)},fc=(t.dynCall_iiiij=function(){return(t.dynCall_iiiij=t.asm.ab).apply(null,arguments)},t.dynCall_jii=function(){return(t.dynCall_jii=t.asm.bb).apply(null,arguments)},t.dynCall_jjj=function(){return(t.dynCall_jjj=t.asm.cb).apply(null,arguments)},t.dynCall_jji=function(){return(t.dynCall_jji=t.asm.db).apply(null,arguments)},t.dynCall_jiii=function(){return(t.dynCall_jiii=t.asm.eb).apply(null,arguments)},t.dynCall_iiiijj=function(){return(t.dynCall_iiiijj=t.asm.fb).apply(null,arguments)},t.dynCall_viijj=function(){return(t.dynCall_viijj=t.asm.gb).apply(null,arguments)},t.dynCall_viiijjjj=function(){return(t.dynCall_viiijjjj=t.asm.hb).apply(null,arguments)},t.dynCall_iijjiiii=function(){return(t.dynCall_iijjiiii=t.asm.ib).apply(null,arguments)},t.dynCall_jiji=function(){return(t.dynCall_jiji=t.asm.jb).apply(null,arguments)},t.dynCall_j=function(){return(fc=t.dynCall_j=t.asm.kb).apply(null,arguments)}),kc=(t.dynCall_viijii=function(){return(t.dynCall_viijii=t.asm.lb).apply(null,arguments)},t.dynCall_jiiii=function(){return(kc=t.dynCall_jiiii=t.asm.mb).apply(null,arguments)});t.dynCall_iiiiij=function(){return(t.dynCall_iiiiij=t.asm.nb).apply(null,arguments)},t.dynCall_iiiiijj=function(){return(t.dynCall_iiiiijj=t.asm.ob).apply(null,arguments)},t.dynCall_iiiiiijj=function(){return(t.dynCall_iiiiiijj=t.asm.pb).apply(null,arguments)};function ExitStatus(c){this.name="ExitStatus",this.message="Program terminated with exit("+c+")",this.status=c}function run(c){function doRun(){uc||(uc=!0,t.calledRun=!0,rl||(!0,t.noFSInit||jl.init.initialized||jl.init(),jl.ignorePermissions=!1,El.init(),callRuntimeCallbacks(Jl),e(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),function(){if(t.postRun)for("function"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;)c=t.postRun.shift(),Nl.unshift(c);var c;callRuntimeCallbacks(Nl)}()))}c=c||ll,vl>0||(!function(){if(t.preRun)for("function"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)c=t.preRun.shift(),Fl.unshift(c);var c;callRuntimeCallbacks(Fl)}(),vl>0||(t.setStatus?(t.setStatus("Running..."),setTimeout((function(){setTimeout((function(){t.setStatus("")}),1),doRun()}),1)):doRun()))}if(kl=function runCaller(){uc||run(),uc||(kl=runCaller)},t.run=run,t.preInit)for("function"==typeof t.preInit&&(t.preInit=[t.preInit]);t.preInit.length>0;)t.preInit.pop()();return run(),t.ready}})();let createWasmMultiInstance;createWasmMonoInstance=Module;Module=(()=>{var c=location.href;return function(t){function GROWABLE_HEAP_I8(){return rl.buffer!=ul&&updateGlobalBufferAndViews(rl.buffer),yl}function GROWABLE_HEAP_U8(){return rl.buffer!=ul&&updateGlobalBufferAndViews(rl.buffer),sl}function GROWABLE_HEAP_I16(){return rl.buffer!=ul&&updateGlobalBufferAndViews(rl.buffer),hl}function GROWABLE_HEAP_U16(){return rl.buffer!=ul&&updateGlobalBufferAndViews(rl.buffer),Rl}function GROWABLE_HEAP_I32(){return rl.buffer!=ul&&updateGlobalBufferAndViews(rl.buffer),pl}function GROWABLE_HEAP_U32(){return rl.buffer!=ul&&updateGlobalBufferAndViews(rl.buffer),Yl}function GROWABLE_HEAP_F64(){return rl.buffer!=ul&&updateGlobalBufferAndViews(rl.buffer),Jl}var e,n;(t=void 0!==(t=t||{})?t:{}).ready=new Promise((function(c,t){e=c,n=t}));var r,o,u,M=Object.assign({},t),ll=[],cl="./this.program",quit_=(c,t)=>{throw t},tl="object"==typeof window,Zl="function"==typeof importScripts,dl="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,el=t.ENVIRONMENT_IS_PTHREAD||!1,nl="";function locateFile(c){return t.locateFile?t.locateFile(c,nl):nl+c}(tl||Zl)&&(Zl?nl=self.location.href:"undefined"!=typeof document&&document.currentScript&&(nl=document.currentScript.src),c&&(nl=c),nl=0!==nl.indexOf("blob:")?nl.substr(0,nl.replace(/[?#].*/,"").lastIndexOf("/")+1):"",r=c=>{var t=new XMLHttpRequest;return t.open("GET",c,!1),t.send(null),t.responseText},Zl&&(u=c=>{var t=new XMLHttpRequest;return t.open("GET",c,!1),t.responseType="arraybuffer",t.send(null),new Uint8Array(t.response)}),o=(c,t,e)=>{var n=new XMLHttpRequest;n.open("GET",c,!0),n.responseType="arraybuffer",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):e()},n.onerror=e,n.send(null)});var bl=t.print||console.log.bind(console),ml=t.printErr||console.warn.bind(console);function warnOnce(c){warnOnce.shown||(warnOnce.shown={}),warnOnce.shown[c]||(warnOnce.shown[c]=1,ml(c))}Object.assign(t,M),M=null,t.arguments&&(ll=t.arguments),t.thisProgram&&(cl=t.thisProgram),t.quit&&(quit_=t.quit);var al,il=0,setTempRet0=c=>{il=c};Atomics.load,Atomics.store,Atomics.compareExchange;t.wasmBinary&&(al=t.wasmBinary);var rl,Xl,Wl=t.noExitRuntime||!1;"object"!=typeof WebAssembly&&abort("no native wasm support detected");var ol,Vl=!1;function assert(c,t){c||abort(t)}var Gl="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function UTF8ArrayToString(c,t,e){for(var n=t+e,r=t;c[r]&&!(r>=n);)++r;if(r-t>16&&c.buffer&&Gl)return Gl.decode(c.buffer instanceof SharedArrayBuffer?c.slice(t,r):c.subarray(t,r));for(var o="";t<r;){var u=c[t++];if(128&u){var M=63&c[t++];if(192!=(224&u)){var ll=63&c[t++];if((u=224==(240&u)?(15&u)<<12|M<<6|ll:(7&u)<<18|M<<12|ll<<6|63&c[t++])<65536)o+=String.fromCharCode(u);else{var cl=u-65536;o+=String.fromCharCode(55296|cl>>10,56320|1023&cl)}}else o+=String.fromCharCode((31&u)<<6|M)}else o+=String.fromCharCode(u)}return o}function UTF8ToString(c,t){return c?UTF8ArrayToString(GROWABLE_HEAP_U8(),c,t):""}function stringToUTF8Array(c,t,e,n){if(!(n>0))return 0;for(var r=e,o=e+n-1,u=0;u<c.length;++u){var M=c.charCodeAt(u);if(M>=55296&&M<=57343)M=65536+((1023&M)<<10)|1023&c.charCodeAt(++u);if(M<=127){if(e>=o)break;t[e++]=M}else if(M<=2047){if(e+1>=o)break;t[e++]=192|M>>6,t[e++]=128|63&M}else if(M<=65535){if(e+2>=o)break;t[e++]=224|M>>12,t[e++]=128|M>>6&63,t[e++]=128|63&M}else{if(e+3>=o)break;t[e++]=240|M>>18,t[e++]=128|M>>12&63,t[e++]=128|M>>6&63,t[e++]=128|63&M}}return t[e]=0,e-r}function lengthBytesUTF8(c){for(var t=0,e=0;e<c.length;++e){var n=c.charCodeAt(e);n>=55296&&n<=57343&&(n=65536+((1023&n)<<10)|1023&c.charCodeAt(++e)),n<=127?++t:t+=n<=2047?2:n<=65535?3:4}return t}var ul,yl,sl,hl,Rl,pl,Yl,Fl,Jl,Il="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0;function UTF16ToString(c,t){for(var e=c,n=e>>1,r=n+t/2;!(n>=r)&&GROWABLE_HEAP_U16()[n];)++n;if((e=n<<1)-c>32&&Il)return Il.decode(GROWABLE_HEAP_U8().slice(c,e));for(var o="",u=0;!(u>=t/2);++u){var M=GROWABLE_HEAP_I16()[c+2*u>>1];if(0==M)break;o+=String.fromCharCode(M)}return o}function stringToUTF16(c,t,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var n=t,r=(e-=2)<2*c.length?e/2:c.length,o=0;o<r;++o){var u=c.charCodeAt(o);GROWABLE_HEAP_I16()[t>>1]=u,t+=2}return GROWABLE_HEAP_I16()[t>>1]=0,t-n}function lengthBytesUTF16(c){return 2*c.length}function UTF32ToString(c,t){for(var e=0,n="";!(e>=t/4);){var r=GROWABLE_HEAP_I32()[c+4*e>>2];if(0==r)break;if(++e,r>=65536){var o=r-65536;n+=String.fromCharCode(55296|o>>10,56320|1023&o)}else n+=String.fromCharCode(r)}return n}function stringToUTF32(c,t,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var n=t,r=n+e-4,o=0;o<c.length;++o){var u=c.charCodeAt(o);if(u>=55296&&u<=57343)u=65536+((1023&u)<<10)|1023&c.charCodeAt(++o);if(GROWABLE_HEAP_I32()[t>>2]=u,(t+=4)+4>r)break}return GROWABLE_HEAP_I32()[t>>2]=0,t-n}function lengthBytesUTF32(c){for(var t=0,e=0;e<c.length;++e){var n=c.charCodeAt(e);n>=55296&&n<=57343&&++e,t+=4}return t}function updateGlobalBufferAndViews(c){ul=c,t.HEAP8=yl=new Int8Array(c),t.HEAP16=hl=new Int16Array(c),t.HEAP32=pl=new Int32Array(c),t.HEAPU8=sl=new Uint8Array(c),t.HEAPU16=Rl=new Uint16Array(c),t.HEAPU32=Yl=new Uint32Array(c),t.HEAPF32=Fl=new Float32Array(c),t.HEAPF64=Jl=new Float64Array(c)}el&&(ul=t.buffer);var Nl,Hl=t.INITIAL_MEMORY||16777216;if(el)rl=t.wasmMemory,ul=t.buffer;else if(t.wasmMemory)rl=t.wasmMemory;else if(!((rl=new WebAssembly.Memory({initial:Hl/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw ml("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),dl&&console.log("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)"),Error("bad memory");rl&&(ul=rl.buffer),Hl=ul.byteLength,updateGlobalBufferAndViews(ul);var vl=[],fl=[],kl=[],Ul=[],gl=0;function keepRuntimeAlive(){return Wl||gl>0}function initRuntime(){!0,el||(t.noFSInit||Al.init.initialized||Al.init(),Al.ignorePermissions=!1,Dl.init(),callRuntimeCallbacks(fl))}var Tl=0,Kl=null,Bl=null;function addRunDependency(c){Tl++,t.monitorRunDependencies&&t.monitorRunDependencies(Tl)}function removeRunDependency(c){if(Tl--,t.monitorRunDependencies&&t.monitorRunDependencies(Tl),0==Tl&&(null!==Kl&&(clearInterval(Kl),Kl=null),Bl)){var e=Bl;Bl=null,e()}}function abort(c){el?postMessage({cmd:"onAbort",arg:c}):t.onAbort&&t.onAbort(c),ml(c="Aborted("+c+")"),Vl=!0,ol=1,c+=". Build with -sASSERTIONS for more info.";var e=new WebAssembly.RuntimeError(c);throw n(e),e}var zl,Sl,wl,xl="data:application/octet-stream;base64,";function isDataURI(c){return c.startsWith(xl)}function getBinary(c){try{if(c==zl&&al)return new Uint8Array(al);if(u)return u(c);throw"both async and sync fetching of the wasm failed"}catch(c){abort(c)}}t.locateFile?isDataURI(zl="main-bin-multi.wasm")||(zl=locateFile(zl)):zl=new URL("main-bin-multi.wasm",location.href).toString();var Ll={};function cleanupThread(c){var t=Cl.pthreads[c];if(t){GROWABLE_HEAP_I32()[c>>2]=0;var e=t.worker;Cl.returnWorkerToPool(e)}}function spawnThread(c){var t=Cl.getNewWorker();if(!t)return 6;Cl.runningWorkers.push(t);var e=Cl.pthreads[c.pthread_ptr]={worker:t,threadInfoStruct:c.pthread_ptr};t.pthread=e;var n={cmd:"run",start_routine:c.startRoutine,arg:c.arg,threadInfoStruct:c.pthread_ptr};return t.runPthread=()=>{n.time=performance.now(),t.postMessage(n,c.transferList)},t.loaded&&(t.runPthread(),delete t.runPthread),0}function _exit(c){!function(c,e){if(ol=c,!e&&el)throw exitOnMainThread(c),"unwind";keepRuntimeAlive()||el||(Tc(),callRuntimeCallbacks(kl),Al.quit(),Dl.shutdown(),Cl.terminateAllThreads(),!0);!function(c){ol=c,keepRuntimeAlive()||(Cl.terminateAllThreads(),t.onExit&&t.onExit(c),Vl=!0);quit_(c,new ExitStatus(c))}(c)}(c)}var Cl={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],init:function(){el?Cl.initWorker():Cl.initMainThread()},initMainThread:function(){for(var c=0;c<6;++c)Cl.allocateUnusedWorker()},initWorker:function(){Wl=!1},pthreads:{},setExitStatus:function(c){ol=c},terminateAllThreads:function(){for(var c in Cl.pthreads){var t=Cl.pthreads[c];t&&t.worker&&Cl.returnWorkerToPool(t.worker)}for(var e=0;e<Cl.unusedWorkers.length;++e){Cl.unusedWorkers[e].terminate()}Cl.unusedWorkers=[]},returnWorkerToPool:function(c){Cl.runWithoutMainThreadQueuedCalls((function(){delete Cl.pthreads[c.pthread.threadInfoStruct],Cl.unusedWorkers.push(c),Cl.runningWorkers.splice(Cl.runningWorkers.indexOf(c),1),Sc(c.pthread.threadInfoStruct),c.pthread=void 0}))},runWithoutMainThreadQueuedCalls:function(c){GROWABLE_HEAP_I32()[Oc>>2]=0;try{c()}finally{GROWABLE_HEAP_I32()[Oc>>2]=1}},receiveObjectTransfer:function(c){},threadInit:function(){for(var c in Cl.tlsInitFunctions)Cl.tlsInitFunctions.hasOwnProperty(c)&&Cl.tlsInitFunctions[c]()},loadWasmModuleToWorker:function(c,e){c.onmessage=n=>{var r,o=n.data,u=o.cmd;if(c.pthread&&(Cl.currentProxiedOperationCallerThread=c.pthread.threadInfoStruct),o.targetThread&&o.targetThread!=fc()){var M=Cl.pthreads[o.targetThread];return M?M.worker.postMessage(o,o.transferList):ml('Internal error! Worker sent a message "'+u+'" to target pthread '+o.targetThread+", but that thread no longer exists!"),void(Cl.currentProxiedOperationCallerThread=void 0)}"processProxyingQueue"===u?executeNotifiedProxyingQueue(o.queue):"spawnThread"===u?spawnThread(o):"cleanupThread"===u?cleanupThread(o.thread):"killThread"===u?function(c){GROWABLE_HEAP_I32()[c>>2]=0;var t=Cl.pthreads[c];delete Cl.pthreads[c],t.worker.terminate(),Sc(c),Cl.runningWorkers.splice(Cl.runningWorkers.indexOf(t.worker),1),t.worker.pthread=void 0}(o.thread):"cancelThread"===u?(r=o.thread,Cl.pthreads[r].worker.postMessage({cmd:"cancel"})):"loaded"===u?(c.loaded=!0,e&&e(c),c.runPthread&&(c.runPthread(),delete c.runPthread)):"print"===u?bl("Thread "+o.threadId+": "+o.text):"printErr"===u?ml("Thread "+o.threadId+": "+o.text):"alert"===u?alert("Thread "+o.threadId+": "+o.text):"setimmediate"===o.target?c.postMessage(o):"onAbort"===u?t.onAbort&&t.onAbort(o.arg):u&&ml("worker sent an unknown command "+u),Cl.currentProxiedOperationCallerThread=void 0},c.onerror=c=>{throw ml("worker sent an error! "+c.filename+":"+c.lineno+": "+c.message),c},c.postMessage({cmd:"load",urlOrBlob:t.mainScriptUrlOrBlob,wasmMemory:rl,wasmModule:Xl})},allocateUnusedWorker:function(){if(t.locateFile){var c=locateFile("main-bin-multi.worker.js");Cl.unusedWorkers.push(new Worker(c,{type:"module"}))}else Cl.unusedWorkers.push(new Worker(new URL("main-bin-multi.worker.js",location.href)))},getNewWorker:function(){return 0==Cl.unusedWorkers.length&&(Cl.allocateUnusedWorker(),Cl.loadWasmModuleToWorker(Cl.unusedWorkers[0])),Cl.unusedWorkers.pop()}};function callRuntimeCallbacks(c){for(;c.length>0;){var e=c.shift();if("function"!=typeof e){var n=e.func;"number"==typeof n?void 0===e.arg?getWasmTableEntry(n)():getWasmTableEntry(n)(e.arg):n(void 0===e.arg?null:e.arg)}else e(t)}}function exitOnMainThread(c){if(el)return _emscripten_proxy_to_main_thread_js(1,0,c);try{_exit(c)}catch(c){!function(c){if(c instanceof ExitStatus||"unwind"==c)return ol;quit_(1,c)}(c)}}t.PThread=Cl,t.establishStackSpace=function(){var c=fc(),t=GROWABLE_HEAP_I32()[c+44>>2],e=GROWABLE_HEAP_I32()[c+48>>2];xc(t,t-e),Cc(t)};var El=[];function getWasmTableEntry(c){var t=El[c];return t||(c>=El.length&&(El.length=c+1),El[c]=t=Nl.get(c)),t}t.invokeEntryPoint=function(c,t){return getWasmTableEntry(c)(t)};var Ml=[];function exception_addRef(c){c.add_ref()}var jl=0;function ExceptionInfo(c){this.excPtr=c,this.ptr=c-24,this.set_type=function(c){GROWABLE_HEAP_U32()[this.ptr+4>>2]=c},this.get_type=function(){return GROWABLE_HEAP_U32()[this.ptr+4>>2]},this.set_destructor=function(c){GROWABLE_HEAP_U32()[this.ptr+8>>2]=c},this.get_destructor=function(){return GROWABLE_HEAP_U32()[this.ptr+8>>2]},this.set_refcount=function(c){GROWABLE_HEAP_I32()[this.ptr>>2]=c},this.set_caught=function(c){c=c?1:0,GROWABLE_HEAP_I8()[this.ptr+12>>0]=c},this.get_caught=function(){return 0!=GROWABLE_HEAP_I8()[this.ptr+12>>0]},this.set_rethrown=function(c){c=c?1:0,GROWABLE_HEAP_I8()[this.ptr+13>>0]=c},this.get_rethrown=function(){return 0!=GROWABLE_HEAP_I8()[this.ptr+13>>0]},this.init=function(c,t){this.set_adjusted_ptr(0),this.set_type(c),this.set_destructor(t),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){Atomics.add(GROWABLE_HEAP_I32(),this.ptr+0>>2,1)},this.release_ref=function(){return 1===Atomics.sub(GROWABLE_HEAP_I32(),this.ptr+0>>2,1)},this.set_adjusted_ptr=function(c){GROWABLE_HEAP_U32()[this.ptr+16>>2]=c},this.get_adjusted_ptr=function(){return GROWABLE_HEAP_U32()[this.ptr+16>>2]},this.get_exception_ptr=function(){if(jc(this.get_type()))return GROWABLE_HEAP_U32()[this.excPtr>>2];var c=this.get_adjusted_ptr();return 0!==c?c:this.excPtr}}function ___cxa_free_exception(c){return Hc(new ExceptionInfo(c).ptr)}function exception_decRef(c){if(c.release_ref()&&!c.get_rethrown()){var t=c.get_destructor();t&&getWasmTableEntry(t)(c.excPtr),___cxa_free_exception(c.excPtr)}}var Ql=0;function ___cxa_rethrow(){var c=Ml.pop();c||abort("no exception to throw");var t=c.excPtr;throw c.get_rethrown()||(Ml.push(c),c.set_rethrown(!0),c.set_caught(!1),jl++),Ql=t,t}function pthreadCreateProxied(c,t,e,n){return el?_emscripten_proxy_to_main_thread_js(2,1,c,t,e,n):___pthread_create_js(c,t,e,n)}function ___pthread_create_js(c,t,e,n){if("undefined"==typeof SharedArrayBuffer)return ml("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var r=[];if(el&&0===r.length)return pthreadCreateProxied(c,t,e,n);var o={startRoutine:e,pthread_ptr:c,arg:n,transferList:r};return el?(o.cmd="spawnThread",postMessage(o,r),0):spawnThread(o)}var Pl={isAbs:c=>"/"===c.charAt(0),splitPath:c=>/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(c).slice(1),normalizeArray:(c,t)=>{for(var e=0,n=c.length-1;n>=0;n--){var r=c[n];"."===r?c.splice(n,1):".."===r?(c.splice(n,1),e++):e&&(c.splice(n,1),e--)}if(t)for(;e;e--)c.unshift("..");return c},normalize:c=>{var t=Pl.isAbs(c),e="/"===c.substr(-1);return c=Pl.normalizeArray(c.split("/").filter((c=>!!c)),!t).join("/"),c||t||(c="."),c&&e&&(c+="/"),(t?"/":"")+c},dirname:c=>{var t=Pl.splitPath(c),e=t[0],n=t[1];return e||n?(n&&(n=n.substr(0,n.length-1)),e+n):"."},basename:c=>{if("/"===c)return"/";var t=(c=(c=Pl.normalize(c)).replace(/\/$/,"")).lastIndexOf("/");return-1===t?c:c.substr(t+1)},join:function(){var c=Array.prototype.slice.call(arguments,0);return Pl.normalize(c.join("/"))},join2:(c,t)=>Pl.normalize(c+"/"+t)};function getRandomDevice(){if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues){var c=new Uint8Array(1);return function(){return crypto.getRandomValues(c),c[0]}}return function(){abort("randomDevice")}}var Ol={resolve:function(){for(var c="",t=!1,e=arguments.length-1;e>=-1&&!t;e--){var n=e>=0?arguments[e]:Al.cwd();if("string"!=typeof n)throw new TypeError("Arguments to path.resolve must be strings");if(!n)return"";c=n+"/"+c,t=Pl.isAbs(n)}return c=Pl.normalizeArray(c.split("/").filter((c=>!!c)),!t).join("/"),(t?"/":"")+c||"."},relative:(c,t)=>{function trim(c){for(var t=0;t<c.length&&""===c[t];t++);for(var e=c.length-1;e>=0&&""===c[e];e--);return t>e?[]:c.slice(t,e-t+1)}c=Ol.resolve(c).substr(1),t=Ol.resolve(t).substr(1);for(var e=trim(c.split("/")),n=trim(t.split("/")),r=Math.min(e.length,n.length),o=r,u=0;u<r;u++)if(e[u]!==n[u]){o=u;break}var M=[];for(u=o;u<e.length;u++)M.push("..");return(M=M.concat(n.slice(o))).join("/")}},Dl={ttys:[],init:function(){},shutdown:function(){},register:function(c,t){Dl.ttys[c]={input:[],output:[],ops:t},Al.registerDevice(c,Dl.stream_ops)},stream_ops:{open:function(c){var t=Dl.ttys[c.node.rdev];if(!t)throw new Al.ErrnoError(43);c.tty=t,c.seekable=!1},close:function(c){c.tty.ops.flush(c.tty)},flush:function(c){c.tty.ops.flush(c.tty)},read:function(c,t,e,n,r){if(!c.tty||!c.tty.ops.get_char)throw new Al.ErrnoError(60);for(var o=0,u=0;u<n;u++){var M;try{M=c.tty.ops.get_char(c.tty)}catch(c){throw new Al.ErrnoError(29)}if(void 0===M&&0===o)throw new Al.ErrnoError(6);if(null==M)break;o++,t[e+u]=M}return o&&(c.node.timestamp=Date.now()),o},write:function(c,t,e,n,r){if(!c.tty||!c.tty.ops.put_char)throw new Al.ErrnoError(60);try{for(var o=0;o<n;o++)c.tty.ops.put_char(c.tty,t[e+o])}catch(c){throw new Al.ErrnoError(29)}return n&&(c.node.timestamp=Date.now()),o}},default_tty_ops:{get_char:function(c){if(!c.input.length){var t=null;if("undefined"!=typeof window&&"function"==typeof window.prompt?null!==(t=window.prompt("Input: "))&&(t+="\n"):"function"==typeof readline&&null!==(t=readline())&&(t+="\n"),!t)return null;c.input=intArrayFromString(t,!0)}return c.input.shift()},put_char:function(c,t){null===t||10===t?(bl(UTF8ArrayToString(c.output,0)),c.output=[]):0!=t&&c.output.push(t)},flush:function(c){c.output&&c.output.length>0&&(bl(UTF8ArrayToString(c.output,0)),c.output=[])}},default_tty1_ops:{put_char:function(c,t){null===t||10===t?(ml(UTF8ArrayToString(c.output,0)),c.output=[]):0!=t&&c.output.push(t)},flush:function(c){c.output&&c.output.length>0&&(ml(UTF8ArrayToString(c.output,0)),c.output=[])}}};function mmapAlloc(c){c=function(c,t){return Math.ceil(c/t)*t}(c,65536);var t=kc(65536,c);return t?(function(c,t){GROWABLE_HEAP_U8().fill(0,c,c+t)}(t,c),t):0}var _l={ops_table:null,mount:function(c){return _l.createNode(null,"/",16895,0)},createNode:function(c,t,e,n){if(Al.isBlkdev(e)||Al.isFIFO(e))throw new Al.ErrnoError(63);_l.ops_table||(_l.ops_table={dir:{node:{getattr:_l.node_ops.getattr,setattr:_l.node_ops.setattr,lookup:_l.node_ops.lookup,mknod:_l.node_ops.mknod,rename:_l.node_ops.rename,unlink:_l.node_ops.unlink,rmdir:_l.node_ops.rmdir,readdir:_l.node_ops.readdir,symlink:_l.node_ops.symlink},stream:{llseek:_l.stream_ops.llseek}},file:{node:{getattr:_l.node_ops.getattr,setattr:_l.node_ops.setattr},stream:{llseek:_l.stream_ops.llseek,read:_l.stream_ops.read,write:_l.stream_ops.write,allocate:_l.stream_ops.allocate,mmap:_l.stream_ops.mmap,msync:_l.stream_ops.msync}},link:{node:{getattr:_l.node_ops.getattr,setattr:_l.node_ops.setattr,readlink:_l.node_ops.readlink},stream:{}},chrdev:{node:{getattr:_l.node_ops.getattr,setattr:_l.node_ops.setattr},stream:Al.chrdev_stream_ops}});var r=Al.createNode(c,t,e,n);return Al.isDir(r.mode)?(r.node_ops=_l.ops_table.dir.node,r.stream_ops=_l.ops_table.dir.stream,r.contents={}):Al.isFile(r.mode)?(r.node_ops=_l.ops_table.file.node,r.stream_ops=_l.ops_table.file.stream,r.usedBytes=0,r.contents=null):Al.isLink(r.mode)?(r.node_ops=_l.ops_table.link.node,r.stream_ops=_l.ops_table.link.stream):Al.isChrdev(r.mode)&&(r.node_ops=_l.ops_table.chrdev.node,r.stream_ops=_l.ops_table.chrdev.stream),r.timestamp=Date.now(),c&&(c.contents[t]=r,c.timestamp=r.timestamp),r},getFileDataAsTypedArray:function(c){return c.contents?c.contents.subarray?c.contents.subarray(0,c.usedBytes):new Uint8Array(c.contents):new Uint8Array(0)},expandFileStorage:function(c,t){var e=c.contents?c.contents.length:0;if(!(e>=t)){t=Math.max(t,e*(e<1048576?2:1.125)>>>0),0!=e&&(t=Math.max(t,256));var n=c.contents;c.contents=new Uint8Array(t),c.usedBytes>0&&c.contents.set(n.subarray(0,c.usedBytes),0)}},resizeFileStorage:function(c,t){if(c.usedBytes!=t)if(0==t)c.contents=null,c.usedBytes=0;else{var e=c.contents;c.contents=new Uint8Array(t),e&&c.contents.set(e.subarray(0,Math.min(t,c.usedBytes))),c.usedBytes=t}},node_ops:{getattr:function(c){var t={};return t.dev=Al.isChrdev(c.mode)?c.id:1,t.ino=c.id,t.mode=c.mode,t.nlink=1,t.uid=0,t.gid=0,t.rdev=c.rdev,Al.isDir(c.mode)?t.size=4096:Al.isFile(c.mode)?t.size=c.usedBytes:Al.isLink(c.mode)?t.size=c.link.length:t.size=0,t.atime=new Date(c.timestamp),t.mtime=new Date(c.timestamp),t.ctime=new Date(c.timestamp),t.blksize=4096,t.blocks=Math.ceil(t.size/t.blksize),t},setattr:function(c,t){void 0!==t.mode&&(c.mode=t.mode),void 0!==t.timestamp&&(c.timestamp=t.timestamp),void 0!==t.size&&_l.resizeFileStorage(c,t.size)},lookup:function(c,t){throw Al.genericErrors[44]},mknod:function(c,t,e,n){return _l.createNode(c,t,e,n)},rename:function(c,t,e){if(Al.isDir(c.mode)){var n;try{n=Al.lookupNode(t,e)}catch(c){}if(n)for(var r in n.contents)throw new Al.ErrnoError(55)}delete c.parent.contents[c.name],c.parent.timestamp=Date.now(),c.name=e,t.contents[e]=c,t.timestamp=c.parent.timestamp,c.parent=t},unlink:function(c,t){delete c.contents[t],c.timestamp=Date.now()},rmdir:function(c,t){var e=Al.lookupNode(c,t);for(var n in e.contents)throw new Al.ErrnoError(55);delete c.contents[t],c.timestamp=Date.now()},readdir:function(c){var t=[".",".."];for(var e in c.contents)c.contents.hasOwnProperty(e)&&t.push(e);return t},symlink:function(c,t,e){var n=_l.createNode(c,t,41471,0);return n.link=e,n},readlink:function(c){if(!Al.isLink(c.mode))throw new Al.ErrnoError(28);return c.link}},stream_ops:{read:function(c,t,e,n,r){var o=c.node.contents;if(r>=c.node.usedBytes)return 0;var u=Math.min(c.node.usedBytes-r,n);if(u>8&&o.subarray)t.set(o.subarray(r,r+u),e);else for(var M=0;M<u;M++)t[e+M]=o[r+M];return u},write:function(c,t,e,n,r,o){if(t.buffer===GROWABLE_HEAP_I8().buffer&&(o=!1),!n)return 0;var u=c.node;if(u.timestamp=Date.now(),t.subarray&&(!u.contents||u.contents.subarray)){if(o)return u.contents=t.subarray(e,e+n),u.usedBytes=n,n;if(0===u.usedBytes&&0===r)return u.contents=t.slice(e,e+n),u.usedBytes=n,n;if(r+n<=u.usedBytes)return u.contents.set(t.subarray(e,e+n),r),n}if(_l.expandFileStorage(u,r+n),u.contents.subarray&&t.subarray)u.contents.set(t.subarray(e,e+n),r);else for(var M=0;M<n;M++)u.contents[r+M]=t[e+M];return u.usedBytes=Math.max(u.usedBytes,r+n),n},llseek:function(c,t,e){var n=t;if(1===e?n+=c.position:2===e&&Al.isFile(c.node.mode)&&(n+=c.node.usedBytes),n<0)throw new Al.ErrnoError(28);return n},allocate:function(c,t,e){_l.expandFileStorage(c.node,t+e),c.node.usedBytes=Math.max(c.node.usedBytes,t+e)},mmap:function(c,t,e,n,r,o){if(0!==t)throw new Al.ErrnoError(28);if(!Al.isFile(c.node.mode))throw new Al.ErrnoError(43);var u,M,ll=c.node.contents;if(2&o||ll.buffer!==ul){if((n>0||n+e<ll.length)&&(ll=ll.subarray?ll.subarray(n,n+e):Array.prototype.slice.call(ll,n,n+e)),M=!0,!(u=mmapAlloc(e)))throw new Al.ErrnoError(48);GROWABLE_HEAP_I8().set(ll,u)}else M=!1,u=ll.byteOffset;return{ptr:u,allocated:M}},msync:function(c,t,e,n,r){if(!Al.isFile(c.node.mode))throw new Al.ErrnoError(43);if(2&r)return 0;_l.stream_ops.write(c,t,0,n,e,!1);return 0}}};var Al={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:(c,t={})=>{if(!(c=Ol.resolve(Al.cwd(),c)))return{path:"",node:null};if((t=Object.assign({follow_mount:!0,recurse_count:0},t)).recurse_count>8)throw new Al.ErrnoError(32);for(var e=Pl.normalizeArray(c.split("/").filter((c=>!!c)),!1),n=Al.root,r="/",o=0;o<e.length;o++){var u=o===e.length-1;if(u&&t.parent)break;if(n=Al.lookupNode(n,e[o]),r=Pl.join2(r,e[o]),Al.isMountpoint(n)&&(!u||u&&t.follow_mount)&&(n=n.mounted.root),!u||t.follow)for(var M=0;Al.isLink(n.mode);){var ll=Al.readlink(r);if(r=Ol.resolve(Pl.dirname(r),ll),n=Al.lookupPath(r,{recurse_count:t.recurse_count+1}).node,M++>40)throw new Al.ErrnoError(32)}}return{path:r,node:n}},getPath:c=>{for(var t;;){if(Al.isRoot(c)){var e=c.mount.mountpoint;return t?"/"!==e[e.length-1]?e+"/"+t:e+t:e}t=t?c.name+"/"+t:c.name,c=c.parent}},hashName:(c,t)=>{for(var e=0,n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n)|0;return(c+e>>>0)%Al.nameTable.length},hashAddNode:c=>{var t=Al.hashName(c.parent.id,c.name);c.name_next=Al.nameTable[t],Al.nameTable[t]=c},hashRemoveNode:c=>{var t=Al.hashName(c.parent.id,c.name);if(Al.nameTable[t]===c)Al.nameTable[t]=c.name_next;else for(var e=Al.nameTable[t];e;){if(e.name_next===c){e.name_next=c.name_next;break}e=e.name_next}},lookupNode:(c,t)=>{var e=Al.mayLookup(c);if(e)throw new Al.ErrnoError(e,c);for(var n=Al.hashName(c.id,t),r=Al.nameTable[n];r;r=r.name_next){var o=r.name;if(r.parent.id===c.id&&o===t)return r}return Al.lookup(c,t)},createNode:(c,t,e,n)=>{var r=new Al.FSNode(c,t,e,n);return Al.hashAddNode(r),r},destroyNode:c=>{Al.hashRemoveNode(c)},isRoot:c=>c===c.parent,isMountpoint:c=>!!c.mounted,isFile:c=>32768==(61440&c),isDir:c=>16384==(61440&c),isLink:c=>40960==(61440&c),isChrdev:c=>8192==(61440&c),isBlkdev:c=>24576==(61440&c),isFIFO:c=>4096==(61440&c),isSocket:c=>49152==(49152&c),flagModes:{r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090},modeStringToFlags:c=>{var t=Al.flagModes[c];if(void 0===t)throw new Error("Unknown file open mode: "+c);return t},flagsToPermissionString:c=>{var t=["r","w","rw"][3&c];return 512&c&&(t+="w"),t},nodePermissions:(c,t)=>Al.ignorePermissions||(!t.includes("r")||292&c.mode)&&(!t.includes("w")||146&c.mode)&&(!t.includes("x")||73&c.mode)?0:2,mayLookup:c=>{var t=Al.nodePermissions(c,"x");return t||(c.node_ops.lookup?0:2)},mayCreate:(c,t)=>{try{Al.lookupNode(c,t);return 20}catch(c){}return Al.nodePermissions(c,"wx")},mayDelete:(c,t,e)=>{var n;try{n=Al.lookupNode(c,t)}catch(c){return c.errno}var r=Al.nodePermissions(c,"wx");if(r)return r;if(e){if(!Al.isDir(n.mode))return 54;if(Al.isRoot(n)||Al.getPath(n)===Al.cwd())return 10}else if(Al.isDir(n.mode))return 31;return 0},mayOpen:(c,t)=>c?Al.isLink(c.mode)?32:Al.isDir(c.mode)&&("r"!==Al.flagsToPermissionString(t)||512&t)?31:Al.nodePermissions(c,Al.flagsToPermissionString(t)):44,MAX_OPEN_FDS:4096,nextfd:(c=0,t=Al.MAX_OPEN_FDS)=>{for(var e=c;e<=t;e++)if(!Al.streams[e])return e;throw new Al.ErrnoError(33)},getStream:c=>Al.streams[c],createStream:(c,t,e)=>{Al.FSStream||(Al.FSStream=function(){this.shared={}},Al.FSStream.prototype={object:{get:function(){return this.node},set:function(c){this.node=c}},isRead:{get:function(){return 1!=(2097155&this.flags)}},isWrite:{get:function(){return 0!=(2097155&this.flags)}},isAppend:{get:function(){return 1024&this.flags}},flags:{get:function(){return this.shared.flags},set:function(c){this.shared.flags=c}},position:{get function(){return this.shared.position},set:function(c){this.shared.position=c}}}),c=Object.assign(new Al.FSStream,c);var n=Al.nextfd(t,e);return c.fd=n,Al.streams[n]=c,c},closeStream:c=>{Al.streams[c]=null},chrdev_stream_ops:{open:c=>{var t=Al.getDevice(c.node.rdev);c.stream_ops=t.stream_ops,c.stream_ops.open&&c.stream_ops.open(c)},llseek:()=>{throw new Al.ErrnoError(70)}},major:c=>c>>8,minor:c=>255&c,makedev:(c,t)=>c<<8|t,registerDevice:(c,t)=>{Al.devices[c]={stream_ops:t}},getDevice:c=>Al.devices[c],getMounts:c=>{for(var t=[],e=[c];e.length;){var n=e.pop();t.push(n),e.push.apply(e,n.mounts)}return t},syncfs:(c,t)=>{"function"==typeof c&&(t=c,c=!1),Al.syncFSRequests++,Al.syncFSRequests>1&&ml("warning: "+Al.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work");var e=Al.getMounts(Al.root.mount),n=0;function doCallback(c){return Al.syncFSRequests--,t(c)}function done(c){if(c)return done.errored?void 0:(done.errored=!0,doCallback(c));++n>=e.length&&doCallback(null)}e.forEach((t=>{if(!t.type.syncfs)return done(null);t.type.syncfs(t,c,done)}))},mount:(c,t,e)=>{var n,r="/"===e,o=!e;if(r&&Al.root)throw new Al.ErrnoError(10);if(!r&&!o){var u=Al.lookupPath(e,{follow_mount:!1});if(e=u.path,n=u.node,Al.isMountpoint(n))throw new Al.ErrnoError(10);if(!Al.isDir(n.mode))throw new Al.ErrnoError(54)}var M={type:c,opts:t,mountpoint:e,mounts:[]},ll=c.mount(M);return ll.mount=M,M.root=ll,r?Al.root=ll:n&&(n.mounted=M,n.mount&&n.mount.mounts.push(M)),ll},unmount:c=>{var t=Al.lookupPath(c,{follow_mount:!1});if(!Al.isMountpoint(t.node))throw new Al.ErrnoError(28);var e=t.node,n=e.mounted,r=Al.getMounts(n);Object.keys(Al.nameTable).forEach((c=>{for(var t=Al.nameTable[c];t;){var e=t.name_next;r.includes(t.mount)&&Al.destroyNode(t),t=e}})),e.mounted=null;var o=e.mount.mounts.indexOf(n);e.mount.mounts.splice(o,1)},lookup:(c,t)=>c.node_ops.lookup(c,t),mknod:(c,t,e)=>{var n=Al.lookupPath(c,{parent:!0}).node,r=Pl.basename(c);if(!r||"."===r||".."===r)throw new Al.ErrnoError(28);var o=Al.mayCreate(n,r);if(o)throw new Al.ErrnoError(o);if(!n.node_ops.mknod)throw new Al.ErrnoError(63);return n.node_ops.mknod(n,r,t,e)},create:(c,t)=>(t=void 0!==t?t:438,t&=4095,t|=32768,Al.mknod(c,t,0)),mkdir:(c,t)=>(t=void 0!==t?t:511,t&=1023,t|=16384,Al.mknod(c,t,0)),mkdirTree:(c,t)=>{for(var e=c.split("/"),n="",r=0;r<e.length;++r)if(e[r]){n+="/"+e[r];try{Al.mkdir(n,t)}catch(c){if(20!=c.errno)throw c}}},mkdev:(c,t,e)=>(void 0===e&&(e=t,t=438),t|=8192,Al.mknod(c,t,e)),symlink:(c,t)=>{if(!Ol.resolve(c))throw new Al.ErrnoError(44);var e=Al.lookupPath(t,{parent:!0}).node;if(!e)throw new Al.ErrnoError(44);var n=Pl.basename(t),r=Al.mayCreate(e,n);if(r)throw new Al.ErrnoError(r);if(!e.node_ops.symlink)throw new Al.ErrnoError(63);return e.node_ops.symlink(e,n,c)},rename:(c,t)=>{var e,n,r=Pl.dirname(c),o=Pl.dirname(t),u=Pl.basename(c),M=Pl.basename(t);if(e=Al.lookupPath(c,{parent:!0}).node,n=Al.lookupPath(t,{parent:!0}).node,!e||!n)throw new Al.ErrnoError(44);if(e.mount!==n.mount)throw new Al.ErrnoError(75);var ll,cl=Al.lookupNode(e,u),tl=Ol.relative(c,o);if("."!==tl.charAt(0))throw new Al.ErrnoError(28);if("."!==(tl=Ol.relative(t,r)).charAt(0))throw new Al.ErrnoError(55);try{ll=Al.lookupNode(n,M)}catch(c){}if(cl!==ll){var Zl=Al.isDir(cl.mode),dl=Al.mayDelete(e,u,Zl);if(dl)throw new Al.ErrnoError(dl);if(dl=ll?Al.mayDelete(n,M,Zl):Al.mayCreate(n,M))throw new Al.ErrnoError(dl);if(!e.node_ops.rename)throw new Al.ErrnoError(63);if(Al.isMountpoint(cl)||ll&&Al.isMountpoint(ll))throw new Al.ErrnoError(10);if(n!==e&&(dl=Al.nodePermissions(e,"w")))throw new Al.ErrnoError(dl);Al.hashRemoveNode(cl);try{e.node_ops.rename(cl,n,M)}catch(c){throw c}finally{Al.hashAddNode(cl)}}},rmdir:c=>{var t=Al.lookupPath(c,{parent:!0}).node,e=Pl.basename(c),n=Al.lookupNode(t,e),r=Al.mayDelete(t,e,!0);if(r)throw new Al.ErrnoError(r);if(!t.node_ops.rmdir)throw new Al.ErrnoError(63);if(Al.isMountpoint(n))throw new Al.ErrnoError(10);t.node_ops.rmdir(t,e),Al.destroyNode(n)},readdir:c=>{var t=Al.lookupPath(c,{follow:!0}).node;if(!t.node_ops.readdir)throw new Al.ErrnoError(54);return t.node_ops.readdir(t)},unlink:c=>{var t=Al.lookupPath(c,{parent:!0}).node;if(!t)throw new Al.ErrnoError(44);var e=Pl.basename(c),n=Al.lookupNode(t,e),r=Al.mayDelete(t,e,!1);if(r)throw new Al.ErrnoError(r);if(!t.node_ops.unlink)throw new Al.ErrnoError(63);if(Al.isMountpoint(n))throw new Al.ErrnoError(10);t.node_ops.unlink(t,e),Al.destroyNode(n)},readlink:c=>{var t=Al.lookupPath(c).node;if(!t)throw new Al.ErrnoError(44);if(!t.node_ops.readlink)throw new Al.ErrnoError(28);return Ol.resolve(Al.getPath(t.parent),t.node_ops.readlink(t))},stat:(c,t)=>{var e=Al.lookupPath(c,{follow:!t}).node;if(!e)throw new Al.ErrnoError(44);if(!e.node_ops.getattr)throw new Al.ErrnoError(63);return e.node_ops.getattr(e)},lstat:c=>Al.stat(c,!0),chmod:(c,t,e)=>{var n;"string"==typeof c?n=Al.lookupPath(c,{follow:!e}).node:n=c;if(!n.node_ops.setattr)throw new Al.ErrnoError(63);n.node_ops.setattr(n,{mode:4095&t|-4096&n.mode,timestamp:Date.now()})},lchmod:(c,t)=>{Al.chmod(c,t,!0)},fchmod:(c,t)=>{var e=Al.getStream(c);if(!e)throw new Al.ErrnoError(8);Al.chmod(e.node,t)},chown:(c,t,e,n)=>{var r;"string"==typeof c?r=Al.lookupPath(c,{follow:!n}).node:r=c;if(!r.node_ops.setattr)throw new Al.ErrnoError(63);r.node_ops.setattr(r,{timestamp:Date.now()})},lchown:(c,t,e)=>{Al.chown(c,t,e,!0)},fchown:(c,t,e)=>{var n=Al.getStream(c);if(!n)throw new Al.ErrnoError(8);Al.chown(n.node,t,e)},truncate:(c,t)=>{if(t<0)throw new Al.ErrnoError(28);var e;"string"==typeof c?e=Al.lookupPath(c,{follow:!0}).node:e=c;if(!e.node_ops.setattr)throw new Al.ErrnoError(63);if(Al.isDir(e.mode))throw new Al.ErrnoError(31);if(!Al.isFile(e.mode))throw new Al.ErrnoError(28);var n=Al.nodePermissions(e,"w");if(n)throw new Al.ErrnoError(n);e.node_ops.setattr(e,{size:t,timestamp:Date.now()})},ftruncate:(c,t)=>{var e=Al.getStream(c);if(!e)throw new Al.ErrnoError(8);if(0==(2097155&e.flags))throw new Al.ErrnoError(28);Al.truncate(e.node,t)},utime:(c,t,e)=>{var n=Al.lookupPath(c,{follow:!0}).node;n.node_ops.setattr(n,{timestamp:Math.max(t,e)})},open:(c,e,n)=>{if(""===c)throw new Al.ErrnoError(44);var r;if(n=void 0===n?438:n,n=64&(e="string"==typeof e?Al.modeStringToFlags(e):e)?4095&n|32768:0,"object"==typeof c)r=c;else{c=Pl.normalize(c);try{r=Al.lookupPath(c,{follow:!(131072&e)}).node}catch(c){}}var o=!1;if(64&e)if(r){if(128&e)throw new Al.ErrnoError(20)}else r=Al.mknod(c,n,0),o=!0;if(!r)throw new Al.ErrnoError(44);if(Al.isChrdev(r.mode)&&(e&=-513),65536&e&&!Al.isDir(r.mode))throw new Al.ErrnoError(54);if(!o){var u=Al.mayOpen(r,e);if(u)throw new Al.ErrnoError(u)}512&e&&!o&&Al.truncate(r,0),e&=-131713;var M=Al.createStream({node:r,path:Al.getPath(r),flags:e,seekable:!0,position:0,stream_ops:r.stream_ops,ungotten:[],error:!1});return M.stream_ops.open&&M.stream_ops.open(M),!t.logReadFiles||1&e||(Al.readFiles||(Al.readFiles={}),c in Al.readFiles||(Al.readFiles[c]=1)),M},close:c=>{if(Al.isClosed(c))throw new Al.ErrnoError(8);c.getdents&&(c.getdents=null);try{c.stream_ops.close&&c.stream_ops.close(c)}catch(c){throw c}finally{Al.closeStream(c.fd)}c.fd=null},isClosed:c=>null===c.fd,llseek:(c,t,e)=>{if(Al.isClosed(c))throw new Al.ErrnoError(8);if(!c.seekable||!c.stream_ops.llseek)throw new Al.ErrnoError(70);if(0!=e&&1!=e&&2!=e)throw new Al.ErrnoError(28);return c.position=c.stream_ops.llseek(c,t,e),c.ungotten=[],c.position},read:(c,t,e,n,r)=>{if(n<0||r<0)throw new Al.ErrnoError(28);if(Al.isClosed(c))throw new Al.ErrnoError(8);if(1==(2097155&c.flags))throw new Al.ErrnoError(8);if(Al.isDir(c.node.mode))throw new Al.ErrnoError(31);if(!c.stream_ops.read)throw new Al.ErrnoError(28);var o=void 0!==r;if(o){if(!c.seekable)throw new Al.ErrnoError(70)}else r=c.position;var u=c.stream_ops.read(c,t,e,n,r);return o||(c.position+=u),u},write:(c,t,e,n,r,o)=>{if(n<0||r<0)throw new Al.ErrnoError(28);if(Al.isClosed(c))throw new Al.ErrnoError(8);if(0==(2097155&c.flags))throw new Al.ErrnoError(8);if(Al.isDir(c.node.mode))throw new Al.ErrnoError(31);if(!c.stream_ops.write)throw new Al.ErrnoError(28);c.seekable&&1024&c.flags&&Al.llseek(c,0,2);var u=void 0!==r;if(u){if(!c.seekable)throw new Al.ErrnoError(70)}else r=c.position;var M=c.stream_ops.write(c,t,e,n,r,o);return u||(c.position+=M),M},allocate:(c,t,e)=>{if(Al.isClosed(c))throw new Al.ErrnoError(8);if(t<0||e<=0)throw new Al.ErrnoError(28);if(0==(2097155&c.flags))throw new Al.ErrnoError(8);if(!Al.isFile(c.node.mode)&&!Al.isDir(c.node.mode))throw new Al.ErrnoError(43);if(!c.stream_ops.allocate)throw new Al.ErrnoError(138);c.stream_ops.allocate(c,t,e)},mmap:(c,t,e,n,r,o)=>{if(0!=(2&r)&&0==(2&o)&&2!=(2097155&c.flags))throw new Al.ErrnoError(2);if(1==(2097155&c.flags))throw new Al.ErrnoError(2);if(!c.stream_ops.mmap)throw new Al.ErrnoError(43);return c.stream_ops.mmap(c,t,e,n,r,o)},msync:(c,t,e,n,r)=>c&&c.stream_ops.msync?c.stream_ops.msync(c,t,e,n,r):0,munmap:c=>0,ioctl:(c,t,e)=>{if(!c.stream_ops.ioctl)throw new Al.ErrnoError(59);return c.stream_ops.ioctl(c,t,e)},readFile:(c,t={})=>{if(t.flags=t.flags||0,t.encoding=t.encoding||"binary","utf8"!==t.encoding&&"binary"!==t.encoding)throw new Error('Invalid encoding type "'+t.encoding+'"');var e,n=Al.open(c,t.flags),r=Al.stat(c).size,o=new Uint8Array(r);return Al.read(n,o,0,r,0),"utf8"===t.encoding?e=UTF8ArrayToString(o,0):"binary"===t.encoding&&(e=o),Al.close(n),e},writeFile:(c,t,e={})=>{e.flags=e.flags||577;var n=Al.open(c,e.flags,e.mode);if("string"==typeof t){var r=new Uint8Array(lengthBytesUTF8(t)+1),o=stringToUTF8Array(t,r,0,r.length);Al.write(n,r,0,o,void 0,e.canOwn)}else{if(!ArrayBuffer.isView(t))throw new Error("Unsupported data type");Al.write(n,t,0,t.byteLength,void 0,e.canOwn)}Al.close(n)},cwd:()=>Al.currentPath,chdir:c=>{var t=Al.lookupPath(c,{follow:!0});if(null===t.node)throw new Al.ErrnoError(44);if(!Al.isDir(t.node.mode))throw new Al.ErrnoError(54);var e=Al.nodePermissions(t.node,"x");if(e)throw new Al.ErrnoError(e);Al.currentPath=t.path},createDefaultDirectories:()=>{Al.mkdir("/tmp"),Al.mkdir("/home"),Al.mkdir("/home/web_user")},createDefaultDevices:()=>{Al.mkdir("/dev"),Al.registerDevice(Al.makedev(1,3),{read:()=>0,write:(c,t,e,n,r)=>n}),Al.mkdev("/dev/null",Al.makedev(1,3)),Dl.register(Al.makedev(5,0),Dl.default_tty_ops),Dl.register(Al.makedev(6,0),Dl.default_tty1_ops),Al.mkdev("/dev/tty",Al.makedev(5,0)),Al.mkdev("/dev/tty1",Al.makedev(6,0));var c=getRandomDevice();Al.createDevice("/dev","random",c),Al.createDevice("/dev","urandom",c),Al.mkdir("/dev/shm"),Al.mkdir("/dev/shm/tmp")},createSpecialDirectories:()=>{Al.mkdir("/proc");var c=Al.mkdir("/proc/self");Al.mkdir("/proc/self/fd"),Al.mount({mount:()=>{var t=Al.createNode(c,"fd",16895,73);return t.node_ops={lookup:(c,t)=>{var e=+t,n=Al.getStream(e);if(!n)throw new Al.ErrnoError(8);var r={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:()=>n.path}};return r.parent=r,r}},t}},{},"/proc/self/fd")},createStandardStreams:()=>{t.stdin?Al.createDevice("/dev","stdin",t.stdin):Al.symlink("/dev/tty","/dev/stdin"),t.stdout?Al.createDevice("/dev","stdout",null,t.stdout):Al.symlink("/dev/tty","/dev/stdout"),t.stderr?Al.createDevice("/dev","stderr",null,t.stderr):Al.symlink("/dev/tty1","/dev/stderr");Al.open("/dev/stdin",0),Al.open("/dev/stdout",1),Al.open("/dev/stderr",1)},ensureErrnoError:()=>{Al.ErrnoError||(Al.ErrnoError=function(c,t){this.node=t,this.setErrno=function(c){this.errno=c},this.setErrno(c),this.message="FS error"},Al.ErrnoError.prototype=new Error,Al.ErrnoError.prototype.constructor=Al.ErrnoError,[44].forEach((c=>{Al.genericErrors[c]=new Al.ErrnoError(c),Al.genericErrors[c].stack="<generic error, no stack>"})))},staticInit:()=>{Al.ensureErrnoError(),Al.nameTable=new Array(4096),Al.mount(_l,{},"/"),Al.createDefaultDirectories(),Al.createDefaultDevices(),Al.createSpecialDirectories(),Al.filesystems={MEMFS:_l}},init:(c,e,n)=>{Al.init.initialized=!0,Al.ensureErrnoError(),t.stdin=c||t.stdin,t.stdout=e||t.stdout,t.stderr=n||t.stderr,Al.createStandardStreams()},quit:()=>{Al.init.initialized=!1,gc();for(var c=0;c<Al.streams.length;c++){var t=Al.streams[c];t&&Al.close(t)}},getMode:(c,t)=>{var e=0;return c&&(e|=365),t&&(e|=146),e},findObject:(c,t)=>{var e=Al.analyzePath(c,t);return e.exists?e.object:null},analyzePath:(c,t)=>{try{c=(n=Al.lookupPath(c,{follow:!t})).path}catch(c){}var e={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var n=Al.lookupPath(c,{parent:!0});e.parentExists=!0,e.parentPath=n.path,e.parentObject=n.node,e.name=Pl.basename(c),n=Al.lookupPath(c,{follow:!t}),e.exists=!0,e.path=n.path,e.object=n.node,e.name=n.node.name,e.isRoot="/"===n.path}catch(c){e.error=c.errno}return e},createPath:(c,t,e,n)=>{c="string"==typeof c?c:Al.getPath(c);for(var r=t.split("/").reverse();r.length;){var o=r.pop();if(o){var u=Pl.join2(c,o);try{Al.mkdir(u)}catch(c){}c=u}}return u},createFile:(c,t,e,n,r)=>{var o=Pl.join2("string"==typeof c?c:Al.getPath(c),t),u=Al.getMode(n,r);return Al.create(o,u)},createDataFile:(c,t,e,n,r,o)=>{var u=t;c&&(c="string"==typeof c?c:Al.getPath(c),u=t?Pl.join2(c,t):c);var M=Al.getMode(n,r),ll=Al.create(u,M);if(e){if("string"==typeof e){for(var cl=new Array(e.length),tl=0,Zl=e.length;tl<Zl;++tl)cl[tl]=e.charCodeAt(tl);e=cl}Al.chmod(ll,146|M);var dl=Al.open(ll,577);Al.write(dl,e,0,e.length,0,o),Al.close(dl),Al.chmod(ll,M)}return ll},createDevice:(c,t,e,n)=>{var r=Pl.join2("string"==typeof c?c:Al.getPath(c),t),o=Al.getMode(!!e,!!n);Al.createDevice.major||(Al.createDevice.major=64);var u=Al.makedev(Al.createDevice.major++,0);return Al.registerDevice(u,{open:c=>{c.seekable=!1},close:c=>{n&&n.buffer&&n.buffer.length&&n(10)},read:(c,t,n,r,o)=>{for(var u=0,M=0;M<r;M++){var ll;try{ll=e()}catch(c){throw new Al.ErrnoError(29)}if(void 0===ll&&0===u)throw new Al.ErrnoError(6);if(null==ll)break;u++,t[n+M]=ll}return u&&(c.node.timestamp=Date.now()),u},write:(c,t,e,r,o)=>{for(var u=0;u<r;u++)try{n(t[e+u])}catch(c){throw new Al.ErrnoError(29)}return r&&(c.node.timestamp=Date.now()),u}}),Al.mkdev(r,o,u)},forceLoadFile:c=>{if(c.isDevice||c.isFolder||c.link||c.contents)return!0;if("undefined"!=typeof XMLHttpRequest)throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");if(!r)throw new Error("Cannot load without read() or XMLHttpRequest.");try{c.contents=intArrayFromString(r(c.url),!0),c.usedBytes=c.contents.length}catch(c){throw new Al.ErrnoError(29)}},createLazyFile:(c,t,e,n,r)=>{function LazyUint8Array(){this.lengthKnown=!1,this.chunks=[]}if(LazyUint8Array.prototype.get=function(c){if(!(c>this.length-1||c<0)){var t=c%this.chunkSize,e=c/this.chunkSize|0;return this.getter(e)[t]}},LazyUint8Array.prototype.setDataGetter=function(c){this.getter=c},LazyUint8Array.prototype.cacheLength=function(){var c=new XMLHttpRequest;if(c.open("HEAD",e,!1),c.send(null),!(c.status>=200&&c.status<300||304===c.status))throw new Error("Couldn't load "+e+". Status: "+c.status);var t,n=Number(c.getResponseHeader("Content-length")),r=(t=c.getResponseHeader("Accept-Ranges"))&&"bytes"===t,o=(t=c.getResponseHeader("Content-Encoding"))&&"gzip"===t,u=1048576;r||(u=n);var M=this;M.setDataGetter((c=>{var t=c*u,r=(c+1)*u-1;if(r=Math.min(r,n-1),void 0===M.chunks[c]&&(M.chunks[c]=((c,t)=>{if(c>t)throw new Error("invalid range ("+c+", "+t+") or no bytes requested!");if(t>n-1)throw new Error("only "+n+" bytes available! programmer error!");var r=new XMLHttpRequest;if(r.open("GET",e,!1),n!==u&&r.setRequestHeader("Range","bytes="+c+"-"+t),r.responseType="arraybuffer",r.overrideMimeType&&r.overrideMimeType("text/plain; charset=x-user-defined"),r.send(null),!(r.status>=200&&r.status<300||304===r.status))throw new Error("Couldn't load "+e+". Status: "+r.status);return void 0!==r.response?new Uint8Array(r.response||[]):intArrayFromString(r.responseText||"",!0)})(t,r)),void 0===M.chunks[c])throw new Error("doXHR failed!");return M.chunks[c]})),!o&&n||(u=n=1,n=this.getter(0).length,u=n,bl("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=n,this._chunkSize=u,this.lengthKnown=!0},"undefined"!=typeof XMLHttpRequest){if(!Zl)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var o=new LazyUint8Array;Object.defineProperties(o,{length:{get:function(){return this.lengthKnown||this.cacheLength(),this._length}},chunkSize:{get:function(){return this.lengthKnown||this.cacheLength(),this._chunkSize}}});var u={isDevice:!1,contents:o}}else u={isDevice:!1,url:e};var M=Al.createFile(c,t,u,n,r);u.contents?M.contents=u.contents:u.url&&(M.contents=null,M.url=u.url),Object.defineProperties(M,{usedBytes:{get:function(){return this.contents.length}}});var ll={};return Object.keys(M.stream_ops).forEach((c=>{var t=M.stream_ops[c];ll[c]=function(){return Al.forceLoadFile(M),t.apply(null,arguments)}})),ll.read=(c,t,e,n,r)=>{Al.forceLoadFile(M);var o=c.node.contents;if(r>=o.length)return 0;var u=Math.min(o.length-r,n);if(o.slice)for(var ll=0;ll<u;ll++)t[e+ll]=o[r+ll];else for(ll=0;ll<u;ll++)t[e+ll]=o.get(r+ll);return u},M.stream_ops=ll,M},createPreloadedFile:(c,t,e,n,r,u,M,ll,cl,tl)=>{var Zl=t?Ol.resolve(Pl.join2(c,t)):c;function processData(e){function finish(e){tl&&tl(),ll||Al.createDataFile(c,t,e,n,r,cl),u&&u(),removeRunDependency()}Browser.handledByPreloadPlugin(e,Zl,finish,(()=>{M&&M(),removeRunDependency()}))||finish(e)}addRunDependency(),"string"==typeof e?function(c,t,e,n){var r=n?"":"al "+c;o(c,(function(e){assert(e,'Loading data file "'+c+'" failed (no arrayBuffer).'),t(new Uint8Array(e)),r&&removeRunDependency()}),(function(t){if(!e)throw'Loading data file "'+c+'" failed.';e()})),r&&addRunDependency()}(e,(c=>processData(c)),M):processData(e)},indexedDB:()=>window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB,DB_NAME:()=>"EM_FS_"+window.location.pathname,DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:(c,t,e)=>{t=t||(()=>{}),e=e||(()=>{});var n=Al.indexedDB();try{var r=n.open(Al.DB_NAME(),Al.DB_VERSION)}catch(c){return e(c)}r.onupgradeneeded=()=>{bl("creating db"),r.result.createObjectStore(Al.DB_STORE_NAME)},r.onsuccess=()=>{var n=r.result.transaction([Al.DB_STORE_NAME],"readwrite"),o=n.objectStore(Al.DB_STORE_NAME),u=0,M=0,ll=c.length;function finish(){0==M?t():e()}c.forEach((c=>{var t=o.put(Al.analyzePath(c).object.contents,c);t.onsuccess=()=>{++u+M==ll&&finish()},t.onerror=()=>{M++,u+M==ll&&finish()}})),n.onerror=e},r.onerror=e},loadFilesFromDB:(c,t,e)=>{t=t||(()=>{}),e=e||(()=>{});var n=Al.indexedDB();try{var r=n.open(Al.DB_NAME(),Al.DB_VERSION)}catch(c){return e(c)}r.onupgradeneeded=e,r.onsuccess=()=>{var n=r.result;try{var o=n.transaction([Al.DB_STORE_NAME],"readonly")}catch(c){return void e(c)}var u=o.objectStore(Al.DB_STORE_NAME),M=0,ll=0,cl=c.length;function finish(){0==ll?t():e()}c.forEach((c=>{var t=u.get(c);t.onsuccess=()=>{Al.analyzePath(c).exists&&Al.unlink(c),Al.createDataFile(Pl.dirname(c),Pl.basename(c),t.result,!0,!0,!0),++M+ll==cl&&finish()},t.onerror=()=>{ll++,M+ll==cl&&finish()}})),o.onerror=e},r.onerror=e}},$l={DEFAULT_POLLMASK:5,calculateAt:function(c,t,e){if(Pl.isAbs(t))return t;var n;if(-100===c)n=Al.cwd();else{var r=Al.getStream(c);if(!r)throw new Al.ErrnoError(8);n=r.path}if(0==t.length){if(!e)throw new Al.ErrnoError(44);return n}return Pl.join2(n,t)},doStat:function(c,t,e){try{var n=c(t)}catch(c){if(c&&c.node&&Pl.normalize(t)!==Pl.normalize(Al.getPath(c.node)))return-54;throw c}return GROWABLE_HEAP_I32()[e>>2]=n.dev,GROWABLE_HEAP_I32()[e+4>>2]=0,GROWABLE_HEAP_I32()[e+8>>2]=n.ino,GROWABLE_HEAP_I32()[e+12>>2]=n.mode,GROWABLE_HEAP_I32()[e+16>>2]=n.nlink,GROWABLE_HEAP_I32()[e+20>>2]=n.uid,GROWABLE_HEAP_I32()[e+24>>2]=n.gid,GROWABLE_HEAP_I32()[e+28>>2]=n.rdev,GROWABLE_HEAP_I32()[e+32>>2]=0,wl=[n.size>>>0,(Sl=n.size,+Math.abs(Sl)>=1?Sl>0?(0|Math.min(+Math.floor(Sl/4294967296),4294967295))>>>0:~~+Math.ceil((Sl-+(~~Sl>>>0))/4294967296)>>>0:0)],GROWABLE_HEAP_I32()[e+40>>2]=wl[0],GROWABLE_HEAP_I32()[e+44>>2]=wl[1],GROWABLE_HEAP_I32()[e+48>>2]=4096,GROWABLE_HEAP_I32()[e+52>>2]=n.blocks,GROWABLE_HEAP_I32()[e+56>>2]=n.atime.getTime()/1e3|0,GROWABLE_HEAP_I32()[e+60>>2]=0,GROWABLE_HEAP_I32()[e+64>>2]=n.mtime.getTime()/1e3|0,GROWABLE_HEAP_I32()[e+68>>2]=0,GROWABLE_HEAP_I32()[e+72>>2]=n.ctime.getTime()/1e3|0,GROWABLE_HEAP_I32()[e+76>>2]=0,wl=[n.ino>>>0,(Sl=n.ino,+Math.abs(Sl)>=1?Sl>0?(0|Math.min(+Math.floor(Sl/4294967296),4294967295))>>>0:~~+Math.ceil((Sl-+(~~Sl>>>0))/4294967296)>>>0:0)],GROWABLE_HEAP_I32()[e+80>>2]=wl[0],GROWABLE_HEAP_I32()[e+84>>2]=wl[1],0},doMsync:function(c,t,e,n,r){var o=GROWABLE_HEAP_U8().slice(c,c+e);Al.msync(t,o,r,e,n)},varargs:void 0,get:function(){return $l.varargs+=4,GROWABLE_HEAP_I32()[$l.varargs-4>>2]},getStr:function(c){return UTF8ToString(c)},getStreamFromFD:function(c){var t=Al.getStream(c);if(!t)throw new Al.ErrnoError(8);return t}};function ___syscall_fstat64(c,t){if(el)return _emscripten_proxy_to_main_thread_js(4,1,c,t);try{var e=$l.getStreamFromFD(c);return $l.doStat(Al.stat,e.path,t)}catch(c){if(void 0===Al||!(c instanceof Al.ErrnoError))throw c;return-c.errno}}function ___syscall_ftruncate64(c,t,e){if(el)return _emscripten_proxy_to_main_thread_js(5,1,c,t,e);try{var n=4294967296*e+(t>>>0);return Al.ftruncate(c,n),0}catch(c){if(void 0===Al||!(c instanceof Al.ErrnoError))throw c;return-c.errno}}function ___syscall_lstat64(c,t){if(el)return _emscripten_proxy_to_main_thread_js(7,1,c,t);try{return c=$l.getStr(c),$l.doStat(Al.lstat,c,t)}catch(c){if(void 0===Al||!(c instanceof Al.ErrnoError))throw c;return-c.errno}}function ___syscall_newfstatat(c,t,e,n){if(el)return _emscripten_proxy_to_main_thread_js(8,1,c,t,e,n);try{t=$l.getStr(t);var r=256&n,o=4096&n;return n&=-4353,t=$l.calculateAt(c,t,o),$l.doStat(r?Al.lstat:Al.stat,t,e)}catch(c){if(void 0===Al||!(c instanceof Al.ErrnoError))throw c;return-c.errno}}function ___syscall_openat(c,t,e,n){if(el)return _emscripten_proxy_to_main_thread_js(9,1,c,t,e,n);$l.varargs=n;try{t=$l.getStr(t),t=$l.calculateAt(c,t);var r=n?$l.get():0;return Al.open(t,e,r).fd}catch(c){if(void 0===Al||!(c instanceof Al.ErrnoError))throw c;return-c.errno}}function ___syscall_renameat(c,t,e,n){if(el)return _emscripten_proxy_to_main_thread_js(10,1,c,t,e,n);try{return t=$l.getStr(t),n=$l.getStr(n),t=$l.calculateAt(c,t),n=$l.calculateAt(e,n),Al.rename(t,n),0}catch(c){if(void 0===Al||!(c instanceof Al.ErrnoError))throw c;return-c.errno}}function ___syscall_stat64(c,t){if(el)return _emscripten_proxy_to_main_thread_js(11,1,c,t);try{return c=$l.getStr(c),$l.doStat(Al.stat,c,t)}catch(c){if(void 0===Al||!(c instanceof Al.ErrnoError))throw c;return-c.errno}}function ___syscall_unlinkat(c,t,e){if(el)return _emscripten_proxy_to_main_thread_js(12,1,c,t,e);try{return t=$l.getStr(t),t=$l.calculateAt(c,t),0===e?Al.unlink(t):512===e?Al.rmdir(t):abort("Invalid flags passed to unlinkat"),0}catch(c){if(void 0===Al||!(c instanceof Al.ErrnoError))throw c;return-c.errno}}var ql="To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking";function getShiftFromSize(c){switch(c){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+c)}}var lc=void 0;function readLatin1String(c){for(var t="",e=c;GROWABLE_HEAP_U8()[e];)t+=lc[GROWABLE_HEAP_U8()[e++]];return t}var cc={},tc={},Zc={},dc=48,ec=57;function makeLegalFunctionName(c){if(void 0===c)return"_unknown";var t=(c=c.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return t>=dc&&t<=ec?"_"+c:c}function createNamedFunction(c,t){return c=makeLegalFunctionName(c),new Function("body","return function "+c+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(t)}function extendError(c,t){var e=createNamedFunction(t,(function(c){this.name=t,this.message=c;var e=new Error(c).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(c.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var nc=void 0;function throwBindingError(c){throw new nc(c)}var bc=void 0;function throwInternalError(c){throw new bc(c)}function whenDependentTypesAreResolved(c,t,e){function onComplete(t){var n=e(t);n.length!==c.length&&throwInternalError("Mismatched type converter count");for(var r=0;r<c.length;++r)registerType(c[r],n[r])}c.forEach((function(c){Zc[c]=t}));var n=new Array(t.length),r=[],o=0;t.forEach(((c,t)=>{tc.hasOwnProperty(c)?n[t]=tc[c]:(r.push(c),cc.hasOwnProperty(c)||(cc[c]=[]),cc[c].push((()=>{n[t]=tc[c],++o===r.length&&onComplete(n)})))})),0===r.length&&onComplete(n)}function registerType(c,t,e={}){if(!("argPackAdvance"in t))throw new TypeError("registerType registeredInstance requires argPackAdvance");var n=t.name;if(c||throwBindingError('type "'+n+'" must have a positive integer typeid pointer'),tc.hasOwnProperty(c)){if(e.ignoreDuplicateRegistrations)return;throwBindingError("Cannot register type '"+n+"' twice")}if(tc[c]=t,delete Zc[c],cc.hasOwnProperty(c)){var r=cc[c];delete cc[c],r.forEach((c=>c()))}}function ClassHandle_isAliasOf(c){if(!(this instanceof ClassHandle))return!1;if(!(c instanceof ClassHandle))return!1;for(var t=this.$$.ptrType.registeredClass,e=this.$$.ptr,n=c.$$.ptrType.registeredClass,r=c.$$.ptr;t.baseClass;)e=t.upcast(e),t=t.baseClass;for(;n.baseClass;)r=n.upcast(r),n=n.baseClass;return t===n&&e===r}function throwInstanceAlreadyDeleted(c){throwBindingError(c.$$.ptrType.registeredClass.name+" instance already deleted")}var mc=!1;function detachFinalizer(c){}function releaseClassHandle(c){c.count.value-=1,0===c.count.value&&function(c){c.smartPtr?c.smartPtrType.rawDestructor(c.smartPtr):c.ptrType.registeredClass.rawDestructor(c.ptr)}(c)}function downcastPointer(c,t,e){if(t===e)return c;if(void 0===e.baseClass)return null;var n=downcastPointer(c,t,e.baseClass);return null===n?null:e.downcast(n)}var ac={};function getInheritedInstanceCount(){return Object.keys(Xc).length}function getLiveInheritedInstances(){var c=[];for(var t in Xc)Xc.hasOwnProperty(t)&&c.push(Xc[t]);return c}var ic=[];function flushPendingDeletes(){for(;ic.length;){var c=ic.pop();c.$$.deleteScheduled=!1,c.delete()}}var rc=void 0;function setDelayFunction(c){rc=c,ic.length&&rc&&rc(flushPendingDeletes)}var Xc={};function getInheritedInstance(c,t){return t=function(c,t){for(void 0===t&&throwBindingError("ptr should not be undefined");c.baseClass;)t=c.upcast(t),c=c.baseClass;return t}(c,t),Xc[t]}function makeClassHandle(c,t){return t.ptrType&&t.ptr||throwInternalError("makeClassHandle requires ptr and ptrType"),!!t.smartPtrType!==!!t.smartPtr&&throwInternalError("Both smartPtrType and smartPtr must be specified"),t.count={value:1},attachFinalizer(Object.create(c,{$$:{value:t}}))}function RegisteredPointer_fromWireType(c){var t=this.getPointee(c);if(!t)return this.destructor(c),null;var e=getInheritedInstance(this.registeredClass,t);if(void 0!==e){if(0===e.$$.count.value)return e.$$.ptr=t,e.$$.smartPtr=c,e.clone();var n=e.clone();return this.destructor(c),n}function makeDefaultHandle(){return this.isSmartPointer?makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:t,smartPtrType:this,smartPtr:c}):makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr:c})}var r,o=this.registeredClass.getActualType(t),u=ac[o];if(!u)return makeDefaultHandle.call(this);r=this.isConst?u.constPointerType:u.pointerType;var M=downcastPointer(t,this.registeredClass,r.registeredClass);return null===M?makeDefaultHandle.call(this):this.isSmartPointer?makeClassHandle(r.registeredClass.instancePrototype,{ptrType:r,ptr:M,smartPtrType:this,smartPtr:c}):makeClassHandle(r.registeredClass.instancePrototype,{ptrType:r,ptr:M})}function attachFinalizer(c){return"undefined"==typeof FinalizationRegistry?(attachFinalizer=c=>c,c):(mc=new FinalizationRegistry((c=>{releaseClassHandle(c.$$)})),attachFinalizer=c=>{var t=c.$$;if(!!t.smartPtr){var e={$$:t};mc.register(c,e,c)}return c},detachFinalizer=c=>mc.unregister(c),attachFinalizer(c))}function ClassHandle_clone(){if(this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.preservePointerOnDelete)return this.$$.count.value+=1,this;var c,t=attachFinalizer(Object.create(Object.getPrototypeOf(this),{$$:{value:(c=this.$$,{count:c.count,deleteScheduled:c.deleteScheduled,preservePointerOnDelete:c.preservePointerOnDelete,ptr:c.ptr,ptrType:c.ptrType,smartPtr:c.smartPtr,smartPtrType:c.smartPtrType})}}));return t.$$.count.value+=1,t.$$.deleteScheduled=!1,t}function ClassHandle_delete(){this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&throwBindingError("Object already scheduled for deletion"),detachFinalizer(this),releaseClassHandle(this.$$),this.$$.preservePointerOnDelete||(this.$$.smartPtr=void 0,this.$$.ptr=void 0)}function ClassHandle_isDeleted(){return!this.$$.ptr}function ClassHandle_deleteLater(){return this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&throwBindingError("Object already scheduled for deletion"),ic.push(this),1===ic.length&&rc&&rc(flushPendingDeletes),this.$$.deleteScheduled=!0,this}function ClassHandle(){}function ensureOverloadTable(c,t,e){if(void 0===c[t].overloadTable){var n=c[t];c[t]=function(){return c[t].overloadTable.hasOwnProperty(arguments.length)||throwBindingError("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+c[t].overloadTable+")!"),c[t].overloadTable[arguments.length].apply(this,arguments)},c[t].overloadTable=[],c[t].overloadTable[n.argCount]=n}}function RegisteredClass(c,t,e,n,r,o,u,M){this.name=c,this.constructor=t,this.instancePrototype=e,this.rawDestructor=n,this.baseClass=r,this.getActualType=o,this.upcast=u,this.downcast=M,this.pureVirtualFunctions=[]}function upcastPointer(c,t,e){for(;t!==e;)t.upcast||throwBindingError("Expected null or instance of "+e.name+", got an instance of "+t.name),c=t.upcast(c),t=t.baseClass;return c}function constNoSmartPtrRawPointerToWireType(c,t){if(null===t)return this.isReference&&throwBindingError("null is not a valid "+this.name),0;t.$$||throwBindingError('Cannot pass "'+_embind_repr(t)+'" as a '+this.name),t.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name);var e=t.$$.ptrType.registeredClass;return upcastPointer(t.$$.ptr,e,this.registeredClass)}function genericPointerToWireType(c,t){var e;if(null===t)return this.isReference&&throwBindingError("null is not a valid "+this.name),this.isSmartPointer?(e=this.rawConstructor(),null!==c&&c.push(this.rawDestructor,e),e):0;t.$$||throwBindingError('Cannot pass "'+_embind_repr(t)+'" as a '+this.name),t.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name),!this.isConst&&t.$$.ptrType.isConst&&throwBindingError("Cannot convert argument of type "+(t.$$.smartPtrType?t.$$.smartPtrType.name:t.$$.ptrType.name)+" to parameter type "+this.name);var n=t.$$.ptrType.registeredClass;if(e=upcastPointer(t.$$.ptr,n,this.registeredClass),this.isSmartPointer)switch(void 0===t.$$.smartPtr&&throwBindingError("Passing raw pointer to smart pointer is illegal"),this.sharingPolicy){case 0:t.$$.smartPtrType===this?e=t.$$.smartPtr:throwBindingError("Cannot convert argument of type "+(t.$$.smartPtrType?t.$$.smartPtrType.name:t.$$.ptrType.name)+" to parameter type "+this.name);break;case 1:e=t.$$.smartPtr;break;case 2:if(t.$$.smartPtrType===this)e=t.$$.smartPtr;else{var r=t.clone();e=this.rawShare(e,Gc.toHandle((function(){r.delete()}))),null!==c&&c.push(this.rawDestructor,e)}break;default:throwBindingError("Unsupporting sharing policy")}return e}function nonConstNoSmartPtrRawPointerToWireType(c,t){if(null===t)return this.isReference&&throwBindingError("null is not a valid "+this.name),0;t.$$||throwBindingError('Cannot pass "'+_embind_repr(t)+'" as a '+this.name),t.$$.ptr||throwBindingError("Cannot pass deleted object as a pointer of type "+this.name),t.$$.ptrType.isConst&&throwBindingError("Cannot convert argument of type "+t.$$.ptrType.name+" to parameter type "+this.name);var e=t.$$.ptrType.registeredClass;return upcastPointer(t.$$.ptr,e,this.registeredClass)}function simpleReadValueFromPointer(c){return this.fromWireType(GROWABLE_HEAP_U32()[c>>2])}function RegisteredPointer_getPointee(c){return this.rawGetPointee&&(c=this.rawGetPointee(c)),c}function RegisteredPointer_destructor(c){this.rawDestructor&&this.rawDestructor(c)}function RegisteredPointer_deleteObject(c){null!==c&&c.delete()}function RegisteredPointer(c,t,e,n,r,o,u,M,ll,cl,tl){this.name=c,this.registeredClass=t,this.isReference=e,this.isConst=n,this.isSmartPointer=r,this.pointeeType=o,this.sharingPolicy=u,this.rawGetPointee=M,this.rawConstructor=ll,this.rawShare=cl,this.rawDestructor=tl,r||void 0!==t.baseClass?this.toWireType=genericPointerToWireType:n?(this.toWireType=constNoSmartPtrRawPointerToWireType,this.destructorFunction=null):(this.toWireType=nonConstNoSmartPtrRawPointerToWireType,this.destructorFunction=null)}function dynCall(c,e,n){return c.includes("j")?function(c,e,n){var r=t["dynCall_"+c];return n&&n.length?r.apply(null,[e].concat(n)):r.call(null,e)}(c,e,n):getWasmTableEntry(e).apply(null,n)}function embind__requireFunction(c,t){var e,n,r,o=(c=readLatin1String(c)).includes("j")?(e=c,n=t,r=[],function(){return r.length=0,Object.assign(r,arguments),dynCall(e,n,r)}):getWasmTableEntry(t);return"function"!=typeof o&&throwBindingError("unknown function pointer with signature "+c+": "+t),o}var Wc=void 0;function getTypeName(c){var t=Uc(c),e=readLatin1String(t);return Hc(t),e}function throwUnboundTypeError(c,t){var e=[],n={};throw t.forEach((function visit(c){n[c]||tc[c]||(Zc[c]?Zc[c].forEach(visit):(e.push(c),n[c]=!0))})),new Wc(c+": "+e.map(getTypeName).join([", "]))}function heap32VectorToArray(c,t){for(var e=[],n=0;n<c;n++)e.push(GROWABLE_HEAP_I32()[(t>>2)+n]);return e}function runDestructors(c){for(;c.length;){var t=c.pop();c.pop()(t)}}function craftInvokerFunction(c,t,e,n,r){var o=t.length;o<2&&throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var u=null!==t[1]&&null!==e,M=!1,ll=1;ll<t.length;++ll)if(null!==t[ll]&&void 0===t[ll].destructorFunction){M=!0;break}var cl="void"!==t[0].name,tl="",Zl="";for(ll=0;ll<o-2;++ll)tl+=(0!==ll?", ":"")+"arg"+ll,Zl+=(0!==ll?", ":"")+"arg"+ll+"Wired";var dl="return function "+makeLegalFunctionName(c)+"("+tl+") {\nif (arguments.length !== "+(o-2)+") {\nthrowBindingError('function "+c+" called with ' + arguments.length + ' arguments, expected "+(o-2)+" args!');\n}\n";M&&(dl+="var destructors = [];\n");var el=M?"destructors":"null",nl=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],bl=[throwBindingError,n,r,runDestructors,t[0],t[1]];u&&(dl+="var thisWired = classParam.toWireType("+el+", this);\n");for(ll=0;ll<o-2;++ll)dl+="var arg"+ll+"Wired = argType"+ll+".toWireType("+el+", arg"+ll+"); // "+t[ll+2].name+"\n",nl.push("argType"+ll),bl.push(t[ll+2]);if(u&&(Zl="thisWired"+(Zl.length>0?", ":"")+Zl),dl+=(cl?"var rv = ":"")+"invoker(fn"+(Zl.length>0?", ":"")+Zl+");\n",M)dl+="runDestructors(destructors);\n";else for(ll=u?1:2;ll<t.length;++ll){var ml=1===ll?"thisWired":"arg"+(ll-2)+"Wired";null!==t[ll].destructorFunction&&(dl+=ml+"_dtor("+ml+"); // "+t[ll].name+"\n",nl.push(ml+"_dtor"),bl.push(t[ll].destructorFunction))}return cl&&(dl+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),dl+="}\n",nl.push(dl),function(c,t){if(!(c instanceof Function))throw new TypeError("new_ called with constructor type "+typeof c+" which is not a function");var e=createNamedFunction(c.name||"unknownFunctionName",(function(){}));e.prototype=c.prototype;var n=new e,r=c.apply(n,t);return r instanceof Object?r:n}(Function,nl).apply(null,bl)}var oc=[],Vc=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function __emval_decref(c){c>4&&0==--Vc[c].refcount&&(Vc[c]=void 0,oc.push(c))}function count_emval_handles(){for(var c=0,t=5;t<Vc.length;++t)void 0!==Vc[t]&&++c;return c}function get_first_emval(){for(var c=5;c<Vc.length;++c)if(void 0!==Vc[c])return Vc[c];return null}var Gc={toValue:c=>(c||throwBindingError("Cannot use deleted val. handle = "+c),Vc[c].value),toHandle:c=>{switch(c){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var t=oc.length?oc.pop():Vc.length;return Vc[t]={refcount:1,value:c},t}}};function _embind_repr(c){if(null===c)return"null";var t=typeof c;return"object"===t||"array"===t||"function"===t?c.toString():""+c}function floatReadValueFromPointer(c,t){switch(t){case 2:return function(c){return this.fromWireType((rl.buffer!=ul&&updateGlobalBufferAndViews(rl.buffer),Fl)[c>>2])};case 3:return function(c){return this.fromWireType(GROWABLE_HEAP_F64()[c>>3])};default:throw new TypeError("Unknown float type: "+c)}}function integerReadValueFromPointer(c,t,e){switch(t){case 0:return e?function(c){return GROWABLE_HEAP_I8()[c]}:function(c){return GROWABLE_HEAP_U8()[c]};case 1:return e?function(c){return GROWABLE_HEAP_I16()[c>>1]}:function(c){return GROWABLE_HEAP_U16()[c>>1]};case 2:return e?function(c){return GROWABLE_HEAP_I32()[c>>2]}:function(c){return GROWABLE_HEAP_U32()[c>>2]};default:throw new TypeError("Unknown integer type: "+c)}}var uc;function executeNotifiedProxyingQueue(c){Atomics.store(GROWABLE_HEAP_I32(),c>>2,1),fc()&&zc(c),Atomics.compareExchange(GROWABLE_HEAP_I32(),c>>2,1,0)}function __mmap_js(c,t,e,n,r,o,u,M){if(el)return _emscripten_proxy_to_main_thread_js(13,1,c,t,e,n,r,o,u,M);try{var ll=Al.getStream(r);if(!ll)return-8;var cl=Al.mmap(ll,c,t,o,e,n),tl=cl.ptr;return GROWABLE_HEAP_I32()[u>>2]=cl.allocated,tl}catch(c){if(void 0===Al||!(c instanceof Al.ErrnoError))throw c;return-c.errno}}function __munmap_js(c,t,e,n,r,o){if(el)return _emscripten_proxy_to_main_thread_js(14,1,c,t,e,n,r,o);try{var u=Al.getStream(r);u&&(2&e&&$l.doMsync(c,u,t,n,o),Al.munmap(u))}catch(c){if(void 0===Al||!(c instanceof Al.ErrnoError))throw c;return-c.errno}}function _emscripten_get_heap_max(){return 2147483648}function _emscripten_proxy_to_main_thread_js(c,t){var e=arguments.length-2,n=arguments;return function(c){var t=Lc(),e=c();return Cc(t),e}((function(){for(var r=e,o=Ec(8*r),u=o>>3,M=0;M<e;M++){var ll=n[2+M];GROWABLE_HEAP_F64()[u+M]=ll}return Bc(c,r,o,t)}))}t.executeNotifiedProxyingQueue=executeNotifiedProxyingQueue,uc=el?()=>performance.now()-t.__performance_now_clock_drift:()=>performance.now();var yc=[];function emscripten_realloc_buffer(c){try{return rl.grow(c-ul.byteLength+65535>>>16),updateGlobalBufferAndViews(rl.buffer),1}catch(c){}}var sc={};function getEnvStrings(){if(!getEnvStrings.strings){var c={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:cl||"./this.program"};for(var t in sc)void 0===sc[t]?delete c[t]:c[t]=sc[t];var e=[];for(var t in c)e.push(t+"="+c[t]);getEnvStrings.strings=e}return getEnvStrings.strings}function _environ_get(c,t){if(el)return _emscripten_proxy_to_main_thread_js(15,1,c,t);var e=0;return getEnvStrings().forEach((function(n,r){var o=t+e;GROWABLE_HEAP_I32()[c+4*r>>2]=o,function(c,t,e){for(var n=0;n<c.length;++n)GROWABLE_HEAP_I8()[t++>>0]=c.charCodeAt(n);e||(GROWABLE_HEAP_I8()[t>>0]=0)}(n,o),e+=n.length+1})),0}function _environ_sizes_get(c,t){if(el)return _emscripten_proxy_to_main_thread_js(16,1,c,t);var e=getEnvStrings();GROWABLE_HEAP_I32()[c>>2]=e.length;var n=0;return e.forEach((function(c){n+=c.length+1})),GROWABLE_HEAP_I32()[t>>2]=n,0}function _fd_close(c){if(el)return _emscripten_proxy_to_main_thread_js(17,1,c);try{var t=$l.getStreamFromFD(c);return Al.close(t),0}catch(c){if(void 0===Al||!(c instanceof Al.ErrnoError))throw c;return c.errno}}function _fd_read(c,t,e,n){if(el)return _emscripten_proxy_to_main_thread_js(18,1,c,t,e,n);try{var r=function(c,t,e,n){for(var r=0,o=0;o<e;o++){var u=GROWABLE_HEAP_U32()[t>>2],M=GROWABLE_HEAP_U32()[t+4>>2];t+=8;var ll=Al.read(c,GROWABLE_HEAP_I8(),u,M,n);if(ll<0)return-1;if(r+=ll,ll<M)break}return r}($l.getStreamFromFD(c),t,e);return GROWABLE_HEAP_I32()[n>>2]=r,0}catch(c){if(void 0===Al||!(c instanceof Al.ErrnoError))throw c;return c.errno}}function _fd_seek(c,t,e,n,r){if(el)return _emscripten_proxy_to_main_thread_js(19,1,c,t,e,n,r);try{var o=$l.getStreamFromFD(c),u=4294967296*e+(t>>>0),M=9007199254740992;return u<=-M||u>=M?61:(Al.llseek(o,u,n),wl=[o.position>>>0,(Sl=o.position,+Math.abs(Sl)>=1?Sl>0?(0|Math.min(+Math.floor(Sl/4294967296),4294967295))>>>0:~~+Math.ceil((Sl-+(~~Sl>>>0))/4294967296)>>>0:0)],GROWABLE_HEAP_I32()[r>>2]=wl[0],GROWABLE_HEAP_I32()[r+4>>2]=wl[1],o.getdents&&0===u&&0===n&&(o.getdents=null),0)}catch(c){if(void 0===Al||!(c instanceof Al.ErrnoError))throw c;return c.errno}}function _fd_sync(c){if(el)return _emscripten_proxy_to_main_thread_js(20,1,c);try{var t=$l.getStreamFromFD(c);return t.stream_ops&&t.stream_ops.fsync?-t.stream_ops.fsync(t):0}catch(c){if(void 0===Al||!(c instanceof Al.ErrnoError))throw c;return c.errno}}function _fd_write(c,t,e,n){if(el)return _emscripten_proxy_to_main_thread_js(21,1,c,t,e,n);try{var r=function(c,t,e,n){for(var r=0,o=0;o<e;o++){var u=GROWABLE_HEAP_U32()[t>>2],M=GROWABLE_HEAP_U32()[t+4>>2];t+=8;var ll=Al.write(c,GROWABLE_HEAP_I8(),u,M,n);if(ll<0)return-1;r+=ll}return r}($l.getStreamFromFD(c),t,e);return GROWABLE_HEAP_I32()[n>>2]=r,0}catch(c){if(void 0===Al||!(c instanceof Al.ErrnoError))throw c;return c.errno}}function __isLeapYear(c){return c%4==0&&(c%100!=0||c%400==0)}var hc=[31,29,31,30,31,30,31,31,30,31,30,31],Rc=[31,28,31,30,31,30,31,31,30,31,30,31];function _strftime(c,t,e,n){var r=GROWABLE_HEAP_I32()[n+40>>2],o={tm_sec:GROWABLE_HEAP_I32()[n>>2],tm_min:GROWABLE_HEAP_I32()[n+4>>2],tm_hour:GROWABLE_HEAP_I32()[n+8>>2],tm_mday:GROWABLE_HEAP_I32()[n+12>>2],tm_mon:GROWABLE_HEAP_I32()[n+16>>2],tm_year:GROWABLE_HEAP_I32()[n+20>>2],tm_wday:GROWABLE_HEAP_I32()[n+24>>2],tm_yday:GROWABLE_HEAP_I32()[n+28>>2],tm_isdst:GROWABLE_HEAP_I32()[n+32>>2],tm_gmtoff:GROWABLE_HEAP_I32()[n+36>>2],tm_zone:r?UTF8ToString(r):""},u=UTF8ToString(e),M={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ll in M)u=u.replace(new RegExp(ll,"g"),M[ll]);var cl=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],tl=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(c,t,e){for(var n="number"==typeof c?c.toString():c||"";n.length<t;)n=e[0]+n;return n}function leadingNulls(c,t){return leadingSomething(c,t,"0")}function compareByDay(c,t){function sgn(c){return c<0?-1:c>0?1:0}var e;return 0===(e=sgn(c.getFullYear()-t.getFullYear()))&&0===(e=sgn(c.getMonth()-t.getMonth()))&&(e=sgn(c.getDate()-t.getDate())),e}function getFirstWeekStartDate(c){switch(c.getDay()){case 0:return new Date(c.getFullYear()-1,11,29);case 1:return c;case 2:return new Date(c.getFullYear(),0,3);case 3:return new Date(c.getFullYear(),0,2);case 4:return new Date(c.getFullYear(),0,1);case 5:return new Date(c.getFullYear()-1,11,31);case 6:return new Date(c.getFullYear()-1,11,30)}}function getWeekBasedYear(c){var t=function(c,t){for(var e=new Date(c.getTime());t>0;){var n=__isLeapYear(e.getFullYear()),r=e.getMonth(),o=(n?hc:Rc)[r];if(!(t>o-e.getDate()))return e.setDate(e.getDate()+t),e;t-=o-e.getDate()+1,e.setDate(1),r<11?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return e}(new Date(c.tm_year+1900,0,1),c.tm_yday),e=new Date(t.getFullYear(),0,4),n=new Date(t.getFullYear()+1,0,4),r=getFirstWeekStartDate(e),o=getFirstWeekStartDate(n);return compareByDay(r,t)<=0?compareByDay(o,t)<=0?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var Zl={"%a":function(c){return cl[c.tm_wday].substring(0,3)},"%A":function(c){return cl[c.tm_wday]},"%b":function(c){return tl[c.tm_mon].substring(0,3)},"%B":function(c){return tl[c.tm_mon]},"%C":function(c){return leadingNulls((c.tm_year+1900)/100|0,2)},"%d":function(c){return leadingNulls(c.tm_mday,2)},"%e":function(c){return leadingSomething(c.tm_mday,2," ")},"%g":function(c){return getWeekBasedYear(c).toString().substring(2)},"%G":function(c){return getWeekBasedYear(c)},"%H":function(c){return leadingNulls(c.tm_hour,2)},"%I":function(c){var t=c.tm_hour;return 0==t?t=12:t>12&&(t-=12),leadingNulls(t,2)},"%j":function(c){return leadingNulls(c.tm_mday+function(c,t){for(var e=0,n=0;n<=t;e+=c[n++]);return e}(__isLeapYear(c.tm_year+1900)?hc:Rc,c.tm_mon-1),3)},"%m":function(c){return leadingNulls(c.tm_mon+1,2)},"%M":function(c){return leadingNulls(c.tm_min,2)},"%n":function(){return"\n"},"%p":function(c){return c.tm_hour>=0&&c.tm_hour<12?"AM":"PM"},"%S":function(c){return leadingNulls(c.tm_sec,2)},"%t":function(){return"\t"},"%u":function(c){return c.tm_wday||7},"%U":function(c){var t=c.tm_yday+7-c.tm_wday;return leadingNulls(Math.floor(t/7),2)},"%V":function(c){var t=Math.floor((c.tm_yday+7-(c.tm_wday+6)%7)/7);if((c.tm_wday+371-c.tm_yday-2)%7<=2&&t++,t){if(53==t){var e=(c.tm_wday+371-c.tm_yday)%7;4==e||3==e&&__isLeapYear(c.tm_year)||(t=1)}}else{t=52;var n=(c.tm_wday+7-c.tm_yday-1)%7;(4==n||5==n&&__isLeapYear(c.tm_year%400-1))&&t++}return leadingNulls(t,2)},"%w":function(c){return c.tm_wday},"%W":function(c){var t=c.tm_yday+7-(c.tm_wday+6)%7;return leadingNulls(Math.floor(t/7),2)},"%y":function(c){return(c.tm_year+1900).toString().substring(2)},"%Y":function(c){return c.tm_year+1900},"%z":function(c){var t=c.tm_gmtoff,e=t>=0;return t=(t=Math.abs(t)/60)/60*100+t%60,(e?"+":"-")+String("0000"+t).slice(-4)},"%Z":function(c){return c.tm_zone},"%%":function(){return"%"}};for(var ll in u=u.replace(/%%/g,"\0\0"),Zl)u.includes(ll)&&(u=u.replace(new RegExp(ll,"g"),Zl[ll](o)));var dl=intArrayFromString(u=u.replace(/\0\0/g,"%"),!1);return dl.length>t?0:(function(c,t){GROWABLE_HEAP_I8().set(c,t)}(dl,c),dl.length-1)}Cl.init();var FSNode=function(c,t,e,n){c||(c=this),this.parent=c,this.mount=c.mount,this.mounted=null,this.id=Al.nextInode++,this.name=t,this.mode=e,this.node_ops={},this.stream_ops={},this.rdev=n},pc=365,Yc=146;Object.defineProperties(FSNode.prototype,{read:{get:function(){return(this.mode&pc)===pc},set:function(c){c?this.mode|=pc:this.mode&=-366}},write:{get:function(){return(this.mode&Yc)===Yc},set:function(c){c?this.mode|=Yc:this.mode&=-147}},isFolder:{get:function(){return Al.isDir(this.mode)}},isDevice:{get:function(){return Al.isChrdev(this.mode)}}}),Al.FSNode=FSNode,Al.staticInit(),function(){for(var c=new Array(256),t=0;t<256;++t)c[t]=String.fromCharCode(t);lc=c}(),nc=t.BindingError=extendError(Error,"BindingError"),bc=t.InternalError=extendError(Error,"InternalError"),ClassHandle.prototype.isAliasOf=ClassHandle_isAliasOf,ClassHandle.prototype.clone=ClassHandle_clone,ClassHandle.prototype.delete=ClassHandle_delete,ClassHandle.prototype.isDeleted=ClassHandle_isDeleted,ClassHandle.prototype.deleteLater=ClassHandle_deleteLater,t.getInheritedInstanceCount=getInheritedInstanceCount,t.getLiveInheritedInstances=getLiveInheritedInstances,t.flushPendingDeletes=flushPendingDeletes,t.setDelayFunction=setDelayFunction,RegisteredPointer.prototype.getPointee=RegisteredPointer_getPointee,RegisteredPointer.prototype.destructor=RegisteredPointer_destructor,RegisteredPointer.prototype.argPackAdvance=8,RegisteredPointer.prototype.readValueFromPointer=simpleReadValueFromPointer,RegisteredPointer.prototype.deleteObject=RegisteredPointer_deleteObject,RegisteredPointer.prototype.fromWireType=RegisteredPointer_fromWireType,Wc=t.UnboundTypeError=extendError(Error,"UnboundTypeError"),t.count_emval_handles=count_emval_handles,t.get_first_emval=get_first_emval;var Fc=[null,exitOnMainThread,pthreadCreateProxied,function(c,t,e){if(el)return _emscripten_proxy_to_main_thread_js(3,1,c,t,e);$l.varargs=e;try{var n=$l.getStreamFromFD(c);switch(t){case 0:return(r=$l.get())<0?-28:Al.createStream(n,r).fd;case 1:case 2:case 6:case 7:return 0;case 3:return n.flags;case 4:var r=$l.get();return n.flags|=r,0;case 5:r=$l.get();return GROWABLE_HEAP_I16()[r+0>>1]=2,0;case 16:case 8:default:return-28;case 9:return o=28,GROWABLE_HEAP_I32()[vc()>>2]=o,-1}}catch(c){if(void 0===Al||!(c instanceof Al.ErrnoError))throw c;return-c.errno}var o},___syscall_fstat64,___syscall_ftruncate64,function(c,t,e){if(el)return _emscripten_proxy_to_main_thread_js(6,1,c,t,e);$l.varargs=e;try{var n=$l.getStreamFromFD(c);switch(t){case 21509:case 21505:case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:case 21523:case 21524:return n.tty?0:-59;case 21519:if(!n.tty)return-59;var r=$l.get();return GROWABLE_HEAP_I32()[r>>2]=0,0;case 21520:return n.tty?-28:-59;case 21531:r=$l.get();return Al.ioctl(n,t,r);default:abort("bad ioctl syscall "+t)}}catch(c){if(void 0===Al||!(c instanceof Al.ErrnoError))throw c;return-c.errno}},___syscall_lstat64,___syscall_newfstatat,___syscall_openat,___syscall_renameat,___syscall_stat64,___syscall_unlinkat,__mmap_js,__munmap_js,_environ_get,_environ_sizes_get,_fd_close,_fd_read,_fd_seek,_fd_sync,_fd_write];function intArrayFromString(c,t,e){var n=e>0?e:lengthBytesUTF8(c)+1,r=new Array(n),o=stringToUTF8Array(c,r,0,r.length);return t&&(r.length=o),r}var Jc,Ic={b:function(c,t,e,n){abort("Assertion failed: "+UTF8ToString(c)+", at: "+[t?UTF8ToString(t):"unknown filename",e,n?UTF8ToString(n):"unknown function"])},n:function(c){return Nc(c+24)+24},u:function(c){var t=new ExceptionInfo(c);return t.get_caught()||(t.set_caught(!0),jl--),t.set_rethrown(!1),Ml.push(t),exception_addRef(t),t.get_exception_ptr()},la:function(){if(!Ml.length)return 0;var c=Ml[Ml.length-1];return exception_addRef(c),c.excPtr},R:function(c){c&&exception_decRef(new ExceptionInfo(c))},x:function(){wc(0),exception_decRef(Ml.pop()),Ql=0},e:function(){var c=Ql;if(!c)return setTempRet0(0),0;var t=new ExceptionInfo(c);t.set_adjusted_ptr(c);var e=t.get_type();if(!e)return setTempRet0(0),c;for(var n=Array.prototype.slice.call(arguments),r=0;r<n.length;r++){var o=n[r];if(0===o||o===e)break;var u=t.ptr+16;if(Mc(o,e,u))return setTempRet0(o),c}return setTempRet0(e),c},j:function(){var c=Ql;if(!c)return setTempRet0(0),0;var t=new ExceptionInfo(c);t.set_adjusted_ptr(c);var e=t.get_type();if(!e)return setTempRet0(0),c;for(var n=Array.prototype.slice.call(arguments),r=0;r<n.length;r++){var o=n[r];if(0===o||o===e)break;var u=t.ptr+16;if(Mc(o,e,u))return setTempRet0(o),c}return setTempRet0(e),c},s:___cxa_free_exception,Q:function(c){c&&exception_addRef(new ExceptionInfo(c))},aa:___cxa_rethrow,ka:function(c){if(c){var t=new ExceptionInfo(c);Ml.push(t),t.set_rethrown(!0),___cxa_rethrow()}},r:function(c,t,e){throw new ExceptionInfo(c).init(t,e),Ql=c,jl++,c},ma:function(){return jl},wa:function(c){Kc(c,!Zl,1,!tl),Cl.threadInit()},S:function(c){el?postMessage({cmd:"cleanupThread",thread:c}):cleanupThread(c)},ra:___pthread_create_js,f:function(c){throw Ql||(Ql=c),c},Fa:___syscall_fstat64,ea:___syscall_ftruncate64,Ca:___syscall_lstat64,Da:___syscall_newfstatat,Ha:___syscall_openat,qa:___syscall_renameat,Ea:___syscall_stat64,oa:___syscall_unlinkat,Ka:function(c){},W:function(c,t){abort(ql)},La:function(c,t){abort(ql)},fa:function(c,t,e,n,r){},Na:function(c,t,e,n,r){var o=getShiftFromSize(e);registerType(c,{name:t=readLatin1String(t),fromWireType:function(c){return!!c},toWireType:function(c,t){return t?n:r},argPackAdvance:8,readValueFromPointer:function(c){var n;if(1===e)n=GROWABLE_HEAP_I8();else if(2===e)n=GROWABLE_HEAP_I16();else{if(4!==e)throw new TypeError("Unknown boolean type size: "+t);n=GROWABLE_HEAP_I32()}return this.fromWireType(n[c>>o])},destructorFunction:null})},Xa:function(c,e,n,r,o,u,M,ll,cl,tl,Zl,dl,el){Zl=readLatin1String(Zl),u=embind__requireFunction(o,u),ll&&(ll=embind__requireFunction(M,ll)),tl&&(tl=embind__requireFunction(cl,tl)),el=embind__requireFunction(dl,el);var nl=makeLegalFunctionName(Zl);!function(c,e,n){t.hasOwnProperty(c)?((void 0===n||void 0!==t[c].overloadTable&&void 0!==t[c].overloadTable[n])&&throwBindingError("Cannot register public name '"+c+"' twice"),ensureOverloadTable(t,c,c),t.hasOwnProperty(n)&&throwBindingError("Cannot register multiple overloads of a function with the same number of arguments ("+n+")!"),t[c].overloadTable[n]=e):(t[c]=e,void 0!==n&&(t[c].numArguments=n))}(nl,(function(){throwUnboundTypeError("Cannot construct "+Zl+" due to unbound types",[r])})),whenDependentTypesAreResolved([c,e,n],r?[r]:[],(function(e){var n,o;e=e[0],o=r?(n=e.registeredClass).instancePrototype:ClassHandle.prototype;var M=createNamedFunction(nl,(function(){if(Object.getPrototypeOf(this)!==cl)throw new nc("Use 'new' to construct "+Zl);if(void 0===dl.constructor_body)throw new nc(Zl+" has no accessible constructor");var c=dl.constructor_body[arguments.length];if(void 0===c)throw new nc("Tried to invoke ctor of "+Zl+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(dl.constructor_body).toString()+") parameters instead!");return c.apply(this,arguments)})),cl=Object.create(o,{constructor:{value:M}});M.prototype=cl;var dl=new RegisteredClass(Zl,M,cl,el,n,u,ll,tl),bl=new RegisteredPointer(Zl,dl,!0,!1,!1),ml=new RegisteredPointer(Zl+"*",dl,!1,!1,!1),al=new RegisteredPointer(Zl+" const*",dl,!1,!0,!1);return ac[c]={pointerType:ml,constPointerType:al},function(c,e,n){t.hasOwnProperty(c)||throwInternalError("Replacing nonexistant public symbol"),void 0!==t[c].overloadTable&&void 0!==n?t[c].overloadTable[n]=e:(t[c]=e,t[c].argCount=n)}(nl,M),[bl,ml,al]}))},Wa:function(c,t,e,n,r,o){assert(t>0);var u=heap32VectorToArray(t,e);r=embind__requireFunction(n,r),whenDependentTypesAreResolved([],[c],(function(c){var e="constructor "+(c=c[0]).name;if(void 0===c.registeredClass.constructor_body&&(c.registeredClass.constructor_body=[]),void 0!==c.registeredClass.constructor_body[t-1])throw new nc("Cannot register multiple constructors with identical number of parameters ("+(t-1)+") for class '"+c.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!");return c.registeredClass.constructor_body[t-1]=()=>{throwUnboundTypeError("Cannot construct "+c.name+" due to unbound types",u)},whenDependentTypesAreResolved([],u,(function(n){return n.splice(1,0,null),c.registeredClass.constructor_body[t-1]=craftInvokerFunction(e,n,null,r,o),[]})),[]}))},y:function(c,t,e,n,r,o,u,M){var ll=heap32VectorToArray(e,n);t=readLatin1String(t),o=embind__requireFunction(r,o),whenDependentTypesAreResolved([],[c],(function(c){var n=(c=c[0]).name+"."+t;function unboundTypesHandler(){throwUnboundTypeError("Cannot call "+n+" due to unbound types",ll)}t.startsWith("@@")&&(t=Symbol[t.substring(2)]),M&&c.registeredClass.pureVirtualFunctions.push(t);var r=c.registeredClass.instancePrototype,cl=r[t];return void 0===cl||void 0===cl.overloadTable&&cl.className!==c.name&&cl.argCount===e-2?(unboundTypesHandler.argCount=e-2,unboundTypesHandler.className=c.name,r[t]=unboundTypesHandler):(ensureOverloadTable(r,t,n),r[t].overloadTable[e-2]=unboundTypesHandler),whenDependentTypesAreResolved([],ll,(function(M){var ll=craftInvokerFunction(n,M,c,o,u);return void 0===r[t].overloadTable?(ll.argCount=e-2,r[t]=ll):r[t].overloadTable[e-2]=ll,[]})),[]}))},Ma:function(c,t){registerType(c,{name:t=readLatin1String(t),fromWireType:function(c){var t=Gc.toValue(c);return __emval_decref(c),t},toWireType:function(c,t){return Gc.toHandle(t)},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:null})},Z:function(c,t,e){var n=getShiftFromSize(e);registerType(c,{name:t=readLatin1String(t),fromWireType:function(c){return c},toWireType:function(c,t){return t},argPackAdvance:8,readValueFromPointer:floatReadValueFromPointer(t,n),destructorFunction:null})},A:function(c,t,e,n,r){t=readLatin1String(t),-1===r&&(r=4294967295);var o=getShiftFromSize(e),fromWireType=c=>c;if(0===n){var u=32-8*e;fromWireType=c=>c<<u>>>u}var M=t.includes("unsigned");registerType(c,{name:t,fromWireType:fromWireType,toWireType:M?function(c,t){return this.name,t>>>0}:function(c,t){return this.name,t},argPackAdvance:8,readValueFromPointer:integerReadValueFromPointer(t,o,0!==n),destructorFunction:null})},t:function(c,t,e){var n=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][t];function decodeMemoryView(c){c>>=2;var t=GROWABLE_HEAP_U32(),e=t[c],r=t[c+1];return new n(ul,r,e)}registerType(c,{name:e=readLatin1String(e),fromWireType:decodeMemoryView,argPackAdvance:8,readValueFromPointer:decodeMemoryView},{ignoreDuplicateRegistrations:!0})},Y:function(c,t){var e="std::string"===(t=readLatin1String(t));registerType(c,{name:t,fromWireType:function(c){var t,n=GROWABLE_HEAP_U32()[c>>2];if(e)for(var r=c+4,o=0;o<=n;++o){var u=c+4+o;if(o==n||0==GROWABLE_HEAP_U8()[u]){var M=UTF8ToString(r,u-r);void 0===t?t=M:(t+=String.fromCharCode(0),t+=M),r=u+1}}else{var ll=new Array(n);for(o=0;o<n;++o)ll[o]=String.fromCharCode(GROWABLE_HEAP_U8()[c+4+o]);t=ll.join("")}return Hc(c),t},toWireType:function(c,t){t instanceof ArrayBuffer&&(t=new Uint8Array(t));var n="string"==typeof t;n||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int8Array||throwBindingError("Cannot pass non-string to std::string");var r,o,u=(e&&n?()=>lengthBytesUTF8(t):()=>t.length)(),M=Nc(4+u+1);if(GROWABLE_HEAP_U32()[M>>2]=u,e&&n)r=M+4,o=u+1,stringToUTF8Array(t,GROWABLE_HEAP_U8(),r,o);else if(n)for(var ll=0;ll<u;++ll){var cl=t.charCodeAt(ll);cl>255&&(Hc(M),throwBindingError("String has UTF-16 code units that do not fit in 8 bits")),GROWABLE_HEAP_U8()[M+4+ll]=cl}else for(ll=0;ll<u;++ll)GROWABLE_HEAP_U8()[M+4+ll]=t[ll];return null!==c&&c.push(Hc,M),M},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:function(c){Hc(c)}})},L:function(c,t,e){var n,r,o,u,M;e=readLatin1String(e),2===t?(n=UTF16ToString,r=stringToUTF16,u=lengthBytesUTF16,o=()=>GROWABLE_HEAP_U16(),M=1):4===t&&(n=UTF32ToString,r=stringToUTF32,u=lengthBytesUTF32,o=()=>GROWABLE_HEAP_U32(),M=2),registerType(c,{name:e,fromWireType:function(c){for(var e,r=GROWABLE_HEAP_U32()[c>>2],u=o(),ll=c+4,cl=0;cl<=r;++cl){var tl=c+4+cl*t;if(cl==r||0==u[tl>>M]){var Zl=n(ll,tl-ll);void 0===e?e=Zl:(e+=String.fromCharCode(0),e+=Zl),ll=tl+t}}return Hc(c),e},toWireType:function(c,n){"string"!=typeof n&&throwBindingError("Cannot pass non-string to C++ string type "+e);var o=u(n),ll=Nc(4+o+t);return GROWABLE_HEAP_U32()[ll>>2]=o>>M,r(n,ll+4,o+t),null!==c&&c.push(Hc,ll),ll},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:function(c){Hc(c)}})},Oa:function(c,t){registerType(c,{isVoid:!0,name:t=readLatin1String(t),argPackAdvance:0,fromWireType:function(){},toWireType:function(c,t){}})},V:function(){return Date.now()},sa:function(){return 2097152},Ja:function(){return true},ta:function(c,t,e,n){if(c==t)setTimeout((()=>executeNotifiedProxyingQueue(n)));else if(el)postMessage({targetThread:c,cmd:"processProxyingQueue",queue:n});else{var r=Cl.pthreads[c],o=r&&r.worker;if(!o)return;o.postMessage({cmd:"processProxyingQueue",queue:n})}return 1},ya:function(c,t,e){return-1},Sa:__emval_decref,ia:function(c){c>4&&(Vc[c].refcount+=1)},I:function(c,t){var e,n,r;n="_emval_take_value",void 0===(r=tc[e=c])&&throwBindingError(n+" has unknown type "+getTypeName(e));var o=(c=r).readValueFromPointer(t);return Gc.toHandle(o)},ua:__mmap_js,va:__munmap_js,d:function(){abort("")},T:function(){Zl||warnOnce("Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread")},pa:_emscripten_get_heap_max,w:uc,Ga:function(c,t,e){GROWABLE_HEAP_U8().copyWithin(c,t,t+e)},_:function(){return navigator.hardwareConcurrency},xa:function(c,t,e){yc.length=t;for(var n=e>>3,r=0;r<t;r++)yc[r]=GROWABLE_HEAP_F64()[n+r];return(c<0?Ll[-c-1]:Fc[c]).apply(null,yc)},na:function(c){var t=GROWABLE_HEAP_U8().length;if((c>>>=0)<=t)return!1;var e=2147483648;if(c>e)return!1;let alignUp=(c,t)=>c+(t-c%t)%t;for(var n=1;n<=4;n*=2){var r=t*(1+.2/n);if(r=Math.min(r,c+100663296),emscripten_realloc_buffer(Math.min(e,alignUp(Math.max(c,r),65536))))return!0}return!1},Ia:function(){throw"unwind"},za:_environ_get,Aa:_environ_sizes_get,$:_exit,X:_fd_close,U:_fd_read,Va:_fd_seek,Ba:_fd_sync,K:_fd_write,c:function(){return il},ga:function _getentropy(c,t){_getentropy.randomDevice||(_getentropy.randomDevice=getRandomDevice());for(var e=0;e<t;e++)GROWABLE_HEAP_I8()[c+e>>0]=_getentropy.randomDevice();return 0},N:function(c,t,e,n){var r=Lc();try{return getWasmTableEntry(c)(t,e,n)}catch(c){if(Cc(r),c!==c+0)throw c;wc(1,0)}},Ra:function(c,t){var e=Lc();try{return getWasmTableEntry(c)(t)}catch(c){if(Cc(e),c!==c+0)throw c;wc(1,0)}},O:function(c,t,e,n){var r=Lc();try{return getWasmTableEntry(c)(t,e,n)}catch(c){if(Cc(r),c!==c+0)throw c;wc(1,0)}},q:function(c){var t=Lc();try{return getWasmTableEntry(c)()}catch(c){if(Cc(t),c!==c+0)throw c;wc(1,0)}},g:function(c,t){var e=Lc();try{return getWasmTableEntry(c)(t)}catch(c){if(Cc(e),c!==c+0)throw c;wc(1,0)}},Pa:function(c,t,e,n,r){var o=Lc();try{return getWasmTableEntry(c)(t,e,n,r)}catch(c){if(Cc(o),c!==c+0)throw c;wc(1,0)}},h:function(c,t,e){var n=Lc();try{return getWasmTableEntry(c)(t,e)}catch(c){if(Cc(n),c!==c+0)throw c;wc(1,0)}},m:function(c,t,e,n){var r=Lc();try{return getWasmTableEntry(c)(t,e,n)}catch(c){if(Cc(r),c!==c+0)throw c;wc(1,0)}},o:function(c,t,e,n,r){var o=Lc();try{return getWasmTableEntry(c)(t,e,n,r)}catch(c){if(Cc(o),c!==c+0)throw c;wc(1,0)}},ja:function(c,t,e,n,r,o){var u=Lc();try{return getWasmTableEntry(c)(t,e,n,r,o)}catch(c){if(Cc(u),c!==c+0)throw c;wc(1,0)}},E:function(c,t,e,n,r,o){var u=Lc();try{return getWasmTableEntry(c)(t,e,n,r,o)}catch(c){if(Cc(u),c!==c+0)throw c;wc(1,0)}},z:function(c,t,e,n,r,o,u){var M=Lc();try{return getWasmTableEntry(c)(t,e,n,r,o,u)}catch(c){if(Cc(M),c!==c+0)throw c;wc(1,0)}},P:function(c,t,e,n,r,o,u,M){var ll=Lc();try{return getWasmTableEntry(c)(t,e,n,r,o,u,M)}catch(c){if(Cc(ll),c!==c+0)throw c;wc(1,0)}},H:function(c,t,e,n,r,o,u,M,ll,cl,tl,Zl){var dl=Lc();try{return getWasmTableEntry(c)(t,e,n,r,o,u,M,ll,cl,tl,Zl)}catch(c){if(Cc(dl),c!==c+0)throw c;wc(1,0)}},Ua:function(c){var t=Lc();try{return Qc(c)}catch(c){if(Cc(t),c!==c+0)throw c;wc(1,0)}},Ta:function(c,t,e,n,r){var o=Lc();try{return Pc(c,t,e,n,r)}catch(c){if(Cc(o),c!==c+0)throw c;wc(1,0)}},l:function(c){var t=Lc();try{getWasmTableEntry(c)()}catch(c){if(Cc(t),c!==c+0)throw c;wc(1,0)}},k:function(c,t){var e=Lc();try{getWasmTableEntry(c)(t)}catch(c){if(Cc(e),c!==c+0)throw c;wc(1,0)}},i:function(c,t,e){var n=Lc();try{getWasmTableEntry(c)(t,e)}catch(c){if(Cc(n),c!==c+0)throw c;wc(1,0)}},C:function(c,t,e,n){var r=Lc();try{getWasmTableEntry(c)(t,e,n)}catch(c){if(Cc(r),c!==c+0)throw c;wc(1,0)}},M:function(c,t,e,n,r){var o=Lc();try{getWasmTableEntry(c)(t,e,n,r)}catch(c){if(Cc(o),c!==c+0)throw c;wc(1,0)}},p:function(c,t,e,n){var r=Lc();try{getWasmTableEntry(c)(t,e,n)}catch(c){if(Cc(r),c!==c+0)throw c;wc(1,0)}},Qa:function(c,t,e,n,r,o,u,M){var ll=Lc();try{getWasmTableEntry(c)(t,e,n,r,o,u,M)}catch(c){if(Cc(ll),c!==c+0)throw c;wc(1,0)}},J:function(c,t,e,n,r){var o=Lc();try{getWasmTableEntry(c)(t,e,n,r)}catch(c){if(Cc(o),c!==c+0)throw c;wc(1,0)}},ca:function(c,t,e,n,r,o,u){var M=Lc();try{getWasmTableEntry(c)(t,e,n,r,o,u)}catch(c){if(Cc(M),c!==c+0)throw c;wc(1,0)}},da:function(c,t,e,n,r,o){var u=Lc();try{getWasmTableEntry(c)(t,e,n,r,o)}catch(c){if(Cc(u),c!==c+0)throw c;wc(1,0)}},v:function(c,t,e,n,r,o,u,M){var ll=Lc();try{getWasmTableEntry(c)(t,e,n,r,o,u,M)}catch(c){if(Cc(ll),c!==c+0)throw c;wc(1,0)}},F:function(c,t,e,n,r,o,u,M,ll,cl){var tl=Lc();try{getWasmTableEntry(c)(t,e,n,r,o,u,M,ll,cl)}catch(c){if(Cc(tl),c!==c+0)throw c;wc(1,0)}},ba:function(c,t,e,n,r,o,u,M,ll){var cl=Lc();try{getWasmTableEntry(c)(t,e,n,r,o,u,M,ll)}catch(c){if(Cc(cl),c!==c+0)throw c;wc(1,0)}},D:function(c,t,e,n,r,o,u,M,ll,cl,tl){var Zl=Lc();try{getWasmTableEntry(c)(t,e,n,r,o,u,M,ll,cl,tl)}catch(c){if(Cc(Zl),c!==c+0)throw c;wc(1,0)}},G:function(c,t,e,n,r,o,u,M,ll,cl,tl,Zl,dl,el,nl,bl){var ml=Lc();try{getWasmTableEntry(c)(t,e,n,r,o,u,M,ll,cl,tl,Zl,dl,el,nl,bl)}catch(c){if(Cc(ml),c!==c+0)throw c;wc(1,0)}},a:rl||t.wasmMemory,B:function(c){setTempRet0(c)},ha:function(c,t,e,n){return _strftime(c,t,e,n)}},Nc=(function(){var c={a:Ic};function receiveInstance(c,e){var n,r,o=c.exports;if(t.asm=o,n=t.asm.cb,Cl.tlsInitFunctions.push(n),Nl=t.asm.Za,r=t.asm.Ya,fl.unshift(r),Xl=e,!el){var u=Cl.unusedWorkers.length;Cl.unusedWorkers.forEach((function(c){Cl.loadWasmModuleToWorker(c,(function(){--u||removeRunDependency()}))}))}}function receiveInstantiationResult(c){receiveInstance(c.instance,c.module)}function instantiateArrayBuffer(t){return(al||!tl&&!Zl||"function"!=typeof fetch?Promise.resolve().then((function(){return getBinary(zl)})):fetch(zl,{credentials:"same-origin"}).then((function(c){if(!c.ok)throw"failed to load wasm binary file at '"+zl+"'";return c.arrayBuffer()})).catch((function(){return getBinary(zl)}))).then((function(t){return WebAssembly.instantiate(t,c)})).then((function(c){return c})).then(t,(function(c){ml("failed to asynchronously prepare wasm: "+c),abort(c)}))}if(el||addRunDependency(),t.instantiateWasm)try{return t.instantiateWasm(c,receiveInstance)}catch(c){return ml("Module.instantiateWasm callback failed with error: "+c),!1}(al||"function"!=typeof WebAssembly.instantiateStreaming||isDataURI(zl)||"function"!=typeof fetch?instantiateArrayBuffer(receiveInstantiationResult):fetch(zl,{credentials:"same-origin"}).then((function(t){return WebAssembly.instantiateStreaming(t,c).then(receiveInstantiationResult,(function(c){return ml("wasm streaming compile failed: "+c),ml("falling back to ArrayBuffer instantiation"),instantiateArrayBuffer(receiveInstantiationResult)}))}))).catch(n)}(),t.___wasm_call_ctors=function(){return(t.___wasm_call_ctors=t.asm.Ya).apply(null,arguments)},t._malloc=function(){return(Nc=t._malloc=t.asm._a).apply(null,arguments)}),Hc=t._free=function(){return(Hc=t._free=t.asm.$a).apply(null,arguments)},vc=t.___errno_location=function(){return(vc=t.___errno_location=t.asm.ab).apply(null,arguments)},fc=t._pthread_self=function(){return(fc=t._pthread_self=t.asm.bb).apply(null,arguments)},kc=(t._emscripten_tls_init=function(){return(t._emscripten_tls_init=t.asm.cb).apply(null,arguments)},t._emscripten_builtin_memalign=function(){return(kc=t._emscripten_builtin_memalign=t.asm.db).apply(null,arguments)}),Uc=t.___getTypeName=function(){return(Uc=t.___getTypeName=t.asm.eb).apply(null,arguments)},gc=(t.___embind_register_native_and_builtin_types=function(){return(t.___embind_register_native_and_builtin_types=t.asm.fb).apply(null,arguments)},t.___stdio_exit=function(){return(gc=t.___stdio_exit=t.asm.gb).apply(null,arguments)}),Tc=t.___funcs_on_exit=function(){return(Tc=t.___funcs_on_exit=t.asm.hb).apply(null,arguments)},Kc=t.__emscripten_thread_init=function(){return(Kc=t.__emscripten_thread_init=t.asm.ib).apply(null,arguments)},Bc=(t.__emscripten_thread_crashed=function(){return(t.__emscripten_thread_crashed=t.asm.jb).apply(null,arguments)},t._emscripten_run_in_main_runtime_thread_js=function(){return(Bc=t._emscripten_run_in_main_runtime_thread_js=t.asm.kb).apply(null,arguments)}),zc=t.__emscripten_proxy_execute_task_queue=function(){return(zc=t.__emscripten_proxy_execute_task_queue=t.asm.lb).apply(null,arguments)},Sc=t.__emscripten_thread_free_data=function(){return(Sc=t.__emscripten_thread_free_data=t.asm.mb).apply(null,arguments)},wc=(t.__emscripten_thread_exit=function(){return(t.__emscripten_thread_exit=t.asm.nb).apply(null,arguments)},t._setThrew=function(){return(wc=t._setThrew=t.asm.ob).apply(null,arguments)}),xc=t._emscripten_stack_set_limits=function(){return(xc=t._emscripten_stack_set_limits=t.asm.pb).apply(null,arguments)},Lc=t.stackSave=function(){return(Lc=t.stackSave=t.asm.qb).apply(null,arguments)},Cc=t.stackRestore=function(){return(Cc=t.stackRestore=t.asm.rb).apply(null,arguments)},Ec=t.stackAlloc=function(){return(Ec=t.stackAlloc=t.asm.sb).apply(null,arguments)},Mc=t.___cxa_can_catch=function(){return(Mc=t.___cxa_can_catch=t.asm.tb).apply(null,arguments)},jc=t.___cxa_is_pointer_type=function(){return(jc=t.___cxa_is_pointer_type=t.asm.ub).apply(null,arguments)},Qc=(t.dynCall_iiiij=function(){return(t.dynCall_iiiij=t.asm.vb).apply(null,arguments)},t.dynCall_jii=function(){return(t.dynCall_jii=t.asm.wb).apply(null,arguments)},t.dynCall_jjj=function(){return(t.dynCall_jjj=t.asm.xb).apply(null,arguments)},t.dynCall_jji=function(){return(t.dynCall_jji=t.asm.yb).apply(null,arguments)},t.dynCall_jiii=function(){return(t.dynCall_jiii=t.asm.zb).apply(null,arguments)},t.dynCall_iiiijj=function(){return(t.dynCall_iiiijj=t.asm.Ab).apply(null,arguments)},t.dynCall_viijj=function(){return(t.dynCall_viijj=t.asm.Bb).apply(null,arguments)},t.dynCall_viiijjjj=function(){return(t.dynCall_viiijjjj=t.asm.Cb).apply(null,arguments)},t.dynCall_iijjiiii=function(){return(t.dynCall_iijjiiii=t.asm.Db).apply(null,arguments)},t.dynCall_jiji=function(){return(t.dynCall_jiji=t.asm.Eb).apply(null,arguments)},t.dynCall_j=function(){return(Qc=t.dynCall_j=t.asm.Fb).apply(null,arguments)}),Pc=(t.dynCall_viijii=function(){return(t.dynCall_viijii=t.asm.Gb).apply(null,arguments)},t.dynCall_jiiii=function(){return(Pc=t.dynCall_jiiii=t.asm.Hb).apply(null,arguments)}),Oc=(t.dynCall_iiiiij=function(){return(t.dynCall_iiiiij=t.asm.Ib).apply(null,arguments)},t.dynCall_iiiiijj=function(){return(t.dynCall_iiiiijj=t.asm.Jb).apply(null,arguments)},t.dynCall_iiiiiijj=function(){return(t.dynCall_iiiiiijj=t.asm.Kb).apply(null,arguments)},t.__emscripten_allow_main_runtime_queued_calls=240356);function ExitStatus(c){this.name="ExitStatus",this.message="Program terminated with exit("+c+")",this.status=c}function run(c){if(c=c||ll,!(Tl>0)){if(el)return e(t),initRuntime(),void postMessage({cmd:"loaded"});!function(){if(t.preRun)for("function"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)c=t.preRun.shift(),vl.unshift(c);var c;callRuntimeCallbacks(vl)}(),Tl>0||(t.setStatus?(t.setStatus("Running..."),setTimeout((function(){setTimeout((function(){t.setStatus("")}),1),doRun()}),1)):doRun())}function doRun(){Jc||(Jc=!0,t.calledRun=!0,Vl||(initRuntime(),e(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),function(){if(!el){if(t.postRun)for("function"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;)c=t.postRun.shift(),Ul.unshift(c);var c;callRuntimeCallbacks(Ul)}}()))}}if(t.keepRuntimeAlive=keepRuntimeAlive,t.wasmMemory=rl,t.ExitStatus=ExitStatus,t.PThread=Cl,Bl=function runCaller(){Jc||run(),Jc||(Bl=runCaller)},t.run=run,t.preInit)for("function"==typeof t.preInit&&(t.preInit=[t.preInit]);t.preInit.length>0;)t.preInit.pop()();return run(),t.ready}})();createWasmMultiInstance=Module;var V=Object.defineProperty,Y=(c,t,e)=>t in c?V(c,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):c[t]=e,a=(c,t,e)=>(Y(c,"symbol"!=typeof t?t+"":t,e),e);class l{}a(l,"updates",{transformer_new:"New transformer",transformer_null:"Null transformer"}),a(l,"errors",{transformer_none:"No transformers provided",transformer_start:"Cannot start transformer",transformer_transform:"Cannot transform frame",transformer_flush:"Cannot flush transformer",readable_null:"Readable is null",writable_null:"Writable is null"});const h=new WeakMap,E=new WeakMap,y=new WeakMap,O=Symbol("anyProducer"),U=Promise.resolve(),k=Symbol("listenerAdded"),A=Symbol("listenerRemoved");let x=!1;function g(c){if("string"!=typeof c&&"symbol"!=typeof c)throw new TypeError("eventName must be a string or a symbol")}function T(c){if("function"!=typeof c)throw new TypeError("listener must be a function")}function _(c,t){const e=E.get(c);return e.has(t)||e.set(t,new Set),e.get(t)}function b(c,t){const e="string"==typeof t||"symbol"==typeof t?t:O,n=y.get(c);return n.has(e)||n.set(e,new Set),n.get(e)}function q(c,t,e){const n=y.get(c);if(n.has(t))for(const c of n.get(t))c.enqueue(e);if(n.has(O)){const c=Promise.all([t,e]);for(const t of n.get(O))t.enqueue(c)}}function $(c,t){t=Array.isArray(t)?t:[t];let e=!1,s=()=>{},n=[];const r={enqueue(c){n.push(c),s()},finish(){e=!0,s()}};for(const e of t)b(c,e).add(r);return{async next(){return n?0===n.length?e?(n=void 0,this.next()):(await new Promise((c=>{s=c})),this.next()):{done:!1,value:await n.shift()}:{done:!0}},async return(e){n=void 0;for(const e of t)b(c,e).delete(r);return s(),arguments.length>0?{done:!0,value:await e}:{done:!0}},[Symbol.asyncIterator](){return this}}}function H(c){if(void 0===c)return Q;if(!Array.isArray(c))throw new TypeError("`methodNames` must be an array of strings");for(const t of c)if(!Q.includes(t))throw"string"!=typeof t?new TypeError("`methodNames` element must be a string"):new Error(`${t} is not Emittery method`);return c}const I=c=>c===k||c===A;class m{static mixin(c,t){return t=H(t),e=>{if("function"!=typeof e)throw new TypeError("`target` must be function");for(const c of t)if(void 0!==e.prototype[c])throw new Error(`The property \`${c}\` already exists on \`target\``);Object.defineProperty(e.prototype,c,{enumerable:!1,get:function(){return Object.defineProperty(this,c,{enumerable:!1,value:new m}),this[c]}});const i=t=>function(...e){return this[c][t](...e)};for(const c of t)Object.defineProperty(e.prototype,c,{enumerable:!1,value:i(c)});return e}}static get isDebugEnabled(){if("object"!=typeof process)return x;const{env:c}=process||{env:{}};return"emittery"===c.DEBUG||"*"===c.DEBUG||x}static set isDebugEnabled(c){x=c}constructor(c={}){h.set(this,new Set),E.set(this,new Map),y.set(this,new Map),this.debug=c.debug||{},void 0===this.debug.enabled&&(this.debug.enabled=!1),this.debug.logger||(this.debug.logger=(c,t,e,n)=>{try{n=JSON.stringify(n)}catch{n=`Object with the following keys failed to stringify: ${Object.keys(n).join(",")}`}"symbol"==typeof e&&(e=e.toString());const r=new Date,o=`${r.getHours()}:${r.getMinutes()}:${r.getSeconds()}.${r.getMilliseconds()}`;console.log(`[${o}][emittery:${c}][${t}] Event Name: ${e}\n\tdata: ${n}`)})}logIfDebugEnabled(c,t,e){(m.isDebugEnabled||this.debug.enabled)&&this.debug.logger(c,this.debug.name,t,e)}on(c,t){T(t),c=Array.isArray(c)?c:[c];for(const e of c)g(e),_(this,e).add(t),this.logIfDebugEnabled("subscribe",e,void 0),I(e)||this.emit(k,{eventName:e,listener:t});return this.off.bind(this,c,t)}off(c,t){T(t),c=Array.isArray(c)?c:[c];for(const e of c)g(e),_(this,e).delete(t),this.logIfDebugEnabled("unsubscribe",e,void 0),I(e)||this.emit(A,{eventName:e,listener:t})}once(c){return new Promise((t=>{const e=this.on(c,(c=>{e(),t(c)}))}))}events(c){c=Array.isArray(c)?c:[c];for(const t of c)g(t);return $(this,c)}async emit(c,t){g(c),this.logIfDebugEnabled("emit",c,t),q(this,c,t);const e=_(this,c),n=h.get(this),r=[...e],o=I(c)?[]:[...n];await U,await Promise.all([...r.map((async c=>{if(e.has(c))return c(t)})),...o.map((async e=>{if(n.has(e))return e(c,t)}))])}async emitSerial(c,t){g(c),this.logIfDebugEnabled("emitSerial",c,t);const e=_(this,c),n=h.get(this),r=[...e],o=[...n];await U;for(const c of r)e.has(c)&&await c(t);for(const e of o)n.has(e)&&await e(c,t)}onAny(c){return T(c),this.logIfDebugEnabled("subscribeAny",void 0,void 0),h.get(this).add(c),this.emit(k,{listener:c}),this.offAny.bind(this,c)}anyEvent(){return $(this)}offAny(c){T(c),this.logIfDebugEnabled("unsubscribeAny",void 0,void 0),this.emit(A,{listener:c}),h.get(this).delete(c)}clearListeners(c){c=Array.isArray(c)?c:[c];for(const t of c)if(this.logIfDebugEnabled("clear",t,void 0),"string"==typeof t||"symbol"==typeof t){_(this,t).clear();const c=b(this,t);for(const t of c)t.finish();c.clear()}else{h.get(this).clear();for(const c of E.get(this).values())c.clear();for(const c of y.get(this).values()){for(const t of c)t.finish();c.clear()}}}listenerCount(c){c=Array.isArray(c)?c:[c];let t=0;for(const e of c)if("string"!=typeof e){typeof e<"u"&&g(e),t+=h.get(this).size;for(const c of E.get(this).values())t+=c.size;for(const c of y.get(this).values())t+=c.size}else t+=h.get(this).size+_(this,e).size+b(this,e).size+b(this).size;return t}bindMethods(c,t){if("object"!=typeof c||null===c)throw new TypeError("`target` must be an object");t=H(t);for(const e of t){if(void 0!==c[e])throw new Error(`The property \`${e}\` already exists on \`target\``);Object.defineProperty(c,e,{enumerable:!1,value:this[e].bind(this)})}}}const Q=Object.getOwnPropertyNames(m.prototype).filter((c=>"constructor"!==c));Object.defineProperty(m,"listenerAdded",{value:k,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(m,"listenerRemoved",{value:A,writable:!1,enumerable:!0,configurable:!1});var L=m;function J(c){return"object"==typeof c&&null!==c&&"message"in c&&"string"==typeof c.message}function X(c){if(J(c))return c;try{return new Error(JSON.stringify(c))}catch{return new Error(String(c))}}function v(c){return X(c).message}var Z=Object.defineProperty,K=(c,t,e)=>t in c?Z(c,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):c[t]=e,N=(c,t,e)=>(K(c,"symbol"!=typeof t?t+"":t,e),e);const re="hlg.tokbox.com/prod/logging/vcp_webrtc",te="https://",se=1e4;let S;const oe=new Uint8Array(16);function ie(){if(!S&&(S=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!S))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return S(oe)}const f=[];for(let c=0;c<256;++c)f.push((c+256).toString(16).slice(1));function ne(c,t=0){return(f[c[t+0]]+f[c[t+1]]+f[c[t+2]]+f[c[t+3]]+"-"+f[c[t+4]]+f[c[t+5]]+"-"+f[c[t+6]]+f[c[t+7]]+"-"+f[c[t+8]]+f[c[t+9]]+"-"+f[c[t+10]]+f[c[t+11]]+f[c[t+12]]+f[c[t+13]]+f[c[t+14]]+f[c[t+15]]).toLowerCase()}const ae=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),z={randomUUID:ae};function ce(c,t,e){if(z.randomUUID&&!t&&!c)return z.randomUUID();const n=(c=c||{}).random||(c.rng||ie)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,t){e=e||0;for(let c=0;c<16;++c)t[e+c]=n[c];return t}return ne(n)}function W(c,t){globalThis.vonage||(globalThis.vonage={}),globalThis.vonage.workerizer||(globalThis.vonage.workerizer={});let e=globalThis.vonage.workerizer;return e[c]||(e[c]=t),e[c]}const p=W("globals",{});var d=(c=>(c.INIT="INIT",c.FORWARD="FORWARD",c.TERMINATE="TERMINATE",c.GLOBALS_SYNC="GLOBALS_SYNC",c))(d||{});function j(c){return[ImageBitmap,ReadableStream,WritableStream].some((t=>c instanceof t))}let fe=0;function le(c,t,e,n,r){const o=fe++;return c.postMessage({id:o,type:t,functionName:e,args:n},n.filter((c=>j(c)))),new Promise((c=>{null==r||r.set(o,c)}))}function w(c,t){const{id:e,type:n}=c,r=Array.isArray(t)?t:[t];postMessage({id:e,type:n,result:t},r.filter((c=>j(c))))}const G=W("workerized",{});function B(){return typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope}async function ue(){if(B())w({type:d.GLOBALS_SYNC},p);else{const c=[];for(const t in G){const{worker:e,resolvers:n}=G[t].workerContext;e&&c.push(le(e,d.GLOBALS_SYNC,"",[p],n))}await Promise.all(c)}}function P(c,t){if(Array.isArray(t))t.splice(0,t.length);else if("object"==typeof t)for(const c in t)delete t[c];for(const e in c)Array.isArray(c[e])?(t[e]=[],P(c[e],t[e])):"object"==typeof c[e]?(t[e]={},P(c[e],t[e])):t[e]=c[e]}async function he(c,t){const{functionName:e,args:n}=c;if(!t.instance)throw"instance not initialized";if(!e)throw"missing function name to call";if(!t.instance[e])throw`undefined function [${e}] in class ${t.instance.constructor.workerId}`;w(c,await t.instance[e](...null!=n?n:[]))}const pe=W("registeredWorkers",{});function de(c,t){if(!c.args)throw"Missing className while initializing worker";const[e,n]=c.args,r=pe[e];if(!r)throw`unknown worker class ${e}`;t.instance=new r(c.args.slice(1)),P(n,p),w(c,void 0!==typeof t.instance)}async function me(c,t){const{args:e}=c;if(!t.instance)throw"instance not initialized";let n;t.instance.terminate&&(n=await t.instance.terminate(...null!=e?e:[])),w(c,n)}function ge(c){if(!c.args)throw"Missing globals while syncing";P(c.args[0],p),w(c,{})}function _e(){const c={};onmessage=async t=>{const e=t.data;switch(e.type){case d.INIT:de(e,c);break;case d.FORWARD:he(e,c);break;case d.TERMINATE:me(e,c);break;case d.GLOBALS_SYNC:ge(e)}}}function ye(c,t){return p[c]||(p[c]=t),[()=>p[c],async t=>{p[c]=t,await ue()}]}function be(c,t){return ye(c,t)}B()&&_e();const[we,Te]=be("metadata");function C(){return we()}class D{constructor(c){N(this,"uuid",ce()),this.config=c}async send(c){var t,e,n;const{appId:r,sourceType:o}=null!=(t=C())?t:{};if(!r||!o)return"metadata missing";const u=new AbortController,M=setTimeout((()=>u.abort()),se);return await(null!=(n=null==(e=this.config)?void 0:e.fetch)?n:fetch)(this.getUrl(),{method:"POST",headers:this.getHeaders(),body:JSON.stringify(this.buildReport(c)),signal:u.signal}),clearTimeout(M),"success"}getUrl(){var c;let t=null!=(c=C().proxyUrl)?c:te;return t+=("/"===t.at(-1)?"":"/")+re,t}getHeaders(){return{"Content-Type":"application/json"}}buildReport(c){const t=C();return{guid:this.uuid,...c,applicationId:t.appId,timestamp:Date.now(),proxyUrl:t.proxyUrl,source:t.sourceType}}}const R="2.0.3";class Se{constructor(c){a(this,"frameTransformedCount",0),a(this,"frameFromSourceCount",0),a(this,"startAt",0),a(this,"reporter"),this.config=c,this.reporter=new D(c)}async onFrameFromSource(){this.frameFromSourceCount++}get fps(){const{startAt:c,frameFromSourceCount:t}=this;return t/((Date.now()-c)/1e3)}async onFrameTransformed(c={},t=!1){0===this.startAt&&(this.startAt=Date.now()),this.frameTransformedCount++;const{startAt:e,frameTransformedCount:n,frameFromSourceCount:r}=this,o=Date.now(),u=(o-e)/1e3,M=n/u,ll=r/u;return t||this.frameTransformedCount>=this.config.loggingIntervalFrameCount?(this.frameFromSourceCount=0,this.frameTransformedCount=0,this.startAt=o,this.reporter.config=this.config,this.reporter.send({...this.config.report,variation:"QoS",fps:ll,transformedFps:M,framesTransformed:n,...c})):"success"}}var F=(c=>(c.pipeline_ended="pipeline_ended",c.pipeline_ended_with_error="pipeline_ended_with_error",c.pipeline_started="pipeline_started",c.pipeline_started_with_error="pipeline_started_with_error",c.pipeline_restarted="pipeline_restarted",c.pipeline_restarted_with_error="pipeline_restarted_with_error",c))(F||{});const ke=500,Ae=.8;class Pe extends L{constructor(c,t){super(),a(this,"reporter_",new D),a(this,"reporterQos_",new Se({loggingIntervalFrameCount:ke,report:{version:R}})),a(this,"transformerType_"),a(this,"transformer_"),a(this,"shouldStop_"),a(this,"isFlashed_"),a(this,"mediaTransformerQosReportStartTimestamp_"),a(this,"videoHeight_"),a(this,"videoWidth_"),a(this,"trackExpectedRate_"),a(this,"index_"),a(this,"controller_"),this.index_=t,this.transformer_=c,this.shouldStop_=!1,this.isFlashed_=!1,this.mediaTransformerQosReportStartTimestamp_=0,this.videoHeight_=0,this.videoWidth_=0,this.trackExpectedRate_=-1,this.transformerType_="Custom","getTransformerType"in c&&(this.transformerType_=c.getTransformerType()),this.report({variation:"Create"})}setTrackExpectedRate(c){this.trackExpectedRate_=c}async start(c){if(this.controller_=c,this.transformer_&&"function"==typeof this.transformer_.start)try{await this.transformer_.start(c)}catch(c){this.report({message:l.errors.transformer_start,variation:"Error",error:v(c)});const t={eventMetaData:{transformerIndex:this.index_},error:c,function:"start"};this.emit("error",t)}}async transform(c,t){var e,n,r,o;if(0===this.mediaTransformerQosReportStartTimestamp_&&(this.mediaTransformerQosReportStartTimestamp_=Date.now()),c instanceof VideoFrame&&(this.videoHeight_=null!=(e=null==c?void 0:c.displayHeight)?e:0,this.videoWidth_=null!=(n=null==c?void 0:c.displayWidth)?n:0),this.reporterQos_.onFrameFromSource(),this.transformer_)if(this.shouldStop_)console.warn("[Pipeline] flush from transform"),c.close(),this.flush(t),t.terminate();else{try{await(null==(o=(r=this.transformer_).transform)?void 0:o.call(r,c,t)),this.reportQos()}catch(c){this.report({message:l.errors.transformer_transform,variation:"Error",error:v(c)});const t={eventMetaData:{transformerIndex:this.index_},error:c,function:"transform"};this.emit("error",t)}if(-1!=this.trackExpectedRate_&&this.trackExpectedRate_*Ae>this.reporterQos_.fps){const c={eventMetaData:{transformerIndex:this.index_},warningType:"fps_drop",dropInfo:{requested:this.trackExpectedRate_,current:this.reporterQos_.fps}};this.emit("warn",c)}}}async flush(c){if(this.transformer_&&"function"==typeof this.transformer_.flush&&!this.isFlashed_){this.isFlashed_=!0;try{await this.transformer_.flush(c)}catch(c){this.report({message:l.errors.transformer_flush,variation:"Error",error:v(c)});const t={eventMetaData:{transformerIndex:this.index_},error:c,function:"flush"};this.emit("error",t)}}this.reportQos(!0),this.report({variation:"Delete"})}stop(){console.log("[Pipeline] Stop stream."),this.controller_&&(this.flush(this.controller_),this.controller_.terminate()),this.shouldStop_=!0}report(c){this.reporter_.send({version:R,action:"MediaTransformer",transformerType:this.transformerType_,...c})}reportQos(c=!1){this.reporterQos_.config={...this.reporterQos_.config},this.reporterQos_.onFrameTransformed({version:R,action:"MediaTransformer",transformerType:this.transformerType_,videoWidth:this.videoWidth_,videoHeight:this.videoHeight_},c)}}class Me extends L{constructor(c){super(),a(this,"transformers_"),a(this,"trackExpectedRate_"),this.transformers_=[],this.trackExpectedRate_=-1;for(let t=0;t<c.length;t++){let e=new Pe(c[t],t);e.on("error",(c=>{this.emit("error",c)})),e.on("warn",(c=>{this.emit("warn",c)})),this.transformers_.push(e)}}setTrackExpectedRate(c){this.trackExpectedRate_=c;for(let c of this.transformers_)c.setTrackExpectedRate(this.trackExpectedRate_)}async start(c,t){if(this.transformers_&&0!==this.transformers_.length){try{let e=c;for(let t of this.transformers_)c=c.pipeThrough(new TransformStream(t));c.pipeTo(t).then((async()=>{console.log("[Pipeline] Setup."),await t.abort(),await e.cancel(),this.emit("pipelineInfo","pipeline_ended")})).catch((async n=>{c.cancel().then((()=>{console.log("[Pipeline] Shutting down streams after abort.")})).catch((c=>{console.error("[Pipeline] Error from stream transform:",c)})),await t.abort(n),await e.cancel(n),this.emit("pipelineInfo","pipeline_ended_with_error")}))}catch{return this.emit("pipelineInfo","pipeline_started_with_error"),void this.destroy()}this.emit("pipelineInfo","pipeline_started"),console.log("[Pipeline] Pipeline started.")}else console.log("[Pipeline] No transformers.")}async destroy(){console.log("[Pipeline] Destroying Pipeline.");for(let c of this.transformers_)c.stop()}}class Oe extends L{constructor(){super(),a(this,"reporter_"),a(this,"pipeline_"),a(this,"transformers_"),a(this,"readable_"),a(this,"writable_"),a(this,"trackExpectedRate_"),this.reporter_=new D,this.trackExpectedRate_=-1,this.report({variation:"Create"})}setTrackExpectedRate(c){this.trackExpectedRate_=c,this.pipeline_&&this.pipeline_.setTrackExpectedRate(this.trackExpectedRate_)}transform(c,t){return this.readable_=c,this.writable_=t,this.transformInternal()}transformInternal(){return new Promise((async(c,t)=>{if(!this.transformers_||0===this.transformers_.length)return this.report({message:l.errors.transformer_none,variation:"Error"}),void t("[MediaProcessor] Need to set transformers.");if(!this.readable_)return this.report({variation:"Error",message:l.errors.readable_null}),void t("[MediaProcessor] Readable is null.");if(!this.writable_)return this.report({variation:"Error",message:l.errors.writable_null}),void t("[MediaProcessor] Writable is null.");let e=!1;this.pipeline_&&(e=!0,this.pipeline_.clearListeners(),this.pipeline_.destroy()),this.pipeline_=new Me(this.transformers_),this.pipeline_.on("warn",(c=>{this.emit("warn",c)})),this.pipeline_.on("error",(c=>{this.emit("error",c)})),this.pipeline_.on("pipelineInfo",(c=>{e&&("pipeline_started"===c?c=F.pipeline_restarted:"pipeline_started_with_error"===c&&(c=F.pipeline_restarted_with_error)),this.emit("pipelineInfo",c)})),-1!=this.trackExpectedRate_&&this.pipeline_.setTrackExpectedRate(this.trackExpectedRate_),this.pipeline_.start(this.readable_,this.writable_).then((()=>{c()})).catch((c=>{t(c)}))}))}setTransformers(c){return this.report({variation:"Update",message:l.updates.transformer_new}),this.transformers_=c,this.readable_&&this.writable_?this.transformInternal():Promise.resolve()}destroy(){return new Promise((async c=>{this.pipeline_&&this.pipeline_.destroy(),this.report({variation:"Delete"}),c()}))}report(c){this.reporter_.send({version:R,action:"MediaProcessor",...c})}}class xe{constructor(){a(this,"processor_"),a(this,"generator_"),this.processor_=null,this.generator_=null}init(c){return new Promise(((t,e)=>{try{this.processor_=new MediaStreamTrackProcessor(c)}catch(c){console.log(`[InsertableStreamHelper] MediaStreamTrackProcessor failed: ${c}`),e(c)}try{"audio"===c.kind?this.generator_=new MediaStreamTrackGenerator({kind:"audio"}):"video"===c.kind?this.generator_=new MediaStreamTrackGenerator({kind:"video"}):e("kind not supported")}catch(c){console.log(`[InsertableStreamHelper] MediaStreamTrackGenerator failed: ${c}`),e(c)}t()}))}getReadable(){return this.processor_.readable}getWriteable(){return this.generator_.writable}getProccesorTrack(){return this.generator_}}class Fe{constructor(c){a(this,"insertableStreamHelper_"),a(this,"mediaProcessor_"),this.insertableStreamHelper_=new xe,this.mediaProcessor_=c}setTrack(c){return new Promise(((t,e)=>{this.insertableStreamHelper_.init(c).then((()=>{this.mediaProcessor_.transform(this.insertableStreamHelper_.getReadable(),this.insertableStreamHelper_.getWriteable()).then((()=>{t(this.insertableStreamHelper_.getProccesorTrack())})).catch((c=>{e(c)}))})).catch((c=>{e(c)}))}))}destroy(){return new Promise(((c,t)=>{this.mediaProcessor_?this.mediaProcessor_.destroy().then((()=>{c()})).catch((c=>{t(c)})):t("no processor")}))}}const anyMap$1=new WeakMap,eventsMap$1=new WeakMap,producersMap$1=new WeakMap,anyProducer$1=Symbol("anyProducer"),resolvedPromise$1=Promise.resolve(),listenerAdded$1=Symbol("listenerAdded"),listenerRemoved$1=Symbol("listenerRemoved");let canEmitMetaEvents$1=!1,isGlobalDebugEnabled$1=!1;function assertEventName$1(c){if("string"!=typeof c&&"symbol"!=typeof c&&"number"!=typeof c)throw new TypeError("`eventName` must be a string, symbol, or number")}function assertListener$1(c){if("function"!=typeof c)throw new TypeError("listener must be a function")}function getListeners$1(c,t){const e=eventsMap$1.get(c);if(e.has(t))return e.get(t)}function getEventProducers$1(c,t){const e="string"==typeof t||"symbol"==typeof t||"number"==typeof t?t:anyProducer$1,n=producersMap$1.get(c);if(n.has(e))return n.get(e)}function enqueueProducers$1(c,t,e){const n=producersMap$1.get(c);if(n.has(t))for(const c of n.get(t))c.enqueue(e);if(n.has(anyProducer$1)){const c=Promise.all([t,e]);for(const t of n.get(anyProducer$1))t.enqueue(c)}}function iterator$1(c,t){t=Array.isArray(t)?t:[t];let e=!1,flush=()=>{},n=[];const r={enqueue(c){n.push(c),flush()},finish(){e=!0,flush()}};for(const e of t){let t=getEventProducers$1(c,e);if(!t){t=new Set;producersMap$1.get(c).set(e,t)}t.add(r)}return{async next(){return n?0===n.length?e?(n=void 0,this.next()):(await new Promise((c=>{flush=c})),this.next()):{done:!1,value:await n.shift()}:{done:!0}},async return(e){n=void 0;for(const e of t){const t=getEventProducers$1(c,e);if(t&&(t.delete(r),0===t.size)){producersMap$1.get(c).delete(e)}}return flush(),arguments.length>0?{done:!0,value:await e}:{done:!0}},[Symbol.asyncIterator](){return this}}}function defaultMethodNamesOrAssert$1(c){if(void 0===c)return allEmitteryMethods$1;if(!Array.isArray(c))throw new TypeError("`methodNames` must be an array of strings");for(const t of c)if(!allEmitteryMethods$1.includes(t)){if("string"!=typeof t)throw new TypeError("`methodNames` element must be a string");throw new Error(`${t} is not Emittery method`)}return c}const isMetaEvent$1=c=>c===listenerAdded$1||c===listenerRemoved$1;function emitMetaEvent$1(c,t,e){if(isMetaEvent$1(t))try{canEmitMetaEvents$1=!0,c.emit(t,e)}finally{canEmitMetaEvents$1=!1}}let Emittery$1=class c{static mixin(t,e){return e=defaultMethodNamesOrAssert$1(e),n=>{if("function"!=typeof n)throw new TypeError("`target` must be function");for(const c of e)if(void 0!==n.prototype[c])throw new Error(`The property \`${c}\` already exists on \`target\``);Object.defineProperty(n.prototype,t,{enumerable:!1,get:function(){return Object.defineProperty(this,t,{enumerable:!1,value:new c}),this[t]}});const emitteryMethodCaller=c=>function(...e){return this[t][c](...e)};for(const c of e)Object.defineProperty(n.prototype,c,{enumerable:!1,value:emitteryMethodCaller(c)});return n}}static get isDebugEnabled(){if("object"!=typeof globalThis.process?.env)return isGlobalDebugEnabled$1;const{env:c}=globalThis.process??{env:{}};return"emittery"===c.DEBUG||"*"===c.DEBUG||isGlobalDebugEnabled$1}static set isDebugEnabled(c){isGlobalDebugEnabled$1=c}constructor(c={}){anyMap$1.set(this,new Set),eventsMap$1.set(this,new Map),producersMap$1.set(this,new Map),producersMap$1.get(this).set(anyProducer$1,new Set),this.debug=c.debug??{},void 0===this.debug.enabled&&(this.debug.enabled=!1),this.debug.logger||(this.debug.logger=(c,t,e,n)=>{try{n=JSON.stringify(n)}catch{n=`Object with the following keys failed to stringify: ${Object.keys(n).join(",")}`}"symbol"!=typeof e&&"number"!=typeof e||(e=e.toString());const r=new Date,o=`${r.getHours()}:${r.getMinutes()}:${r.getSeconds()}.${r.getMilliseconds()}`;console.log(`[${o}][emittery:${c}][${t}] Event Name: ${e}\n\tdata: ${n}`)})}logIfDebugEnabled(t,e,n){(c.isDebugEnabled||this.debug.enabled)&&this.debug.logger(t,this.debug.name,e,n)}on(c,t){assertListener$1(t),c=Array.isArray(c)?c:[c];for(const e of c){assertEventName$1(e);let c=getListeners$1(this,e);if(!c){c=new Set;eventsMap$1.get(this).set(e,c)}c.add(t),this.logIfDebugEnabled("subscribe",e,void 0),isMetaEvent$1(e)||emitMetaEvent$1(this,listenerAdded$1,{eventName:e,listener:t})}return this.off.bind(this,c,t)}off(c,t){assertListener$1(t),c=Array.isArray(c)?c:[c];for(const e of c){assertEventName$1(e);const c=getListeners$1(this,e);if(c&&(c.delete(t),0===c.size)){eventsMap$1.get(this).delete(e)}this.logIfDebugEnabled("unsubscribe",e,void 0),isMetaEvent$1(e)||emitMetaEvent$1(this,listenerRemoved$1,{eventName:e,listener:t})}}once(c){let t;const e=new Promise((e=>{t=this.on(c,(c=>{t(),e(c)}))}));return e.off=t,e}events(c){c=Array.isArray(c)?c:[c];for(const t of c)assertEventName$1(t);return iterator$1(this,c)}async emit(c,t){if(assertEventName$1(c),isMetaEvent$1(c)&&!canEmitMetaEvents$1)throw new TypeError("`eventName` cannot be meta event `listenerAdded` or `listenerRemoved`");this.logIfDebugEnabled("emit",c,t),enqueueProducers$1(this,c,t);const e=getListeners$1(this,c)??new Set,n=anyMap$1.get(this),r=[...e],o=isMetaEvent$1(c)?[]:[...n];await resolvedPromise$1,await Promise.all([...r.map((async c=>{if(e.has(c))return c(t)})),...o.map((async e=>{if(n.has(e))return e(c,t)}))])}async emitSerial(c,t){if(assertEventName$1(c),isMetaEvent$1(c)&&!canEmitMetaEvents$1)throw new TypeError("`eventName` cannot be meta event `listenerAdded` or `listenerRemoved`");this.logIfDebugEnabled("emitSerial",c,t);const e=getListeners$1(this,c)??new Set,n=anyMap$1.get(this),r=[...e],o=[...n];await resolvedPromise$1;for(const c of r)e.has(c)&&await c(t);for(const e of o)n.has(e)&&await e(c,t)}onAny(c){return assertListener$1(c),this.logIfDebugEnabled("subscribeAny",void 0,void 0),anyMap$1.get(this).add(c),emitMetaEvent$1(this,listenerAdded$1,{listener:c}),this.offAny.bind(this,c)}anyEvent(){return iterator$1(this)}offAny(c){assertListener$1(c),this.logIfDebugEnabled("unsubscribeAny",void 0,void 0),emitMetaEvent$1(this,listenerRemoved$1,{listener:c}),anyMap$1.get(this).delete(c)}clearListeners(c){c=Array.isArray(c)?c:[c];for(const t of c)if(this.logIfDebugEnabled("clear",t,void 0),"string"==typeof t||"symbol"==typeof t||"number"==typeof t){const c=getListeners$1(this,t);c&&c.clear();const e=getEventProducers$1(this,t);if(e){for(const c of e)c.finish();e.clear()}}else{anyMap$1.get(this).clear();for(const[c,t]of eventsMap$1.get(this).entries())t.clear(),eventsMap$1.get(this).delete(c);for(const[c,t]of producersMap$1.get(this).entries()){for(const c of t)c.finish();t.clear(),producersMap$1.get(this).delete(c)}}}listenerCount(c){c=Array.isArray(c)?c:[c];let t=0;for(const e of c)if("string"!=typeof e){void 0!==e&&assertEventName$1(e),t+=anyMap$1.get(this).size;for(const c of eventsMap$1.get(this).values())t+=c.size;for(const c of producersMap$1.get(this).values())t+=c.size}else t+=anyMap$1.get(this).size+(getListeners$1(this,e)?.size??0)+(getEventProducers$1(this,e)?.size??0)+(getEventProducers$1(this)?.size??0);return t}bindMethods(c,t){if("object"!=typeof c||null===c)throw new TypeError("`target` must be an object");t=defaultMethodNamesOrAssert$1(t);for(const e of t){if(void 0!==c[e])throw new Error(`The property \`${e}\` already exists on \`target\``);Object.defineProperty(c,e,{enumerable:!1,value:this[e].bind(this)})}}};const allEmitteryMethods$1=Object.getOwnPropertyNames(Emittery$1.prototype).filter((c=>"constructor"!==c));Object.defineProperty(Emittery$1,"listenerAdded",{value:listenerAdded$1,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(Emittery$1,"listenerRemoved",{value:listenerRemoved$1,writable:!1,enumerable:!0,configurable:!1});const version="1.0.0-beta.4";class Average{constructor(c){this.size=c,this.values=[],this.sum=0}push(c){for(this.values.push(c),this.sum+=c;this.size<this.values.length;)this.sum-=this.values.shift()??0}value(){return this.sum/Math.max(1,this.values.length)}}const defaultAssetsDirBaseUrl=`https://d3opqjmqzxf057.cloudfront.net/noise-suppression/${version}`;class NoiseSuppressionTransformer extends Emittery$1{constructor(){super(),this.isEnabled=!0,this.internalResampleSupported=!1,this.latency=new Average(100),this.transform=this.transformAudioData.bind(this)}async init(c={}){console.log("Noise suppression transformer initialization"),this.transform=c.debug?this.transformDebug.bind(this):this.transformAudioData.bind(this);const t=c.assetsDirBaseUrl??defaultAssetsDirBaseUrl,locateFile=c=>`${t}/${c}`;let e,n=1;await this.isMonoThread(c)?this.wasmInstance=await createWasmMonoInstance({locateFile:locateFile,mainScriptUrlOrBlob:locateFile("main-bin-mono.js")}):(this.wasmInstance=await createWasmMultiInstance({locateFile:locateFile,mainScriptUrlOrBlob:locateFile("main-bin-multi.js")}),n=3),this.wasmTransformer=new this.wasmInstance.DtlnTransformer,await Promise.all([this.loadModel(`${t}/model_1.tflite`,1),this.loadModel(`${t}/model_2.tflite`,2)]);try{e=this.wasmTransformer?.init(n)}catch(c){if("number"==typeof c){let t="";for(let e=0;e<500;++e)t+=String.fromCharCode(this.wasmInstance.HEAP8[c+e]);console.error(t)}else console.error(c)}if(0!==e){const c=`Fail to init wasm transformer, error code = ${e}`;throw console.error(c),c}if(this.internalResampleSupported=this.wasmTransformer?.getInternalResampleSupported(),!this.internalResampleSupported){const c="Internal resampling not supported";throw console.error(c),c}console.log("Noise suppression transformer ready")}setAudioOptions(c,t,e,n,r){this.wasmTransformer?.setAudioOptions(c,t,e,n,r)}enable(){this.isEnabled=!0}disable(){this.isEnabled=!1}getLatency(){return this.latency.value()}getWasmLatencyNs(){return this.wasmTransformer?.getLatencyNs()??0}async transformDebug(c,t){try{const e=performance.now();await this.transformAudioData(c,t),this.latency.push(performance.now()-e)}catch(c){console.error(c)}}async transformAudioData(c,t){if(this.wasmTransformer||this.emit("warning","transformer not initialized"),this.isEnabled&&this.wasmTransformer)try{const t=this.getAudioDataAsFloat32(c),e=this.convertTypedArray(t,Int16Array,32767);this.wasmTransformer.getInputFrame(c.numberOfFrames).set(e);let n=0;try{n=this.wasmTransformer.runAlgorithm(c.numberOfFrames,c.sampleRate,c.numberOfChannels)}catch(c){if("number"==typeof c){let t="";for(let e=0;e<500;++e)t+=String.fromCharCode(this.wasmInstance.HEAP8[c+e]);console.error(t)}else console.error(c)}if(n>0){const t=this.wasmTransformer.getOutputFrame().slice(0,n),e=this.convertTypedArray(t,Float32Array,1/32767),{timestamp:r,sampleRate:o,numberOfChannels:u}=c;c=new AudioData({data:e,format:"f32-planar",numberOfChannels:u,numberOfFrames:e.length,sampleRate:o,timestamp:r})}}catch(c){console.error(c)}t.enqueue(c)}async loadModel(c,t){if(!this.wasmTransformer)return;const e=await fetch(c),n=await e.arrayBuffer(),r=n.byteLength,o=`getModel${t}`,u=this.wasmTransformer[o](r);if(u){const c=new Uint8Array(n);u.set(c)}}getAudioDataAsFloat32(c){return this.audioDataToTypedArray(c,Float32Array,"f32-planar",1)}audioDataToTypedArray(c,t,e,n=c.numberOfChannels){const r=new t(c.numberOfFrames*n);for(let t=0;t<n;++t){const n=c.numberOfFrames*t,o=r.subarray(n,n+c.numberOfFrames);c.copyTo(o,{planeIndex:t,format:e})}return r}convertTypedArray(c,t,e){const n=c.length,r=new t(n);for(let t=0;t<n;++t)r[t]=c[t]*e;return r}isMonoThread(c){if(c.disableWasmMultiThread)return!0;try{if(void 0===new SharedArrayBuffer(1024))throw new Error("not supported")}catch(c){return this.emit("warning","\nMultithread is not available, noise-suppresion is now running on a single thread.\nThis is impacting the performance and increase the latency.\n\nTo enable multithread, you need to serve the application via https with these http headers :\n   - Cross-Origin-Opener-Policy: same-origin\n   - Cross-Origin-Embedder-Policy: require-corp.\nMore info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer#security_requirements\n\nYou can disable this warning by enabling disableWasmMultiThread within the noiseSuppression options.\n"),!0}return!1}}function createGlobalThisVariable(c,t){globalThis.vonage||(globalThis.vonage={}),globalThis.vonage.workerizer||(globalThis.vonage.workerizer={});let e=globalThis.vonage.workerizer;return e[c]||(e[c]=t),e[c]}const globals=createGlobalThisVariable("globals",{});var CommandType=(c=>(c.INIT="INIT",c.FORWARD="FORWARD",c.TERMINATE="TERMINATE",c.GLOBALS_SYNC="GLOBALS_SYNC",c.EVENT="EVENT",c))(CommandType||{});function isTransferable(c){return[ImageBitmap,ReadableStream,WritableStream].some((t=>c instanceof t))}let nextCommandId=0;function postCommand$1(c,t,e,n,r){const o=nextCommandId++;c.postMessage({id:o,type:t,functionName:e,args:n},n.filter((c=>isTransferable(c))));return new Promise((c=>{null==r||r.set(o,c)}))}function postCommand(c,t){const{id:e,type:n}=c,r=Array.isArray(t)?t:[t];postMessage({id:e,type:n,result:t},r.filter((c=>isTransferable(c))))}const workerized=createGlobalThisVariable("workerized",{});function isWorker(){return"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope}async function globalsSync(){if(isWorker())postCommand({type:CommandType.GLOBALS_SYNC},globals);else{const c=[];for(const t in workerized){const{worker:e,resolvers:n}=workerized[t].workerContext;e&&c.push(postCommand$1(e,CommandType.GLOBALS_SYNC,"",[globals],n))}await Promise.all(c)}}function copy(c,t){if(Array.isArray(t))t.splice(0,t.length);else if("object"==typeof t)for(const c in t)delete t[c];for(const e in c)Array.isArray(c[e])?(t[e]=[],copy(c[e],t[e])):"object"==typeof c[e]?(t[e]={},copy(c[e],t[e])):t[e]=c[e]}async function createWorker(c,t,e,n){const r=new t;r.addEventListener("message",(async({data:c})=>{var t,r,o,u,M,ll,cl;switch(c.type){case CommandType.GLOBALS_SYNC:c.id?(null==(r=e.get(null!=(t=c.id)?t:-1))||r(c.result),e.delete(null!=(o=c.id)?o:-1)):(copy(null!=(u=c.result)?u:{},globals),await globalsSync());break;case CommandType.EVENT:const{result:tl}=c,Zl=tl;if(null==(null==Zl?void 0:Zl.name))throw"Missing event name";n(Zl.name,Zl.data);break;default:null==(ll=e.get(null!=(M=c.id)?M:-1))||ll(c.result),e.delete(null!=(cl=c.id)?cl:-1)}}));if(!await postCommand$1(r,CommandType.INIT,"",[c.workerId,globals],e))throw"Failed to instantiate workerized class";return r}const anyMap=new WeakMap,eventsMap=new WeakMap,producersMap=new WeakMap,anyProducer=Symbol("anyProducer"),resolvedPromise=Promise.resolve(),listenerAdded=Symbol("listenerAdded"),listenerRemoved=Symbol("listenerRemoved");let canEmitMetaEvents=!1,isGlobalDebugEnabled=!1;function assertEventName(c){if("string"!=typeof c&&"symbol"!=typeof c&&"number"!=typeof c)throw new TypeError("`eventName` must be a string, symbol, or number")}function assertListener(c){if("function"!=typeof c)throw new TypeError("listener must be a function")}function getListeners(c,t){const e=eventsMap.get(c);if(e.has(t))return e.get(t)}function getEventProducers(c,t){const e="string"==typeof t||"symbol"==typeof t||"number"==typeof t?t:anyProducer,n=producersMap.get(c);if(n.has(e))return n.get(e)}function enqueueProducers(c,t,e){const n=producersMap.get(c);if(n.has(t))for(const c of n.get(t))c.enqueue(e);if(n.has(anyProducer)){const c=Promise.all([t,e]);for(const t of n.get(anyProducer))t.enqueue(c)}}function iterator(c,t){t=Array.isArray(t)?t:[t];let e=!1,flush=()=>{},n=[];const r={enqueue(c){n.push(c),flush()},finish(){e=!0,flush()}};for(const e of t){let t=getEventProducers(c,e);if(!t){t=new Set;producersMap.get(c).set(e,t)}t.add(r)}return{async next(){return n?0===n.length?e?(n=void 0,this.next()):(await new Promise((c=>{flush=c})),this.next()):{done:!1,value:await n.shift()}:{done:!0}},async return(e){n=void 0;for(const e of t){const t=getEventProducers(c,e);if(t&&(t.delete(r),0===t.size)){producersMap.get(c).delete(e)}}return flush(),arguments.length>0?{done:!0,value:await e}:{done:!0}},[Symbol.asyncIterator](){return this}}}function defaultMethodNamesOrAssert(c){if(void 0===c)return allEmitteryMethods;if(!Array.isArray(c))throw new TypeError("`methodNames` must be an array of strings");for(const t of c)if(!allEmitteryMethods.includes(t)){if("string"!=typeof t)throw new TypeError("`methodNames` element must be a string");throw new Error(`${t} is not Emittery method`)}return c}const isMetaEvent=c=>c===listenerAdded||c===listenerRemoved;function emitMetaEvent(c,t,e){if(isMetaEvent(t))try{canEmitMetaEvents=!0,c.emit(t,e)}finally{canEmitMetaEvents=!1}}class Emittery2{static mixin(c,t){return t=defaultMethodNamesOrAssert(t),e=>{if("function"!=typeof e)throw new TypeError("`target` must be function");for(const c of t)if(void 0!==e.prototype[c])throw new Error(`The property \`${c}\` already exists on \`target\``);Object.defineProperty(e.prototype,c,{enumerable:!1,get:function(){return Object.defineProperty(this,c,{enumerable:!1,value:new Emittery2}),this[c]}});const emitteryMethodCaller=t=>function(...e){return this[c][t](...e)};for(const c of t)Object.defineProperty(e.prototype,c,{enumerable:!1,value:emitteryMethodCaller(c)});return e}}static get isDebugEnabled(){var c,t;if("object"!=typeof(null==(c=globalThis.process)?void 0:c.env))return isGlobalDebugEnabled;const{env:e}=null!=(t=globalThis.process)?t:{env:{}};return"emittery"===e.DEBUG||"*"===e.DEBUG||isGlobalDebugEnabled}static set isDebugEnabled(c){isGlobalDebugEnabled=c}constructor(c={}){var t;anyMap.set(this,new Set),eventsMap.set(this,new Map),producersMap.set(this,new Map),producersMap.get(this).set(anyProducer,new Set),this.debug=null!=(t=c.debug)?t:{},void 0===this.debug.enabled&&(this.debug.enabled=!1),this.debug.logger||(this.debug.logger=(c,t,e,n)=>{try{n=JSON.stringify(n)}catch{n=`Object with the following keys failed to stringify: ${Object.keys(n).join(",")}`}"symbol"!=typeof e&&"number"!=typeof e||(e=e.toString());const r=new Date,o=`${r.getHours()}:${r.getMinutes()}:${r.getSeconds()}.${r.getMilliseconds()}`;console.log(`[${o}][emittery:${c}][${t}] Event Name: ${e}\n\tdata: ${n}`)})}logIfDebugEnabled(c,t,e){(Emittery2.isDebugEnabled||this.debug.enabled)&&this.debug.logger(c,this.debug.name,t,e)}on(c,t){assertListener(t),c=Array.isArray(c)?c:[c];for(const e of c){assertEventName(e);let c=getListeners(this,e);if(!c){c=new Set;eventsMap.get(this).set(e,c)}c.add(t),this.logIfDebugEnabled("subscribe",e,void 0),isMetaEvent(e)||emitMetaEvent(this,listenerAdded,{eventName:e,listener:t})}return this.off.bind(this,c,t)}off(c,t){assertListener(t),c=Array.isArray(c)?c:[c];for(const e of c){assertEventName(e);const c=getListeners(this,e);if(c&&(c.delete(t),0===c.size)){eventsMap.get(this).delete(e)}this.logIfDebugEnabled("unsubscribe",e,void 0),isMetaEvent(e)||emitMetaEvent(this,listenerRemoved,{eventName:e,listener:t})}}once(c){let t;const e=new Promise((e=>{t=this.on(c,(c=>{t(),e(c)}))}));return e.off=t,e}events(c){c=Array.isArray(c)?c:[c];for(const t of c)assertEventName(t);return iterator(this,c)}async emit(c,t){var e;if(assertEventName(c),isMetaEvent(c)&&!canEmitMetaEvents)throw new TypeError("`eventName` cannot be meta event `listenerAdded` or `listenerRemoved`");this.logIfDebugEnabled("emit",c,t),enqueueProducers(this,c,t);const n=null!=(e=getListeners(this,c))?e:new Set,r=anyMap.get(this),o=[...n],u=isMetaEvent(c)?[]:[...r];await resolvedPromise,await Promise.all([...o.map((async c=>{if(n.has(c))return c(t)})),...u.map((async e=>{if(r.has(e))return e(c,t)}))])}async emitSerial(c,t){var e;if(assertEventName(c),isMetaEvent(c)&&!canEmitMetaEvents)throw new TypeError("`eventName` cannot be meta event `listenerAdded` or `listenerRemoved`");this.logIfDebugEnabled("emitSerial",c,t);const n=null!=(e=getListeners(this,c))?e:new Set,r=anyMap.get(this),o=[...n],u=[...r];await resolvedPromise;for(const c of o)n.has(c)&&await c(t);for(const e of u)r.has(e)&&await e(c,t)}onAny(c){return assertListener(c),this.logIfDebugEnabled("subscribeAny",void 0,void 0),anyMap.get(this).add(c),emitMetaEvent(this,listenerAdded,{listener:c}),this.offAny.bind(this,c)}anyEvent(){return iterator(this)}offAny(c){assertListener(c),this.logIfDebugEnabled("unsubscribeAny",void 0,void 0),emitMetaEvent(this,listenerRemoved,{listener:c}),anyMap.get(this).delete(c)}clearListeners(c){c=Array.isArray(c)?c:[c];for(const t of c)if(this.logIfDebugEnabled("clear",t,void 0),"string"==typeof t||"symbol"==typeof t||"number"==typeof t){const c=getListeners(this,t);c&&c.clear();const e=getEventProducers(this,t);if(e){for(const c of e)c.finish();e.clear()}}else{anyMap.get(this).clear();for(const[c,t]of eventsMap.get(this).entries())t.clear(),eventsMap.get(this).delete(c);for(const[c,t]of producersMap.get(this).entries()){for(const c of t)c.finish();t.clear(),producersMap.get(this).delete(c)}}}listenerCount(c){var t,e,n,r,o,u;c=Array.isArray(c)?c:[c];let M=0;for(const ll of c)if("string"!=typeof ll){void 0!==ll&&assertEventName(ll),M+=anyMap.get(this).size;for(const c of eventsMap.get(this).values())M+=c.size;for(const c of producersMap.get(this).values())M+=c.size}else M+=anyMap.get(this).size+(null!=(e=null==(t=getListeners(this,ll))?void 0:t.size)?e:0)+(null!=(r=null==(n=getEventProducers(this,ll))?void 0:n.size)?r:0)+(null!=(u=null==(o=getEventProducers(this))?void 0:o.size)?u:0);return M}bindMethods(c,t){if("object"!=typeof c||null===c)throw new TypeError("`target` must be an object");t=defaultMethodNamesOrAssert(t);for(const e of t){if(void 0!==c[e])throw new Error(`The property \`${e}\` already exists on \`target\``);Object.defineProperty(c,e,{enumerable:!1,value:this[e].bind(this)})}}}const allEmitteryMethods=Object.getOwnPropertyNames(Emittery2.prototype).filter((c=>"constructor"!==c));function isInstanceOfEmittery(c){return c.onAny&&c.emit}function isChildClassOfEmittery(c){return c.prototype.onAny&&c.prototype.emit}Object.defineProperty(Emittery2,"listenerAdded",{value:listenerAdded,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(Emittery2,"listenerRemoved",{value:listenerRemoved,writable:!1,enumerable:!0,configurable:!1});let nextId=0;async function createWorkerized(c,t,e){const n=isChildClassOfEmittery(c)?new Emittery2:{},r=nextId++;return Object.getOwnPropertyNames(c.prototype).forEach((c=>{n[c]=(...n)=>postCommand$1(t,CommandType.FORWARD,c,n,e)})),n.terminate=async(...c)=>{const o=await postCommand$1(t,CommandType.TERMINATE,"",c,e);return delete workerized[r],t.terminate(),n.workerContext.worker=void 0,o},n.workerContext={id:r,worker:t,resolvers:e},workerized[r]=n,n}async function workerize(c,t){const e=new Map;let n;const r=await createWorker(c,t,e,((c,t)=>{(null==n?void 0:n.emit)&&(null==n||n.emit(c,t))}));return n=await createWorkerized(c,r,e),n}async function handleCommandForward(c,t){const{functionName:e,args:n}=c;if(!t.instance)throw"instance not initialized";if(!e)throw"missing function name to call";if(!t.instance[e])throw`undefined function [${e}] in class ${t.instance.constructor.workerId}`;postCommand(c,await t.instance[e](...null!=n?n:[]))}const registeredWorkers=createGlobalThisVariable("registeredWorkers",{});function registerWorker(c,t){t.workerId=c,isWorker()&&(registeredWorkers[t.workerId]=t)}function handleCommandInit(c,t){if(!c.args)throw"Missing className while initializing worker";const[e,n]=c.args,r=registeredWorkers[e];if(!r)throw`unknown worker class ${e}`;t.instance=new r(c.args.slice(1)),copy(n,globals),isInstanceOfEmittery(t.instance)&&t.instance.onAny(((c,t)=>{postCommand({type:CommandType.EVENT},{name:c,data:t})})),postCommand(c,void 0!==typeof t.instance)}async function handleCommandTerminate(c,t){const{args:e}=c;if(!t.instance)throw"instance not initialized";let n;t.instance.terminate&&(n=await t.instance.terminate(...null!=e?e:[])),postCommand(c,n)}function handleCommandGlobalsSync(c){if(!c.args)throw"Missing globals while syncing";copy(c.args[0],globals),postCommand(c,{})}function initWorker(){const c={};onmessage=async t=>{const e=t.data;switch(e.type){case CommandType.INIT:handleCommandInit(e,c);break;case CommandType.FORWARD:handleCommandForward(e,c);break;case CommandType.TERMINATE:handleCommandTerminate(e,c);break;case CommandType.GLOBALS_SYNC:handleCommandGlobalsSync(e)}}}isWorker()&&initWorker();const _ProcessorWorker=class extends Emittery$1{constructor(){super(...arguments),this.processor=new Oe}async init(c={}){this.transformer=new NoiseSuppressionTransformer,this.processor.onAny(((c,t)=>this.emit(c,t))),this.transformer.onAny(((c,t)=>this.emit(c,t))),await this.transformer.init(c),await this.processor.setTransformers([this.transformer])}transform(c,t){this.processor.transform(c,t)}setAudioOptions(c,t,e,n,r){this.transformer?.setAudioOptions(c,t,e,n,r)}enable(){this.transformer?.enable()}disable(){this.transformer?.disable()}async terminate(){await this.processor.destroy()}getLatency(){return this.transformer?.getLatency()??0}getWasmLatencyNs(){return this.transformer?.getWasmLatencyNs()??0}};registerWorker("ProcessorWorker",_ProcessorWorker);let ProcessorWorker=_ProcessorWorker;const encodedJs="",blob="undefined"!=typeof window&&window.Blob&&new Blob([atob(encodedJs)],{type:"text/javascript;charset=utf-8"});function WorkerWrapper(){let c;try{if(c=blob&&(window.URL||window.webkitURL).createObjectURL(blob),!c)throw"";return new Worker(c)}catch(c){return new Worker("data:application/javascript;base64,"+encodedJs)}finally{c&&(window.URL||window.webkitURL).revokeObjectURL(c)}}class ProcessorMain extends Emittery$1{constructor(){super(...arguments),this.isEnabled=!0}async init(c={}){await this.startWorker(c)}async enable(){this.isEnabled=!0,await(this.worker?.enable())}async disable(){this.isEnabled=!1,await(this.worker?.disable())}async transform(c,t){await this.startWorker(),await(this.worker?.transform(c,t))}async destroy(){await(this.worker?.terminate()),this.worker=void 0}async setAudioOptions(c,t,e,n,r){await(this.worker?.setAudioOptions(c,t,e,n,r))}async getLatency(){return this.worker?.getLatency()??0}async getWasmLatencyNs(){return this.worker?.getWasmLatencyNs()??0}async startWorker(c={}){this.worker||(this.worker=await workerize(ProcessorWorker,WorkerWrapper),this.worker.onAny(((c,t)=>this.emit(c,t))),await this.worker.init(c),this.isEnabled||await this.worker.disable())}async close(){await(this.worker?.terminate())}}class VonageNoiseSuppression extends Emittery$1{async init(c={}){this.worker=new ProcessorMain,this.worker.onAny(((c,t)=>this.emit(c,t))),await this.worker.init(c),this.connector=new Fe(this.worker)}getConnector(){return this.connector}async close(){await(this.worker?.close())}async enable(){await(this.worker?.enable())}async disable(){await(this.worker?.disable())}async getLatency(){return this.worker?.getLatency()??0}async getWasmLatencyNs(){return this.worker?.getWasmLatencyNs()??0}}function createVonageNoiseSuppression(){return new VonageNoiseSuppression}